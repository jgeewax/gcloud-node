{"id":"compute/service","type":"class","name":"Service","overview":"<p>\n  This class allows you interact with Google Compute Engine.\n</p>\n\n<p>\n  First, install <code>google-cloud</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save google-cloud</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>google-cloud</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Compute Engine</h4>\n<div hljs language=\"javascript\">\nvar gcloud = require('google-cloud');\nvar gce = gcloud.compute();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar gcloud = require('google-cloud');\nvar gce = gcloud.compute({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>google-cloud</code> are outlined in our <a href=\"#/docs/google-cloud/0.43.0/guides/authentication\">Authentication guide</a>.\n</p>\n\n","description":"","source":"packages/compute/src/service.js","parent":"compute","children":[],"methods":[{"id":"Service","name":"Service","type":"constructor","description":"<p>An HTTP(S) load balancing backend service is a centralized service for managing backends, which in turn manage instances that handle user requests. You configure your load balancing service to route requests to your backend service. The backend service in turn knows which instances it can use, how much traffic they can handle, and how much traffic they are currently handling. In addition, the backend service monitors health checking and does not send traffic to unhealthy instances.</p>","source":"packages/compute/src/service.js#L52","resources":[{"title":"Backend Services Overview","link":"https://cloud.google.com/compute/docs/load-balancing/http/backend-service"}],"examples":[{"code":"var service = gce.service('service-name');"}],"params":[],"exceptions":[],"returns":[]},{"id":"create","name":"create","type":"instance","description":"<p>Create a backend service.</p>","source":"packages/compute/src/service.js#L87","resources":[],"examples":[{"code":"var config = {\n  backends: [\n    {\n      group: 'URL of an Instance Group resource'\n    }\n  ],\n  healthChecks: [\n    'URL of an HTTP/HTTPS health check resource'\n  ]\n};\n\nservice.create(config, function(err, service, operation, apiResponse) {\n  // `service` is a Service object.\n\n  // `operation` is an Operation object that can be used to check the\n  // of the request.\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"service.create(config).then(function(data) {\n  var service = data[0];\n  var operation = data[1];\n  var apiResponse = data[2];\n});"}],"params":[{"name":"config","description":"<ul> <li>See <a data-custom-type=\"compute\" data-method=\"createService\">compute#createService</a>.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"exists","name":"exists","type":"instance","description":"<p>Check if the backend service exists.</p>","source":"packages/compute/src/service.js#L108","resources":[],"examples":[{"code":"service.exists(function(err, exists) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"service.exists().then(function(data) {\n  var exists = data[0];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.exists","description":"<ul> <li>Whether the backend service exists or not.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"get","name":"get","type":"instance","description":"<p>Get a Service object if it exists.</p><p>You may optionally use this to &quot;get or create&quot; an object by providing an object with <code>autoCreate</code> set to <code>true</code>. Any extra configuration that is normally required for the <code>create</code> method must be contained within this object as well.</p>","source":"packages/compute/src/service.js#L135","resources":[],"examples":[{"code":"service.get(function(err, service, apiResponse) {\n  // `service` is a Service object.\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"service.get().then(function(data) {\n  var service = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["options"],"optional":true,"nullable":false},{"name":"options.autoCreate","description":"<ul> <li>Automatically create the object if it does not exist. Default: <code>false</code></li> </ul> ","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"getMetadata","name":"getMetadata","type":"instance","description":"<p>Get the metadata of this backend service.</p>","source":"packages/compute/src/service.js#L160","resources":[{"title":"BackendService Resource","link":"https://cloud.google.com/compute/docs/reference/v1/backendServices#resource"},{"title":"BackendService: get API Documentation","link":"https://cloud.google.com/compute/docs/reference/v1/backendServices/get"}],"examples":[{"code":"service.getMetadata(function(err, metadata, apiResponse) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"service.getMetadata().then(function(data) {\n  var metadata = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.metadata","description":"<ul> <li>The service&#39;s metadata.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"delete","name":"delete","type":"instance","description":"<p>Delete the backend service.</p>","source":"packages/compute/src/service.js#L202","resources":[{"title":"BackendServices: delete API Documentation","link":"https://cloud.google.com/compute/docs/reference/v1/backendServices/delete"}],"examples":[{"code":"service.delete(function(err, operation, apiResponse) {\n  // `operation` is an Operation object that can be used to check the status\n  // of the request.\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"service.delete().then(function(data) {\n  var operation = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.operation","description":"<ul> <li>An operation object that can be used to check the status of the request.</li> </ul> ","types":["<a data-custom-type=\"compute/operation\" data-method=\"\">compute/operation</a>"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"getHealth","name":"getHealth","type":"instance","description":"<p>Get the most recent health check results.</p>","source":"packages/compute/src/service.js#L263","resources":[{"title":"BackendServices: getHealth API Documentation","link":"https://cloud.google.com/compute/docs/reference/latest/backendServices/getHealth"}],"examples":[{"code":"var group = {\n  name: 'instance-group-name',\n  zone: 'us-central1-a'\n};\n\nservice.getHealth(group, function(err, status, apiResponse) {\n  if (!err) {\n    // status = [\n    //   {\n    //      ipAddress: '...',\n    //      instance: '...',\n    //      healthState: '...',\n    //      port: '...'\n    //   }\n    // ]\n  }\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"service.getHealth(group).then(function(data) {\n  var status = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"group","description":"<ul> <li>The fully-qualified URL of an Instance Group resource.</li> </ul> ","types":["string","object"],"optional":false,"nullable":false},{"name":"group.name","description":"<ul> <li>The name of the Instance Group resource.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"group.zone","description":"<ul> <li>The name of the zone or a Zone object.</li> </ul> ","types":["<a data-custom-type=\"compute/zone\" data-method=\"\">compute/zone</a>","string"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.status","description":"<ul> <li>A list of health checks and their corresponding status.</li> </ul> ","types":["object[]"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"setMetadata","name":"setMetadata","type":"instance","description":"<p>Set the backend service&#39;s metadata.</p>","source":"packages/compute/src/service.js#L320","resources":[{"title":"BackendService Resource","link":"https://cloud.google.com/compute/docs/reference/v1/backendServices#resource"}],"examples":[{"code":"var metadata = {\n  description: 'New description'\n};\n\nservice.setMetadata(metadata, function(err, operation, apiResponse) {\n  // `operation` is an Operation object that can be used to check the status\n  // of the request.\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"service.setMetadata(metadata).then(function(data) {\n  var operation = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"metadata","description":"<ul> <li>See a <a href=\"https://cloud.google.com/compute/docs/reference/v1/backendServices#resource\">BackendService resource</a>.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.operation","description":"<ul> <li>An operation object that can be used to check the status of the request.</li> </ul> ","types":["<a data-custom-type=\"compute/operation\" data-method=\"\">compute/operation</a>"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]}],"path":"service.json"}