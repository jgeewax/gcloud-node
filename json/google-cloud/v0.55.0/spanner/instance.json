{"id":"spanner/instance","type":"class","name":"Instance","overview":"<p>\n  This class allows you interact with Cloud Spanner.\n</p>\n\n\n<div class=\"notice\">\n  <strong><code>google-cloud</code> is deprecated</strong>\n  <p>\n    Due to the scope of our API rapidly increasing, you may notice a decrease in performance if you continue to use the bundled module, <code>google-cloud</code>.\n  </p>\n  <p>\n    Going forward, please install only the individual service modules that you need, such as <code>@google-cloud/spanner</code>.\n  </p>\n</div>\n\n\n<p>\n  First, install <code>google-cloud</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save google-cloud</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>google-cloud</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Google Cloud Platform</h4>\n<div hljs language=\"javascript\">\nvar gcloud = require('google-cloud');\nvar spanner = gcloud.spanner();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar gcloud = require('google-cloud');\nvar spanner = gcloud.spanner({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>google-cloud</code> are outlined in our <a href=\"#/docs/google-cloud/v0.55.0/guides/authentication\">Authentication guide</a>.\n</p>\n","description":"","source":"packages/spanner/src/instance.js","parent":"spanner","children":[],"methods":[{"id":"Instance","name":"Instance","type":"constructor","description":"<p>Create an Instance object to interact with a Cloud Spanner instance.</p>","source":"packages/spanner/src/instance.js#L48","resources":[],"examples":[{"code":"var instance = spanner.instance('my-instance');"}],"params":[{"name":"name","description":"<ul> <li>Name of the instance.</li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"create","name":"create","type":"instance","description":"<p>Create an instance.</p>","source":"packages/spanner/src/instance.js#L87","resources":[],"examples":[{"code":"instance.create(function(err, instance, operation, apiResponse) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  operation\n    .on('error', function(err) {})\n    .on('complete', function() {\n      // Instance created successfully.\n    });\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"instance.create()\n  .then(function(data) {\n    var operation = data[0];\n    var apiResponse = data[1];\n\n    return operation.promise();\n  })\n  .then(function() {\n    // Instance created successfully.\n  });"}],"params":[{"name":"config","description":"<ul> <li>See <a data-custom-type=\"spanner\" data-method=\"createInstance\">spanner#createInstance</a>.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"exists","name":"exists","type":"instance","description":"<p>Check if an instance exists.</p>","source":"packages/spanner/src/instance.js#L107","resources":[],"examples":[{"code":"instance.exists(function(err, exists) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"instance.exists().then(function(data) {\n  var exists = data[0];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.exists","description":"<ul> <li>Whether the instance exists or not.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"get","name":"get","type":"instance","description":"<p>Get an instance if it exists.</p><p>You may optionally use this to &quot;get or create&quot; an object by providing an object with <code>autoCreate</code> set to <code>true</code>. Any extra configuration that is normally required for the <code>create</code> method must be contained within this object as well.</p>","source":"packages/spanner/src/instance.js#L134","resources":[],"examples":[{"code":"instance.get(function(err, instance, apiResponse) {\n  // `instance.metadata` has been populated.\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"instance.get().then(function(data) {\n  var instance = data[0];\n  var apiResponse = data[0];\n});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["options"],"optional":true,"nullable":false},{"name":"options.autoCreate","description":"<ul> <li>Automatically create the object if it does not exist. Default: <code>false</code></li> </ul> ","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"createDatabase","name":"createDatabase","type":"instance","description":"<p>Create a database in this instance.</p>","source":"packages/spanner/src/instance.js#L229","resources":[{}],"examples":[{"code":"function callback(err, database, operation, apiResponse) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  operation\n    .on('error', function(err) {})\n    .on('complete', function() {\n      // Database created successfully.\n    });\n}\n\ninstance.createDatabase('new-database-name', callback);"},{"caption":"<p>Set the schema for the database.</p>","code":"instance.createDatabase('new-database-name', {\n  schema:\n    'CREATE TABLE Singers (' +\n    '  SingerId STRING(1024) NOT NULL,' +\n    '  Name STRING(1024),' +\n    ') PRIMARY KEY(SingerId)'\n}, callback);"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"instance.createDatabase('new-database-name')\n  .then(function(data) {\n    var database = data[0];\n    var operation = data[1];\n    return operation.promise();\n  })\n  .then(function() {\n    // Database created successfully.\n  });"}],"params":[{"name":"name","description":"<ul> <li>The name of the database to create.</li> </ul> ","types":["name"],"optional":false,"nullable":false},{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.poolOptions","description":"<ul> <li>See <a data-custom-type=\"spanner/database\" data-method=\"Database\">spanner/database#Database</a> for all of the available session pool configuration settings.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.database","description":"<ul> <li>The newly created database.</li> </ul> ","types":["<a data-custom-type=\"spanner/database\" data-method=\"\">spanner/database</a>"],"optional":false,"nullable":false},{"name":"callback.operation","description":"<ul> <li>An operation object that can be used to check the status of the request.</li> </ul> ","types":["Operation"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[{"type":"Error","description":"<p>If a name is not provided.</p>"}],"returns":[]},{"id":"database","name":"database","type":"instance","description":"<p>Get a reference to a Database object.</p>","source":"packages/spanner/src/instance.js#L281","resources":[],"examples":[{"code":"var database = instance.database('my-database');"}],"params":[{"name":"name","description":"<ul> <li>The name of the instance.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"poolOptions","description":"<ul> <li>See <a data-custom-type=\"spanner/database\" data-method=\"Database\">spanner/database#Database</a> for all of the available session pool configuration settings.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[{"type":"Error","description":"<p>If a name is not provided.</p>"}],"returns":[{"types":["<a data-custom-type=\"spanner/database\" data-method=\"\">spanner/database</a>"],"description":"<ul> <li>A Database object.</li> </ul> "}]},{"id":"delete","name":"delete","type":"instance","description":"<p>Delete the instance.</p>","source":"packages/spanner/src/instance.js#L314","resources":[{}],"examples":[{"code":"instance.delete(function(err, apiResponse) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  // Instance was deleted successfully.\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"instance.delete().then(function(data) {\n  var apiResponse = data[0];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"getDatabases","name":"getDatabases","type":"instance","description":"<p>Get a list of databases.</p>","source":"packages/spanner/src/instance.js#L365","resources":[{}],"examples":[{"code":"instance.getDatabases(function(err, databases) {\n  // `databases` is an array of `Database` objects.\n});"},{"caption":"<p>To control how many API requests are made and page through the results \nmanually, set <code>autoPaginate</code> to <code>false</code>.</p>","code":"function callback(err, databases, nextQuery, apiResponse) {\n  if (nextQuery) {\n    // More results exist.\n    instance.getDatabases(nextQuery, callback);\n  }\n}\n\ninstance.getDatabases({\n  autoPaginate: false\n}, callback);"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"instance.getDatabases().then(function(data) {\n  var databases = data[0];\n});"}],"params":[{"name":"query","description":"<ul> <li>Query object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"query.autoPaginate","description":"<ul> <li>Have pagination handled automatically. Default: true.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"query.maxApiCalls","description":"<ul> <li>Maximum number of API calls to make.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"query.pageSize","description":"<ul> <li>Maximum number of results to return.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"query.pageToken","description":"<ul> <li>Token returned from a previous call, to request the next page of results.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.instances","description":"<ul> <li>List of all instances.</li> </ul> ","types":["<a data-custom-type=\"spanner/instance[]\" data-method=\"\">spanner/instance[]</a>"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"getDatabasesStream","name":"getDatabasesStream","type":"instance","description":"<p>Get a list of databases as a readable object stream.</p>","source":"packages/spanner/src/instance.js#L418","resources":[{}],"examples":[{"code":"instance.getDatabasesStream()\n  .on('error', console.error)\n  .on('data', function(database) {\n    // `database` is a `Database` object.\n  })\n  .on('end', function() {\n    // All databases retrieved.\n  });"},{"caption":"<p>If you anticipate many results, you can end a stream early to prevent \nunnecessary processing and API requests.</p>","code":"instance.getDatabasesStream()\n  .on('data', function(database) {\n    this.end();\n  });"}],"params":[{"name":"options","description":"<ul> <li>Configuration object. See <a data-custom-type=\"spanner/instance\" data-method=\"getDatabases\">spanner/instance#getDatabases</a> for a complete list of options.</li> </ul> ","types":["object"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["stream"],"description":""}]},{"id":"getMetadata","name":"getMetadata","type":"instance","description":"<p>Get the instance&#39;s metadata.</p>","source":"packages/spanner/src/instance.js#L442","resources":[{}],"examples":[{"code":"instance.getMetadata(function(err, metadata, apiResponse) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"instance.getMetadata().then(function(data) {\n  var metadata = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.metadata","description":"<ul> <li>The instance&#39;s metadata.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"setMetadata","name":"setMetadata","type":"instance","description":"<p>Update the metadata for this instance. Note that this method follows PATCH semantics, so previously-configured settings will persist.</p>","source":"packages/spanner/src/instance.js#L486","resources":[{}],"examples":[{"code":"var metadata = {\n  displayName: 'My Instance'\n};\n\ninstance.setMetadata(metadata, function(err, operation, apiResponse) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  operation\n    .on('error', function(err) {})\n    .on('complete', function() {\n      // Metadata updated successfully.\n    });\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"instance.setMetadata(metadata).then(function(data) {\n  var operation = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"metadata","description":"<ul> <li>New metadata.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.operation","description":"<ul> <li>An operation object that can be used to check the status of the request.</li> </ul> ","types":["<a data-custom-type=\"compute/operation\" data-method=\"\">compute/operation</a>"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]}],"path":"instance.json"}