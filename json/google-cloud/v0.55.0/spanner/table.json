{"id":"spanner/table","type":"class","name":"Table","overview":"<p>\n  This class allows you interact with Cloud Spanner.\n</p>\n\n\n<div class=\"notice\">\n  <strong><code>google-cloud</code> is deprecated</strong>\n  <p>\n    Due to the scope of our API rapidly increasing, you may notice a decrease in performance if you continue to use the bundled module, <code>google-cloud</code>.\n  </p>\n  <p>\n    Going forward, please install only the individual service modules that you need, such as <code>@google-cloud/spanner</code>.\n  </p>\n</div>\n\n\n<p>\n  First, install <code>google-cloud</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save google-cloud</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>google-cloud</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Google Cloud Platform</h4>\n<div hljs language=\"javascript\">\nvar gcloud = require('google-cloud');\nvar spanner = gcloud.spanner();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar gcloud = require('google-cloud');\nvar spanner = gcloud.spanner({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>google-cloud</code> are outlined in our <a href=\"#/docs/google-cloud/v0.55.0/guides/authentication\">Authentication guide</a>.\n</p>\n","description":"","source":"packages/spanner/src/table.js","parent":"spanner","children":[],"methods":[{"id":"Table","name":"Table","type":"constructor","description":"<p>Create a Table object to interact with a table in a Cloud Spanner database.</p>","source":"packages/spanner/src/table.js#L47","resources":[],"examples":[{"code":"var instance = spanner.instance('my-instance');\nvar database = instance.database('my-database');\nvar table = database.table('my-table');"}],"params":[{"name":"name","description":"<ul> <li>Name of the table.</li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"create","name":"create","type":"instance","description":"<p>Create a table.</p>","source":"packages/spanner/src/table.js#L101","resources":[],"examples":[{"code":"var schema =\n  'CREATE TABLE Singers (' +\n  '  SingerId INT64 NOT NULL,' +\n  '  FirstName STRING(1024),' +\n  '  LastName STRING(1024),' +\n  '  SingerInfo BYTES(MAX),' +\n  ') PRIMARY KEY(SingerId)';\n\ntable.create(schema, function(err, table, operation, apiResponse) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  operation\n    .on('error', function(err) {})\n    .on('complete', function() {\n      // Table created successfully.\n    });\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"table.create(schema)\n  .then(function(data) {\n    var table = data[0];\n    var operation = data[1];\n\n    return operation.promise();\n  })\n  .then(function() {\n    // Table created successfully.\n  });"}],"params":[{"name":"schema","description":"<ul> <li>See <a data-custom-type=\"database\" data-method=\"createTable\">database#createTable</a>.</li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"createReadStream","name":"createReadStream","type":"instance","description":"<p>Create a readable object stream to receive rows from the database using key lookups and scans.</p>","source":"packages/spanner/src/table.js#L182","resources":[{},{}],"examples":[{"code":"table.createReadStream({\n    keys: ['1'],\n    columns: ['SingerId', 'name']\n  })\n  .on('error', function(err) {})\n  .on('data', function(row) {\n    // row = {\n    //   SingerId: '1',\n    //   Name: 'Eddie Wilson'\n    // }\n  })\n  .on('end', function() {\n    // All results retrieved.\n  });"},{"caption":"<p>Provide an array for <code>query.keys</code> to read with a composite key.</p>","code":"var query = {\n  keys: [\n    [\n      'Id1',\n      'Name1'\n    ],\n    [\n      'Id2',\n      'Name2'\n    ]\n  ],\n  // ...\n};"},{"caption":"<p>If you anticipate many results, you can end a stream early to prevent \nunnecessary processing and API requests.</p>","code":"table.createReadStream({\n    keys: ['1'],\n    columns: ['SingerId', 'name']\n  })\n  .on('data', function(row) {\n    this.end();\n  });"}],"params":[{"name":"table","description":"<ul> <li>The table to read from.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"query","description":"<ul> <li>Configuration object. See <a href=\"https://cloud.google.com/spanner/docs/reference/rpc/google.spanner.v1#google.spanner.v1.ReadRequest\"><code>ReadRequest</code></a>.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"query.columns","description":"<ul> <li>The columns of the table to be returned for each row matching this query.</li> </ul> ","types":["string[]"],"optional":false,"nullable":false},{"name":"query.keys","description":"<ul> <li>The primary keys of the rows in this table to be yielded. If using a composite key, provide an array within this array.  See the example below.</li> </ul> ","types":["*[]","Array.<*>[]"],"optional":false,"nullable":false},{"name":"query.index","description":"<ul> <li>The name of an index on the table.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"query.limit","description":"<ul> <li>The number of rows to return.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"options","description":"<ul> <li><a href=\"https://cloud.google.com/spanner/docs/timestamp-bounds\">Transaction options</a>.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.exactStaleness","description":"<ul> <li>Executes all reads at the timestamp that is <code>exactStaleness</code> old.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"options.minReadTimestamp","description":"<ul> <li>Executes all reads at a timestamp greater than or equal to this.</li> </ul> ","types":["date"],"optional":false,"nullable":false},{"name":"options.maxStaleness","description":"<ul> <li>Read data at a timestamp that is greater than or equal to this.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"options.readTimestamp","description":"<ul> <li>Execute all reads at the given timestamp.</li> </ul> ","types":["date"],"optional":false,"nullable":false},{"name":"options.returnReadTimestamp","description":"<ul> <li>If <code>true</code>, returns the read timestamp.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"options.strong","description":"<ul> <li>Read at the timestamp where all previously committed transactions are visible.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["Stream"],"description":""}]},{"id":"delete","name":"delete","type":"instance","description":"<p>Delete the table.</p>","source":"packages/spanner/src/table.js#L235","resources":[],"examples":[{"code":"table.delete(function(err, operation, apiResponse) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  operation\n    .on('error', function(err) {})\n    .on('complete', function() {\n      // Table deleted successfully.\n    });\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"table.delete()\n  .then(function(data) {\n    var operation = data[0];\n    return operation.promise();\n  })\n  .then(function() {\n    // Table deleted successfully.\n  });"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.operation","description":"<ul> <li>An operation object that can be used to check the status of the request.</li> </ul> ","types":["Operation"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"deleteRows","name":"deleteRows","type":"instance","description":"<p>Delete rows from this table.</p>","source":"packages/spanner/src/table.js#L277","resources":[{}],"examples":[{"code":"var keys = ['Id1', 'Id2', 'Id3'];\n\ntable.deleteRows(keys, function(err, apiResponse) {});"},{"caption":"<p>Provide an array for <code>keys</code> to delete rows with a composite key.</p>","code":"var keys = [\n  [\n    'Id1',\n    'Name1'\n  ],\n  [\n    'Id2',\n    'Name2'\n  ]\n];"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"table.deleteRows(keys)\n  .then(function(data) {\n    var apiResponse = data[0];\n  });"}],"params":[{"name":"keys","description":"<ul> <li>The keys for the rows to delete. If using a composite key, provide an array within this array. See the example below.</li> </ul> ","types":["*[]","Array.<*>[]"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"insert","name":"insert","type":"instance","description":"<p>Insert rows of data into this table.</p>","source":"packages/spanner/src/table.js#L329","resources":[{}],"examples":[{"code":"var row = {\n  SingerId: 'Id3',\n  Name: 'Eddie Wilson'\n};\n\ntable.insert(row, function(err, apiResponse) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  // Rows inserted successfully.\n});"},{"caption":"<p>Multiple rows can be inserted at once.</p>","code":"var row2 = {\n  SingerId: 'Id3b',\n  Name: 'Joe West'\n};\n\ntable.insert([\n  row,\n  row2\n], function(err, apiResponse) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"table.insert(row)\n  .then(function(data) {\n    var apiResponse = data[0];\n  });"}],"params":[{"name":"keyVals","description":"<ul> <li>A map of names to values of data to insert into this table.</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"read","name":"read","type":"instance","description":"<p>Receive rows from the database using key lookups and scans.</p><h4>Performance Considerations</h4> <p>This method wraps the streaming method, <a data-custom-type=\"spanner/table\" data-method=\"createReadStream\">spanner/table#createReadStream</a> for your convenience. All rows will be stored in memory before being released to your callback. If you intend on receiving a lot of results from your query, consider using the streaming method, so you can free each result from memory after consuming it.</p>","source":"packages/spanner/src/table.js#L440","resources":[],"examples":[{"code":"var query = {\n  keys: ['1'],\n  columns: ['SingerId', 'name']\n};\n\ntable.read(query, function(err, rows) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  var row1 = rows[0];\n\n  // row1 = [\n  //   {\n  //     name: 'SingerId',\n  //     value: '1'\n  //   },\n  //   {\n  //     name: 'Name',\n  //     value: 'Eddie Wilson'\n  //   }\n  // ]\n});"},{"caption":"<p>Provide an array for <code>query.keys</code> to read with a composite key.</p>","code":"var query = {\n  keys: [\n    [\n      'Id1',\n      'Name1'\n    ],\n    [\n      'Id2',\n      'Name2'\n    ]\n  ],\n  // ...\n};"},{"caption":"<p>Rows are returned as an array of object arrays. Each object has a <code>name</code> \nand <code>value</code> property. To get a serialized object, call <code>toJSON()</code>.</p>","code":"table.read(query, function(err, rows) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  var row1 = rows[0];\n\n  // rows1.toJSON() = {\n  //   SingerId: '1',\n  //   Name: 'Eddie Wilson'\n  // }\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"table.read(query)\n  .then(function(data) {\n    var apiResponse = data[0];\n  });"}],"params":[{"name":"query","description":"<ul> <li>Configuration object, describing what to read from the table.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"query.columns","description":"<ul> <li>The columns of the table to be returned for each row matching this query.</li> </ul> ","types":["string[]"],"optional":false,"nullable":false},{"name":"query.keys","description":"<ul> <li>The primary keys of the rows in this table to be yielded. If using a composite key, provide an array within this array.  See the example below.</li> </ul> ","types":["*[]","Array.<*>[]"],"optional":false,"nullable":false},{"name":"query.index","description":"<ul> <li>The name of an index on the table.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"query.limit","description":"<ul> <li>The number of rows to return.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"options","description":"<ul> <li><a href=\"https://cloud.google.com/spanner/docs/timestamp-bounds\">Transaction options</a>.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.exactStaleness","description":"<ul> <li>Executes all reads at the timestamp that is <code>exactStaleness</code> old.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"options.minReadTimestamp","description":"<ul> <li>Executes all reads at a timestamp greater than or equal to this.</li> </ul> ","types":["date"],"optional":false,"nullable":false},{"name":"options.maxStaleness","description":"<ul> <li>Read data at a timestamp that is greater than or equal to this.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"options.readTimestamp","description":"<ul> <li>Execute all reads at the given timestamp.</li> </ul> ","types":["date"],"optional":false,"nullable":false},{"name":"options.returnReadTimestamp","description":"<ul> <li>If <code>true</code>, returns the read timestamp.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"options.strong","description":"<ul> <li>Read at the timestamp where all previously committed transactions are visible.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.rows","description":"<ul> <li>Rows are returned as an array of object arrays. Each object has a <code>name</code> and <code>value</code> property. To get a  serialized object, call <code>toJSON()</code>.</li> </ul> ","types":["array[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"replace","name":"replace","type":"instance","description":"<p>Replace rows of data within this table.</p>","source":"packages/spanner/src/table.js#L492","resources":[{}],"examples":[{"code":"var row = {\n  SingerId: 'Id3',\n  Name: 'Joe West'\n};\n\ntable.replace(row, function(err, apiResponse) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  // Row replaced successfully.\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"table.replace(row)\n  .then(function(data) {\n    var apiResponse = data[0];\n  });"}],"params":[{"name":"keyVals","description":"<ul> <li>A map of names to values of data to insert into this table.</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"update","name":"update","type":"instance","description":"<p>Update rows of data within this table.</p>","source":"packages/spanner/src/table.js#L530","resources":[{}],"examples":[{"code":"var row = {\n  SingerId: 'Id3',\n  Name: 'Joe West'\n};\n\ntable.update(row, function(err, apiResponse) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  // Row updated successfully.\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"table.update(row)\n  .then(function(data) {\n    var apiResponse = data[0];\n  });"}],"params":[{"name":"keyVals","description":"<ul> <li>A map of names to values of data to insert into this table.</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"upsert","name":"upsert","type":"instance","description":"<p>Insert or update rows of data within this table.</p>","source":"packages/spanner/src/table.js#L568","resources":[{}],"examples":[{"code":"var row = {\n  SingerId: 'Id3',\n  Name: 'Joe West'\n};\n\ntable.update(row, function(err, apiResponse) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  // Row inserted or updated successfully.\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"table.update(row)\n  .then(function(data) {\n    var apiResponse = data[0];\n  });"}],"params":[{"name":"keyVals","description":"<ul> <li>A map of names to values of data to insert into this table.</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]}],"path":"table.json"}