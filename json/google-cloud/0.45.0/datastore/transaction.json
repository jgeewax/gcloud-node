{"id":"datastore/transaction","type":"class","name":"Transaction","overview":"<p>\n  This class allows you interact with Google Cloud Datastore.\n</p>\n\n<p>\n  First, install <code>google-cloud</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save google-cloud</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>google-cloud</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Compute Engine</h4>\n<div hljs language=\"javascript\">\nvar gcloud = require('google-cloud');\nvar datastore = gcloud.datastore();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar gcloud = require('google-cloud');\nvar datastore = gcloud.datastore({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>google-cloud</code> are outlined in our <a href=\"#/docs/google-cloud/0.45.0/guides/authentication\">Authentication guide</a>.\n</p>\n\n","description":"","source":"packages/datastore/src/transaction.js","parent":"datastore","children":[],"methods":[{"id":"Transaction","name":"Transaction","type":"constructor","description":"<p>A transaction is a set of Datastore operations on one or more entities. Each transaction is guaranteed to be atomic, which means that transactions are never partially applied. Either all of the operations in the transaction are applied, or none of them are applied.</p>","source":"packages/datastore/src/transaction.js#L54","resources":[{"title":"Transactions Reference","link":"https://cloud.google.com/datastore/docs/concepts/transactions"}],"examples":[{"code":"var transaction = datastore.transaction();"}],"params":[],"exceptions":[],"returns":[]},{"id":"commit","name":"commit","type":"instance","description":"<p>Commit the remote transaction and finalize the current transaction instance.</p><p>If the commit request fails, we will automatically rollback the transaction.</p>","source":"packages/datastore/src/transaction.js#L108","resources":[],"examples":[{"code":"transaction.commit(function(err, apiResponse) {\n  if (err) {\n    // Transaction could not be committed.\n  }\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"transaction.commit().then(function(data) {\n  var apiResponse = data[0];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request. If the commit fails, we automatically try to rollback the transaction (see <a data-custom-type=\"datastore/transaction\" data-method=\"rollback\">datastore/transaction#rollback</a>).</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"createQuery","name":"createQuery","type":"instance","description":"<p>Create a query for the specified kind. See <a data-custom-type=\"datastore/query\" data-method=\"\">datastore/query</a> for all of the available methods.</p>","source":"packages/datastore/src/transaction.js#L245","resources":[{"title":"Datastore Queries","link":"https://cloud.google.com/datastore/docs/concepts/queries"}],"examples":[{"code":"// Run the query inside the transaction.\ntransaction.run(function(err) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  var query = transaction.createQuery('Company');\n\n  query.run(function(err, entities) {\n    if (err) {\n      // Error handling omitted.\n    }\n\n    transaction.commit(function(err) {\n      if (!err) {\n        // Transaction committed successfully.\n      }\n    });\n  });\n});"}],"params":[{"name":"namespace","description":"<ul> <li>Namespace.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"kind","description":"<ul> <li>The kind to query.</li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"datastore/query\" data-method=\"\">datastore/query</a>"],"description":""}]},{"id":"delete","name":"delete","type":"instance","description":"<p>Delete all entities identified with the specified key(s) in the current transaction.</p>","source":"packages/datastore/src/transaction.js#L277","resources":[],"examples":[{"code":"transaction.run(function(err) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  // Delete a single entity.\n  transaction.delete(datastore.key(['Company', 123]));\n\n  // Delete multiple entities at once.\n  transaction.delete([\n    datastore.key(['Company', 123]),\n    datastore.key(['Product', 'Computer'])\n  ]);\n\n  transaction.commit(function(err) {\n    if (!err) {\n      // Transaction committed successfully.\n    }\n  });\n});"}],"params":[{"name":"key","description":"<ul> <li>Datastore key object(s).</li> </ul> ","types":["Key","Key[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"rollback","name":"rollback","type":"instance","description":"<p>Reverse a transaction remotely and finalize the current transaction instance.</p>","source":"packages/datastore/src/transaction.js#L318","resources":[],"examples":[{"code":"transaction.run(function(err) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  transaction.rollback(function(err) {\n    if (!err) {\n      // Transaction rolled back successfully.\n    }\n  });\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"transaction.rollback().then(function(data) {\n  var apiResponse = data[0];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"run","name":"run","type":"instance","description":"<p>Begin a remote transaction. In the callback provided, run your transactional commands.</p>","source":"packages/datastore/src/transaction.js#L375","resources":[],"examples":[{"code":"transaction.run(function(err, transaction) {\n  // Perform Datastore transactional operations.\n  var key = datastore.key(['Company', 123]);\n\n  transaction.get(key, function(err, entity) {\n    entity.name = 'Google';\n\n    transaction.save({\n      key: key,\n      data: entity\n    });\n\n    transaction.commit(function(err) {\n      if (!err) {\n        // Data saved successfully.\n      }\n    });\n  });\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"transaction.run().then(function(data) {\n  var transaction = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The function to execute within the context of a transaction.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.transaction","description":"<ul> <li>This transaction instance.</li> </ul> ","types":["<a data-custom-type=\"datastore/transaction\" data-method=\"\">datastore/transaction</a>"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"save","name":"save","type":"instance","description":"<p>Insert or update the specified object(s) in the current transaction. If a key is incomplete, its associated object is inserted and the original Key object is updated to contain the generated ID.</p><p>This method will determine the correct Datastore method to execute (<code>upsert</code>, <code>insert</code>, or <code>update</code>) by using the key(s) provided. For example, if you provide an incomplete key (one without an ID), the request will create a new entity and have its ID automatically assigned. If you provide a complete key, the entity will be updated with the data specified.</p><p>By default, all properties are indexed. To prevent a property from being included in <em>all</em> indexes, you must supply an entity&#39;s <code>data</code> property as an array. See below for an example.</p>","source":"packages/datastore/src/transaction.js#L508","resources":[],"examples":[{"caption":"<p>Save a single entity. \nNotice that we are providing an incomplete key. After the transaction is \ncommitted, the Key object held by the <code>key</code> variable will be populated \nwith a path containing its generated ID.</p>","code":"var key = datastore.key('Company');\n\ntransaction.run(function(err) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  transaction.save({\n    key: key,\n    data: {\n      rating: '10'\n    }\n  });\n\n  transaction.commit(function(err) {\n    if (!err) {\n      // Data saved successfully.\n    }\n  });\n});"},{"caption":"<p>To specify an <code>excludeFromIndexes</code> value for a Datastore entity, pass in \nan array for the key's data. The above example would then look like:</p>","code":"transaction.run(function(err) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  transaction.save({\n    key: key,\n    data: [\n      {\n        name: 'rating',\n        value: '10',\n        excludeFromIndexes: false\n      }\n    ]\n  });\n\n  transaction.commit(function(err) {\n    if (!err) {\n      // Data saved successfully.\n    }\n  });\n});"},{"caption":"<p>Save multiple entities at once.</p>","code":"var companyKey = datastore.key(['Company', 123]);\nvar productKey = datastore.key(['Product', 'Computer']);\n\ntransaction.run(function(err) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  transaction.save([\n    {\n      key: companyKey,\n      data: {\n        HQ: 'Dallas, TX'\n      }\n    },\n    {\n      key: productKey,\n      data: {\n        vendor: 'Dell'\n      }\n    }\n  ]);\n\n  transaction.commit(function(err) {\n    if (!err) {\n      // Data saved successfully.\n    }\n  });\n});"}],"params":[{"name":"entities","description":"<ul> <li>Datastore key object(s).</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false},{"name":"entities.key","description":"<ul> <li>Datastore key object.</li> </ul> ","types":["Key"],"optional":false,"nullable":false},{"name":"entities.data","description":"<ul> <li>Data to save with the provided key. If you provide an array of objects, you must use the explicit syntax:  <code>name</code> for the name of the property and <code>value</code> for its value. You may  also specify an <code>excludeFromIndexes</code> property, set to <code>true</code> or <code>false</code>.</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"allocateIds","name":"allocateIds","type":"instance","description":"<p>Generate IDs without creating entities.</p>","source":"packages/datastore/src/request.js#L171","resources":[],"examples":[{"code":"var incompleteKey = datastore.key(['Company']);"},{"caption":"<p>The following call will create 100 new IDs from the Company kind, which \nexists under the default namespace.</p>","code":"datastore.allocateIds(incompleteKey, 100, function(err, keys) {});"},{"caption":"<p>Or, if you're using a transaction object.</p>","code":"var transaction = datastore.transaction();\n\ntransaction.run(function(err) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  transaction.allocateIds(incompleteKey, 100, function(err, keys) {\n    if (err) {\n      // Error handling omitted.\n    }\n\n    transaction.commit(function(err) {\n      if (!err) {\n        // Transaction committed successfully.\n      }\n    });\n  });\n});"},{"caption":"<p>You may prefer to create IDs from a non-default namespace by providing an \nincomplete key with a namespace. Similar to the previous example, the call \nbelow will create 100 new IDs, but from the Company kind that exists under \nthe \"ns-test\" namespace.</p>","code":"var incompleteKey = datastore.key({\n  namespace: 'ns-test',\n  path: ['Company']\n});\n\nfunction callback(err, keys, apiResponse) {}\n\ndatastore.allocateIds(incompleteKey, 100, callback);"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"datastore.allocateIds(incompleteKey, 100).then(function(data) {\n  var keys = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"incompleteKey","description":"<ul> <li>The key object to complete.</li> </ul> ","types":["Key"],"optional":false,"nullable":false},{"name":"n","description":"<ul> <li>How many IDs to generate.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.keys","description":"<ul> <li>The generated IDs</li> </ul> ","types":["array"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"createReadStream","name":"createReadStream","type":"instance","description":"<p>Retrieve the entities as a readable object stream.</p>","source":"packages/datastore/src/request.js#L226","resources":[],"examples":[{"code":"var keys = [\n  datastore.key(['Company', 123]),\n  datastore.key(['Product', 'Computer'])\n];\n\ndatastore.createReadStream(keys)\n  .on('error', function(err) {})\n  .on('data', function(entity) {\n    // entity is an entity object.\n  })\n  .on('end', function() {\n    // All entities retrieved.\n  });"}],"params":[{"name":"keys","description":"<ul> <li>Datastore key object(s).</li> </ul> ","types":["Key","Key[]"],"optional":false,"nullable":false},{"name":"options","description":"<ul> <li>Optional configuration. See <a data-custom-type=\"datastore\" data-method=\"get\">datastore#get</a> for a complete list of options.</li> </ul> ","types":["object"],"optional":true,"nullable":false}],"exceptions":[{"type":"Error","description":"<p>If at least one Key object is not provided.</p>"}],"returns":[]},{"id":"get","name":"get","type":"instance","description":"<p>Retrieve the entities identified with the specified key(s) in the current transaction. Get operations require a valid key to retrieve the key-identified entity from Datastore.</p>","source":"packages/datastore/src/request.js#L445","resources":[],"examples":[{"caption":"<p>Get a single entity.</p>","code":"var key = datastore.key(['Company', 123]);\n\ndatastore.get(key, function(err, entity) {});"},{"caption":"<p>Or, if you're using a transaction object.</p>","code":"var transaction = datastore.transaction();\n\ntransaction.run(function(err) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  transaction.get(key, function(err, entity) {\n    if (err) {\n      // Error handling omitted.\n    }\n\n    transaction.commit(function(err) {\n      if (!err) {\n        // Transaction committed successfully.\n      }\n    });\n  });\n});"},{"caption":"<p>Get multiple entities at once with a callback.</p>","code":"var keys = [\n  datastore.key(['Company', 123]),\n  datastore.key(['Product', 'Computer'])\n];\n\ndatastore.get(keys, function(err, entities) {});"},{"caption":"<p>Here's how you would update the value of an entity with the help of the \n<code>save</code> method.</p>","code":"datastore.get(key, function(err, entity) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  entity.newValue = true;\n\n  datastore.save({\n    key: key,\n    data: entity\n  }, function(err) {});\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"datastore.get(keys).then(function(data) {\n  var entities = data[0];\n});"}],"params":[{"name":"keys","description":"<ul> <li>Datastore key object(s).</li> </ul> ","types":["Key","Key[]"],"optional":false,"nullable":false},{"name":"options","description":"<ul> <li>Optional configuration.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.consistency","description":"<ul> <li>Specify either <code>strong</code> or <code>eventual</code>. If not specified, default values are chosen by Datastore for the  operation. Learn more about strong and eventual consistency  <a href=\"https://cloud.google.com/datastore/docs/articles/balancing-strong-and-eventual-consistency-with-google-cloud-datastore\">here</a>.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.maxApiCalls","description":"<ul> <li>Maximum API calls to make.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.entity","description":"<ul> <li>The entity object(s) which match the provided keys.</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false}],"exceptions":[{"type":"Error","description":"<p>If at least one Key object is not provided.</p>"}],"returns":[]},{"id":"insert","name":"insert","type":"instance","description":"<p>Maps to <a data-custom-type=\"datastore\" data-method=\"save\">datastore#save</a>, forcing the method to be <code>insert</code>.</p>","source":"packages/datastore/src/request.js#L464","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"runQuery","name":"runQuery","type":"instance","description":"<p>Datastore allows you to query entities by kind, filter them by property filters, and sort them by a property name. Projection and pagination are also supported.</p><p>The query is run, and the results are returned as the second argument to your callback. A third argument may also exist, which is a query object that uses the end cursor from the previous query as the starting cursor for the next query. You can pass that object back to this method to see if more results exist.</p>","source":"packages/datastore/src/request.js#L561","resources":[],"examples":[{"caption":"<p>Where you see <code>transaction</code>, assume this is the context that's relevant to \nyour use, whether that be a Datastore or a Transaction object.</p>","code":"var query = datastore.createQuery('Lion');\n\ndatastore.runQuery(query, function(err, entities, info) {\n  // entities = An array of records.\n\n  // Access the Key object for an entity.\n  var firstEntityKey = entities[0][datastore.KEY];\n});"},{"caption":"<p>Or, if you're using a transaction object.</p>","code":"var transaction = datastore.transaction();\n\ntransaction.run(function(err) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  transaction.runQuery(query, function(err, entities) {\n    if (err) {\n      // Error handling omitted.\n    }\n\n    transaction.commit(function(err) {\n      if (!err) {\n        // Transaction committed successfully.\n      }\n    });\n  });\n});"},{"caption":"<p>A keys-only query returns just the keys of the result entities instead of \nthe entities themselves, at lower latency and cost.</p>","code":"var keysOnlyQuery = datastore.createQuery('Lion').select('__key__');\n\ndatastore.runQuery(keysOnlyQuery, function(err, entities) {\n  var keys = entities.map(function(entity) {\n    return entity[datastore.KEY];\n  });\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"datastore.runQuery(query).then(function(data) {\n  var entities = data[0];\n});"}],"params":[{"name":"query","description":"<ul> <li>Query object.</li> </ul> ","types":["<a data-custom-type=\"datastore/query\" data-method=\"\">datastore/query</a>"],"optional":false,"nullable":false},{"name":"options","description":"<ul> <li>Optional configuration.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.consistency","description":"<ul> <li>Specify either <code>strong</code> or <code>eventual</code>. If not specified, default values are chosen by Datastore for the  operation. Learn more about strong and eventual consistency  <a href=\"https://cloud.google.com/datastore/docs/articles/balancing-strong-and-eventual-consistency-with-google-cloud-datastore\">here</a>.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.maxApiCalls","description":"<ul> <li>Maximum API calls to make.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function. If omitted, a readable stream instance is returned.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.entities","description":"<ul> <li>A list of entities.</li> </ul> ","types":["object[]"],"optional":false,"nullable":false},{"name":"callback.info","description":"<ul> <li>An object useful for pagination.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"callback.info.endCursor","description":"<ul> <li>Use this in a follow-up query to begin from where these results ended.</li> </ul> ","types":["string"],"optional":false,"nullable":true},{"name":"callback.info.moreResults","description":"<ul> <li>Datastore responds with one of: <ul> <li><a data-custom-type=\"datastore\" data-method=\"MORE_RESULTS_AFTER_LIMIT\">datastore#MORE_RESULTS_AFTER_LIMIT</a>: There <em>may</em> be more results after the specified limit.</li> <li><a data-custom-type=\"datastore\" data-method=\"MORE_RESULTS_AFTER_CURSOR\">datastore#MORE_RESULTS_AFTER_CURSOR</a>: There <em>may</em> be more results after the specified end cursor.</li> <li><a data-custom-type=\"datastore\" data-method=\"NO_MORE_RESULTS\">datastore#NO_MORE_RESULTS</a>: There are no more results.</li> </ul> </li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"runQueryStream","name":"runQueryStream","type":"instance","description":"<p>Get a list of entities as a readable object stream.</p><p>See <a data-custom-type=\"datastore\" data-method=\"runQuery\">datastore#runQuery</a> for a list of all available options.</p>","source":"packages/datastore/src/request.js#L610","resources":[],"examples":[{"code":"datastore.runQueryStream(query)\n  .on('error', console.error)\n  .on('data', function(entity) {\n    // Access the Key object for this entity.\n    var key = entity[datastore.KEY];\n  })\n  .on('info', function(info) {})\n  .on('end', function() {\n    // All entities retrieved.\n  });"},{"caption":"<p>If you anticipate many results, you can end a stream early to prevent \nunnecessary processing and API requests.</p>","code":"datastore.runQueryStream(query)\n  .on('data', function(entity) {\n    this.end();\n  });"}],"params":[{"name":"query","description":"<ul> <li>Query object.</li> </ul> ","types":["<a data-custom-type=\"datastore/query\" data-method=\"\">datastore/query</a>"],"optional":false,"nullable":false},{"name":"options","description":"<ul> <li>Optional configuration.</li> </ul> ","types":["object"],"optional":true,"nullable":false}],"exceptions":[],"returns":[]},{"id":"update","name":"update","type":"instance","description":"<p>Maps to <a data-custom-type=\"datastore\" data-method=\"save\">datastore#save</a>, forcing the method to be <code>update</code>.</p>","source":"packages/datastore/src/request.js#L994","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"upsert","name":"upsert","type":"instance","description":"<p>Maps to <a data-custom-type=\"datastore\" data-method=\"save\">datastore#save</a>, forcing the method to be <code>upsert</code>.</p>","source":"packages/datastore/src/request.js#L1005","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]}],"path":"transaction.json"}