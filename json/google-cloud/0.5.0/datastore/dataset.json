{"id":"datastore/dataset","type":"class","name":"Dataset","description":null,"source":"/lib/datastore/dataset.js#L92","parent":"datastore","children":[],"methods":[{"id":"Dataset","name":"Dataset","type":"instance","description":"<p>Interact with a dataset from the <a href=\"<a href=\"https://developers.google.com/datastore/\">Google Cloud Datastore</a>\">https://developers.google.com/datastore/}</a>.</p>","source":"/lib/datastore/dataset.js#L92","resources":[],"examples":[{"code":"var dataset = new datastore.Dataset({\n  projectId: 'my-project',\n  keyFilename: '/path/to/keyfile.json'\n});"}],"params":[{"name":"options","description":"","types":["object="]},{"name":"options.projectId","description":"- Dataset ID. This is your project ID from the Google Developers Console.","types":["string"]},{"name":"options.keyFilename","description":"- Full path to the JSON key downloaded from the Google Developers Console. Alternatively, you may provide a <code>credentials</code> object.","types":["string="]},{"name":"options.credentials","description":"- Credentials object, used in place of a <code>keyFilename</code>.","types":["object="]},{"name":"options.namespace","description":"- Namespace to isolate transactions to. ","types":["string"]}],"exceptions":[],"returns":[]},{"id":"key","name":"key","type":"instance","description":"<p>Helper to create a Key object, scoped to the dataset&#39;s namespace by default.</p><p>You may also specify a configuration object to define a namespace and path.</p>","source":"/lib/datastore/dataset.js#L122","resources":[],"examples":[{"code":"var key;\n\n// Create a key from the dataset's namespace.\nkey = dataset.key('Company', 123);\n\n// Create a key from a provided namespace and path.\nkey = dataset.key({\n  namespace: 'My-NS',\n  path: ['Company', 123]\n});"}],"params":[],"exceptions":[],"returns":[]},{"id":"createQuery","name":"createQuery","type":"instance","description":"<p>Create a query from the current dataset to query the specified kinds, scoped to the namespace provided at the initialization of the dataset.</p><p><em>Dataset query reference: {@link <a href=\"http://goo.gl/Cag0r6}\">http://goo.gl/Cag0r6}</a></em></p>","source":"/lib/datastore/dataset.js#L146","resources":[],"examples":[],"params":[{"name":"namespace","description":"- Optional namespace.","types":["string="]},{"name":"kinds","description":"- Kinds to query.","types":["string","array"]}],"exceptions":[],"returns":[]},{"id":"get","name":"get","type":"instance","description":"<p>Retrieve the entities identified with the specified key(s) in the current transaction. Get operations require a valid key to retrieve the key-identified entity from Datastore.</p>","source":"/lib/datastore/dataset.js#L170","resources":[],"examples":[{"code":"dataset.get([\n  dataset.key('Company', 123),\n  dataset.key('Product', 'Computer')\n], function(err, entities) {});"}],"params":[{"name":"key","description":"- Datastore key object(s).","types":["Key","Key[]"]},{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]},{"id":"save","name":"save","type":"instance","description":"<p>Insert or update the specified object(s) in the current transaction. If a key is incomplete, its associated object is inserted and its generated identifier is returned to the callback.</p>","source":"/lib/datastore/dataset.js#L214","resources":[],"examples":[{"code":"// Save a single entity.\ndataset.save({\n  key: dataset.key('Company', null),\n  data: {\n    rating: '10'\n  }\n}, function(err, key) {\n  // Because we gave an incomplete key as an argument, `key` will be\n  // populated with the complete, generated key.\n});\n\n// Save multiple entities at once.\ndataset.save([\n  {\n    key: dataset.key('Company', 123),\n    data: {\n      HQ: 'Dallas, TX'\n    }\n  },\n  {\n    key: dataset.key('Product', 'Computer'),\n    data: {\n      vendor: 'Dell'\n    }\n  }\n], function(err, keys) {});"}],"params":[{"name":"entities","description":"- Datastore key object(s).","types":["object","object[]"]},{"name":"entities.key","description":"- Datastore key object.","types":["Key"]},{"name":"entities.data","description":"- Data to save with the provided key.","types":["object"]},{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]},{"id":"delete","name":"delete","type":"instance","description":"<p>Delete all entities identified with the specified key(s) in the current transaction.</p>","source":"/lib/datastore/dataset.js#L237","resources":[],"examples":[{"code":"// Delete a single entity.\ndataset.delete(dataset.key('Company', 123), function(err) {});\n\n// Delete multiple entities at once.\ndataset.delete([\n  dataset.key('Company', 123),\n  dataset.key('Product', 'Computer')\n], function(err) {});"}],"params":[{"name":"key","description":"- Datastore key object(s).","types":["Key","Key[]"]},{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]},{"id":"runQuery","name":"runQuery","type":"instance","description":"<p>Datastore allows you to query entities by kind, filter them by property filters, and sort them by a property name. Projection and pagination are also supported. If more results are available, a query to retrieve the next page is provided to the callback function.</p>","source":"/lib/datastore/dataset.js#L261","resources":[],"examples":[{"code":"// Retrieve 5 companies.\ndataset.runQuery(queryObject, function(err, entities, nextQuery) {\n  // `nextQuery` is not null if there are more results.\n  if (nextQuery) {\n    dataset.runQuery(nextQuery, function(err, entities, nextQuery) {});\n  }\n});"}],"params":[{"name":"query","description":"- Query object.","types":["<a data-custom-type=\"datastore\">datastore</a>","query"]},{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]},{"id":"runInTransaction","name":"runInTransaction","type":"instance","description":"<p>Run a function in the context of a new transaction. Transactions allow you to perform multiple operations, committing your changes atomically.</p>","source":"/lib/datastore/dataset.js#L288","resources":[],"examples":[{"code":"dataset.runInTransaction(function(transaction, done) {\n  // From the `transaction` object, execute dataset methods as usual.\n  // Call `done` when you're ready to commit all of the changes.\n  transaction.get(dataset.key('Company', 123), function(err, entity) {\n    if (err) {\n      transaction.rollback(done);\n      return;\n    }\n\n    done();\n  });\n}, function(err) {});"}],"params":[{"name":"fn","description":"- The function to run in the context of a transaction.","types":["function"]},{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]},{"id":"allocateIds","name":"allocateIds","type":"instance","description":"<p>Generate IDs without creating entities.</p>","source":"/lib/datastore/dataset.js#L319","resources":[],"examples":[{"code":"// The following call will create 100 new IDs from the Company kind, which\n// exists under the default namespace.\nvar incompleteKey = dataset.key('Company', null);\ndataset.allocateIds(incompleteKey, 100, function(err, keys) {});\n\n// You may prefer to create IDs from a non-default namespace by providing an\n// incomplete key with a namespace. Similar to the previous example, the call\n// below will create 100 new IDs, but from the Company kind that exists under\n// the \"ns-test\" namespace.\nvar incompleteKey = dataset.key('ns-test', 'Company', null);\ndataset.allocateIds(incompleteKey, 100, function(err, keys) {});"}],"params":[{"name":"incompleteKey","description":"- The key object to complete.","types":["Key"]},{"name":"n","description":"- How many IDs to generate.","types":["number"]},{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]}]}