{"id":"bigquery/job","type":"class","name":"Job","description":null,"source":"/lib/bigquery/job.js#L53","parent":"bigquery","children":[],"methods":[{"id":"Job","name":"Job","type":"constructor","description":"<p>Job objects are returned from various places in the BigQuery API:</p><ul> <li><a data-custom-type=\"bigquery\" data-method=\"getJobs\">bigquery#getJobs</a></li> <li><a data-custom-type=\"bigquery\" data-method=\"job\">bigquery#job</a></li> <li><a data-custom-type=\"bigquery\" data-method=\"query\">bigquery#query</a></li> <li><a data-custom-type=\"bigquery\" data-method=\"startJob\">bigquery#startJob</a></li> <li><a data-custom-type=\"bigquery/table\" data-method=\"copy\">bigquery/table#copy</a></li> <li><a data-custom-type=\"bigquery/table\" data-method=\"createWriteStream\">bigquery/table#createWriteStream</a></li> <li><a data-custom-type=\"bigquery/table\" data-method=\"export\">bigquery/table#export</a></li> <li><a data-custom-type=\"bigquery/table\" data-method=\"import\">bigquery/table#import</a></li> </ul> <p>They can be used to check the status of a running job or fetching the results of a previously-executed one.</p>","source":"/lib/bigquery/job.js#L53","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"getMetadata","name":"getMetadata","type":"instance","description":"<p>Get the metadata of the job. This will mostly be useful for checking the status of a previously-run job.</p>","source":"/lib/bigquery/job.js#L72","resources":[],"examples":[{"code":"var job = bigquery.job('id');\njob.getMetadata(function(err, metadata, apiResponse) {});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.metadata","description":"<ul> <li>The metadata of the job.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"getQueryResults","name":"getQueryResults","type":"instance","description":"<p>Get the results of a job.</p>","source":"/lib/bigquery/job.js#L157","resources":[],"examples":[{"caption":"<p>Get all of the results of a query.</p>","code":"job.getQueryResults(function(err, rows) {\n  if (!err) {\n    // rows is an array of results.\n  }\n});"},{"caption":"<p>Customize the results you want to fetch.</p>","code":"job.getQueryResults({\n  maxResults: 100\n}, function(err, rows) {});"},{"caption":"<p>To control how many API requests are made and page through the results \nmanually, set <code>autoPaginate</code> to <code>false</code>.</p>","code":"var callback = function(err, rows, nextQuery, apiResponse) {\n  if (nextQuery) {\n    // More results exist.\n    job.getQueryResults(nextQuery, callback);\n  }\n};\n\njob.getQueryResults({\n  autoPaginate: false\n}, callback);"},{"caption":"<p>Consume the results from the query as a readable object stream.</p>","code":"var through2 = require('through2');\nvar fs = require('fs');\n\njob.getQueryResults()\n  .pipe(through2.obj(function (row, enc, next) {\n    this.push(JSON.stringify(row) + '\\n');\n  }))\n  .pipe(fs.createWriteStream('./test/testdata/testfile.json'));"}],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.autoPaginate","description":"<ul> <li>Have pagination handled automatically. Default: true.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"options.maxResults","description":"<ul> <li>Maximum number of results to read.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"options.pageToken","description":"<ul> <li>Page token, returned by a previous call, to request the next page of results. Note: This is automatically added to  the <code>nextQuery</code> argument of your callback.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.startIndex","description":"<ul> <li>Zero-based index of the starting row.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"options.timeoutMs","description":"<ul> <li>How long to wait for the query to complete, in milliseconds, before returning. Default is to return  immediately. If the timeout passes before the job completes, the request  will fail with a <code>TIMEOUT</code> error.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function. If you intend to continuously run this query until all results are in as part of a stream,  do not pass a callback.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.rows","description":"<ul> <li>The results of a job.</li> </ul> ","types":["array"],"optional":false,"nullable":false},{"name":"callback.nextQuery","description":"<ul> <li>If present, query with this object to check for more results.</li> </ul> ","types":["object"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]}]}