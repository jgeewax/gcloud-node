{"id":"bigquery/table","type":"class","name":"Table","description":"","source":"lib/bigquery/table.js","parent":"bigquery","children":[],"methods":[{"id":"Table","name":"Table","type":"constructor","description":"<p>Table objects are returned by methods such as <a data-custom-type=\"bigquery/dataset\" data-method=\"table\">bigquery/dataset#table</a>, <a data-custom-type=\"bigquery/dataset\" data-method=\"createTable\">bigquery/dataset#createTable</a>, and <a data-custom-type=\"bigquery/dataset\" data-method=\"getTables\">bigquery/dataset#getTables</a>.</p>","source":"lib/bigquery/table.js#L101","resources":[],"examples":[{"code":"var gcloud = require('gcloud')({\n  keyFilename: '/path/to/keyfile.json',\n  projectId: 'grape-spaceship-123'\n});\n\nvar bigquery = gcloud.bigquery();\n\nvar dataset = bigquery.dataset('my-dataset');\n\nvar table = dataset.table('my-table');"}],"params":[],"exceptions":[],"returns":[]},{"id":"create","name":"create","type":"instance","description":"<p>Create a table.</p>","source":"lib/bigquery/table.js#L115","resources":[],"examples":[{"code":"table.create(function(err, table, apiResponse) {\n  if (!err) {\n    // The table was created successfully.\n  }\n});"}],"params":[{"name":"options","description":"<ul> <li>See <a data-custom-type=\"bigquery/dataset\" data-method=\"createTable\">bigquery/dataset#createTable</a>.</li> </ul> ","types":["object"],"optional":true,"nullable":false}],"exceptions":[],"returns":[]},{"id":"delete","name":"delete","type":"instance","description":"<p>Delete a table and all its data.</p>","source":"lib/bigquery/table.js#L130","resources":[{"title":"Tables: delete API Documentation","link":"https://cloud.google.com/bigquery/docs/reference/v2/tables/delete"}],"examples":[{"code":"table.delete(function(err, apiResponse) {});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"exists","name":"exists","type":"instance","description":"<p>Check if the table exists.</p>","source":"lib/bigquery/table.js#L143","resources":[],"examples":[{"code":"table.exists(function(err, exists) {});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.exists","description":"<ul> <li>Whether the table exists or not.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"get","name":"get","type":"instance","description":"<p>Get a table if it exists.</p><p>You may optionally use this to &quot;get or create&quot; an object by providing an object with <code>autoCreate</code> set to <code>true</code>. Any extra configuration that is normally required for the <code>create</code> method must be contained within this object as well.</p>","source":"lib/bigquery/table.js#L162","resources":[],"examples":[{"code":"table.get(function(err, table, apiResponse) {\n  // `table.metadata` has been populated.\n});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["options"],"optional":true,"nullable":false},{"name":"options.autoCreate","description":"<ul> <li>Automatically create the object if it does not exist. Default: <code>false</code></li> </ul> ","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"getMetadata","name":"getMetadata","type":"instance","description":"<p>Return the metadata associated with the Table.</p>","source":"lib/bigquery/table.js#L178","resources":[{"title":"Tables: get API Documentation","link":"https://cloud.google.com/bigquery/docs/reference/v2/tables/get"}],"examples":[{"code":"table.getMetadata(function(err, metadata, apiResponse) {});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.metadata","description":"<ul> <li>The metadata of the Table.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"copy","name":"copy","type":"instance","description":"<p>Copy data from one table to another, optionally creating that table.</p>","source":"lib/bigquery/table.js#L307","resources":[{"title":"Jobs: insert API Documentation","link":"https://cloud.google.com/bigquery/docs/reference/v2/jobs/insert"}],"examples":[{"code":"var yourTable = dataset.table('your-table');\ntable.copy(yourTable, function(err, job, apiResponse) {\n  // `job` is a Job object that can be used to check the status of the\n  // request.\n});"},{"caption":"<p>See the [<code>configuration.copy</code>](http://goo.gl/dKWIyS) object for all \navailable options.</p>","code":"var metadata = {\n  createDisposition: 'CREATE_NEVER',\n  writeDisposition: 'WRITE_TRUNCATE'\n};\n\ntable.copy(yourTable, metadata, function(err, job, apiResponse) {});"}],"params":[{"name":"destination","description":"<ul> <li>The destination table.</li> </ul> ","types":["<a data-custom-type=\"bigquery/table\" data-method=\"\">bigquery/table</a>"],"optional":false,"nullable":false},{"name":"metadata","description":"<ul> <li>Metadata to set with the copy operation. The metadata object should be in the format of the  <a href=\"http://goo.gl/dKWIyS\"><code>configuration.copy</code></a> property of a Jobs resource.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.job","description":"<ul> <li>The job used to copy your table.</li> </ul> ","types":["<a data-custom-type=\"bigquery/job\" data-method=\"\">bigquery/job</a>"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[{"type":"Error","description":"<p>If a destination other than a Table object is provided.</p>"}],"returns":[]},{"id":"createReadStream","name":"createReadStream","type":"instance","description":"<p>Create a readable stream of the rows of data in your table. This method is simply a wrapper around <a data-custom-type=\"bigquery/table\" data-method=\"getRows\">bigquery/table#getRows</a>.</p>","source":"lib/bigquery/table.js#L371","resources":[{"title":"Tabledata: list API Documentation","link":"https://cloud.google.com/bigquery/docs/reference/v2/tabledata/list"}],"examples":[{"code":"var through2 = require('through2');\nvar fs = require('fs');\n\ntable.createReadStream()\n  .pipe(through2.obj(function(row, enc, next) {\n    this.push(JSON.stringify(row) + '\\n');\n  }))\n  .pipe(fs.createWriteStream('./test/testdata/testfile.json'));"}],"params":[],"exceptions":[],"returns":[{"types":["ReadableStream"],"description":""}]},{"id":"createWriteStream","name":"createWriteStream","type":"instance","description":"<p>Load data into your table from a readable stream of JSON, CSV, or AVRO data.</p>","source":"lib/bigquery/table.js#L418","resources":[{"title":"Jobs: insert API Documentation","link":"https://cloud.google.com/bigquery/docs/reference/v2/jobs/insert"}],"examples":[{"caption":"<p>Load data from a CSV file.</p>","code":"var request = require('request');\n\nvar csvUrl = 'http://goo.gl/kSE7z6';\n\nvar metadata = {\n  allowJaggedRows: true,\n  skipLeadingRows: 1\n};\n\nrequest.get(csvUrl)\n  .pipe(table.createWriteStream(metadata))\n  .on('complete', function(job) {\n    // `job` is a Job object that can be used to check the status of the\n    // request.\n  });"},{"caption":"<p>Load data from a JSON file.</p>","code":"var fs = require('fs');\n\nfs.createReadStream('./test/testdata/testfile.json')\n  .pipe(table.createWriteStream('json'))\n  .on('complete', function(job) {});"}],"params":[{"name":"metadata","description":"<ul> <li>Metadata to set with the load operation. The metadata object should be in the format of the  <a href=\"http://goo.gl/BVcXk4\"><code>configuration.load</code></a> property of a Jobs resource.  If a string is given, it will be used as the filetype.</li> </ul> ","types":["string","object"],"optional":true,"nullable":false}],"exceptions":[{"type":"Error","description":"<p>If source format isn&#39;t recognized.</p>"}],"returns":[{"types":["WritableStream"],"description":""}]},{"id":"export","name":"export","type":"instance","description":"<p>Export table to Google Cloud Storage.</p>","source":"lib/bigquery/table.js#L533","resources":[{"title":"Jobs: insert API Documentation","link":"https://cloud.google.com/bigquery/docs/reference/v2/jobs/insert"}],"examples":[{"code":"var gcs = gcloud.storage({\n  projectId: 'grape-spaceship-123'\n});\nvar exportedFile = gcs.bucket('institutions').file('2014.csv');"},{"caption":"<p>To use the default options, just pass a <a data-custom-type=\"storage/file\" data-method=\"\">storage/file</a> object. \nNote: The exported format type will be inferred by the file's extension. \nIf you wish to override this, or provide an array of destination files, \nyou must provide an <code>options</code> object.</p>","code":"table.export(exportedFile, function(err, job, apiResponse) {\n  // `job` is a Job object that can be used to check the status of the\n  // request.\n});"},{"caption":"<p>If you need more customization, pass an <code>options</code> object.</p>","code":"var options = {\n  format: 'json',\n  gzip: true\n};\n\ntable.export(exportedFile, options, function(err, job, apiResponse) {});"},{"caption":"<p>You can also specify multiple destination files.</p>","code":"table.export([\n  gcs.bucket('institutions').file('2014.json'),\n  gcs.bucket('institutions-copy').file('2014.json')\n], options, function(err, job, apiResponse) {});"}],"params":[{"name":"destination","description":"<ul> <li>Where the file should be exported to.</li> </ul> ","types":["<a data-custom-type=\"storage/file\" data-method=\"\">storage/file</a>"],"optional":false,"nullable":false},{"name":"options","description":"<ul> <li>The configuration object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.format","description":"<ul> <li>The format to export the data in. Allowed options are &quot;CSV&quot;, &quot;JSON&quot;, or &quot;AVRO&quot;. Default: &quot;CSV&quot;.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.gzip","description":"<ul> <li>Specify if you would like the file compressed with GZIP. Default: false.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.job","description":"<ul> <li>The job used to export the table.</li> </ul> ","types":["<a data-custom-type=\"bigquery/job\" data-method=\"\">bigquery/job</a>"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[{"type":"Error","description":"<p>If destination isn&#39;t a File object.</p>"},{"type":"Error","description":"<p>If destination format isn&#39;t recongized.</p>"}],"returns":[]},{"id":"getRows","name":"getRows","type":"instance","description":"<p>Retrieves table data from a specified set of rows. The rows are returned to your callback as an array of objects matching your table&#39;s schema.</p>","source":"lib/bigquery/table.js#L662","resources":[{"title":"Tabledata: list API Documentation","link":"https://cloud.google.com/bigquery/docs/reference/v2/tabledata/list"}],"examples":[{"code":"table.getRows(function(err, rows) {\n  if (!err) {\n    // Handle results here.\n  }\n});"},{"caption":"<p>To control how many API requests are made and page through the results \nmanually, set <code>autoPaginate</code> to <code>false</code>.</p>","code":"var callback = function(err, rows, nextQuery, apiResponse) {\n  if (nextQuery) {\n    // More results exist.\n    table.getRows(nextQuery, callback);\n  }\n};\n\ntable.getRows({\n  autoPaginate: false\n}, callback);"},{"caption":"<p>Get the rows as a readable object stream.</p>","code":"table.getRows(options)\n  .on('error', console.error)\n  .on('data', function(row) {})\n  .on('end', function() {\n    // All rows have been retrieved.\n  });"},{"caption":"<p>If you anticipate many results, you can end a stream early to prevent \nunnecessary processing and API requests.</p>","code":"table.getRows()\n  .on('data', function(row) {\n    this.end();\n  });"}],"params":[{"name":"options","description":"<ul> <li>The configuration object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.autoPaginate","description":"<ul> <li>Have pagination handled automatically. Default: true.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"options.maxApiCalls","description":"<ul> <li>Maximum number of API calls to make.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"options.maxResults","description":"<ul> <li>Maximum number of results to return.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.rows","description":"<ul> <li>The table data from specified set of rows.</li> </ul> ","types":["array"],"optional":false,"nullable":false},{"name":"callback.nextQuery","description":"<ul> <li>If present, query with this object to check for more results.</li> </ul> ","types":["object"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"import","name":"import","type":"instance","description":"<p>Load data from a local file or Storage file (<a data-custom-type=\"storage/file\" data-method=\"\">storage/file</a>).</p><p>By loading data this way, you create a load job that will run your data load asynchronously. If you would like instantaneous access to your data, insert it using <a data-custom-type=\"bigquery/table\" data-method=\"insert\">bigquery/table#insert</a>.</p><p>Note: The file type will be inferred by the given file&#39;s extension. If you wish to override this, you must provide <code>metadata.format</code>.</p>","source":"lib/bigquery/table.js#L777","resources":[{"title":"Jobs: insert API Documentation","link":"https://cloud.google.com/bigquery/docs/reference/v2/jobs/insert"}],"examples":[{"caption":"<p>Load data from a local file.</p>","code":"table.import('./institutions.csv', function(err, job, apiResponse) {\n  // `job` is a Job object that can be used to check the status of the\n  // request.\n});"},{"caption":"<p>You may also pass in metadata in the format of a Jobs resource. See \n(http://goo.gl/BVcXk4) for a full list of supported values.</p>","code":"var metadata = {\n  encoding: 'ISO-8859-1',\n  sourceFormat: 'NEWLINE_DELIMITED_JSON'\n};\n\ntable.import('./my-data.csv', metadata, function(err, job, apiResponse) {});"},{"caption":"<p>Load data from a file in your Cloud Storage bucket.</p>","code":"var data = gcs.bucket('institutions').file('data.csv');\ntable.import(data, function(err, job, apiResponse) {});"},{"caption":"<p>Load data from multiple files in your Cloud Storage bucket(s).</p>","code":"table.import([\n  gcs.bucket('institutions').file('2011.csv'),\n  gcs.bucket('institutions').file('2012.csv')\n], function(err, job, apiResponse) {});"}],"params":[{"name":"source","description":"<ul> <li>The source file to import.</li> </ul> ","types":["string","<a data-custom-type=\"storage/file\" data-method=\"\">storage/file</a>"],"optional":false,"nullable":false},{"name":"metadata","description":"<ul> <li>Metadata to set with the load operation. The metadata object should be in the format of the  <a href=\"http://goo.gl/BVcXk4\"><code>configuration.load</code></a> property of a Jobs resource.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"metadata.format","description":"<ul> <li>The format the data being imported is in. Allowed options are &quot;CSV&quot;, &quot;JSON&quot;, or &quot;AVRO&quot;.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.job","description":"<ul> <li>The job used to import your data.</li> </ul> ","types":["<a data-custom-type=\"bigquery/job\" data-method=\"\">bigquery/job</a>"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[{"type":"Error","description":"<p>If the source isn&#39;t a string file name or a File instance.</p>"}],"returns":[]},{"id":"insert","name":"insert","type":"instance","description":"<p>Stream data into BigQuery one record at a time without running a load job.</p><p>There are more strict quota limits using this method so it is highly recommended that you load data into BigQuery using <a data-custom-type=\"bigquery/table\" data-method=\"import\">bigquery/table#import</a> instead.</p>","source":"lib/bigquery/table.js#L951","resources":[{"title":"Tabledata: insertAll API Documentation","link":"https://cloud.google.com/bigquery/docs/reference/v2/tabledata/insertAll"}],"examples":[{"caption":"<p>Insert a single row.</p>","code":"table.insert({\n  INSTNM: 'Motion Picture Institute of Michigan',\n  CITY: 'Troy',\n  STABBR: 'MI'\n}, insertHandler);"},{"caption":"<p>Insert multiple rows at a time.</p>","code":"var rows = [\n  {\n    INSTNM: 'Motion Picture Institute of Michigan',\n    CITY: 'Troy',\n    STABBR: 'MI'\n  },\n  // ...\n];\n\ntable.insert(rows, insertHandler);"},{"caption":"<p>Insert a row as according to the <a href=\"https://cloud.google.com/bigquery/docs/reference/v2/tabledata/insertAll\"> \nspecification</a>.</p>","code":"var row = {\n  insertId: '1',\n  json: {\n    INSTNM: 'Motion Picture Institute of Michigan',\n    CITY: 'Troy',\n    STABBR: 'MI'\n  }\n};\n\nvar options = {\n  raw: true\n};\n\ntable.insert(row, options, insertHandler);"},{"caption":"<p>Handling the response.</p>","code":"function insertHandler(err, insertErrors, apiResponse) {\n  // err (object):\n  //   An API error occurred.\n\n  // insertErrors (object[]):\n  //   If populated, some rows failed to insert, while others may have\n  //   succeeded.\n  //\n  // insertErrors[].row (original individual row object passed to `insert`)\n  // insertErrors[].errors[].reason\n  // insertErrors[].errors[].message\n\n  // See https://developers.google.com/bigquery/troubleshooting-errors for\n  // recommendations on handling errors.\n}"}],"params":[{"name":"rows","description":"<ul> <li>The rows to insert into the table.</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false},{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.ignoreUnknownValues","description":"<ul> <li>Accept rows that contain values that do not match the schema. The unknown values are ignored.  Default: <code>false</code>.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"options.raw","description":"<ul> <li>If <code>true</code>, the <code>rows</code> argument is expected to be formatted as according to the  <a href=\"https://cloud.google.com/bigquery/docs/reference/v2/tabledata/insertAll\">specification</a>.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"options.skipInvalidRows","description":"<ul> <li>Insert all valid rows of a request, even if invalid rows exist. Default: <code>false</code>.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"options.templateSuffix","description":"<ul> <li>Treat the destination table as a base template, and insert the rows into an instance table named  &quot;{destination}{templateSuffix}&quot;. BigQuery will manage creation of  the instance table, using the schema of the base template table. See  <a href=\"https://cloud.google.com/bigquery/streaming-data-into-bigquery#template-tables\">Automatic table creation using template tables</a>  for considerations when working with templates tables.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.insertErrors","description":"<ul> <li>A list of errors for insert failures.</li> </ul> ","types":["array"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"query","name":"query","type":"instance","description":"<p>Run a query scoped to your dataset.</p><p>See <a data-custom-type=\"bigquery\" data-method=\"query\">bigquery#query</a> for full documentation of this method.</p>","source":"lib/bigquery/table.js#L1002","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"setMetadata","name":"setMetadata","type":"instance","description":"<p>Set the metadata on the table.</p>","source":"lib/bigquery/table.js#L1034","resources":[{"title":"Tables: update API Documentation","link":"https://cloud.google.com/bigquery/docs/reference/v2/tables/update"}],"examples":[{"code":"var metadata = {\n  name: 'My recipes',\n  description: 'A table for storing my recipes.',\n  schema: 'name:string, servings:integer, cookingTime:float, quick:boolean'\n};\n\ntable.setMetadata(metadata, function(err, metadata, apiResponse) {});"}],"params":[{"name":"metadata","description":"<ul> <li>The metadata key/value object to set.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"metadata.description","description":"<ul> <li>A user-friendly description of the table.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"metadata.name","description":"<ul> <li>A descriptive name for the table.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"metadata.schema","description":"<ul> <li>A comma-separated list of name:type pairs. Valid types are &quot;string&quot;, &quot;integer&quot;, &quot;float&quot;, &quot;boolean&quot;, and  &quot;timestamp&quot;. If the type is omitted, it is assumed to be &quot;string&quot;.  Example: &quot;name:string, age:integer&quot;. Schemas can also be specified as a  JSON array of fields, which allows for nested and repeated fields. See  a <a href=\"http://goo.gl/sl8Dmg\">Table resource</a> for more detailed information.</li> </ul> ","types":["string","object"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]}]}