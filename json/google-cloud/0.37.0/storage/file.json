{"id":"storage/file","type":"class","name":"File","description":"","source":"lib/storage/file.js","parent":"storage","children":[],"methods":[{"id":"File","name":"File","type":"constructor","description":"<p>A File object is created from your Bucket object using <a data-custom-type=\"storage/bucket\" data-method=\"file\">storage/bucket#file</a>.</p>","source":"lib/storage/file.js#L116","resources":[],"examples":[{"code":"var gcloud = require('gcloud');\n\nvar gcs = gcloud.storage({\n  keyFilename: '/path/to/keyfile.json',\n  projectId: 'grape-spaceship-123'\n});\n\nvar myBucket = gcs.bucket('my-bucket');\n\nvar file = myBucket.file('my-file');"}],"params":[],"exceptions":[],"returns":[]},{"id":"delete","name":"delete","type":"instance","description":"<p>Delete the file.</p>","source":"lib/storage/file.js#L149","resources":[{"title":"Objects: delete API Documentation","link":"https://cloud.google.com/storage/docs/json_api/v1/objects/delete"}],"examples":[{"code":"file.delete(function(err, apiResponse) {});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"exists","name":"exists","type":"instance","description":"<p>Check if the file exists.</p>","source":"lib/storage/file.js#L166","resources":[],"examples":[{"code":"file.exists(function(err, exists) {});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.exists","description":"<ul> <li>Whether the file exists or not.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"get","name":"get","type":"instance","description":"<p>Get a file object and its metadata if it exists.</p>","source":"lib/storage/file.js#L176","resources":[],"examples":[{"code":"file.get(function(err, file, apiResponse) {\n  // file.metadata` has been populated.\n});"}],"params":[],"exceptions":[],"returns":[]},{"id":"getMetadata","name":"getMetadata","type":"instance","description":"<p>Get the file&#39;s metadata.</p>","source":"lib/storage/file.js#L192","resources":[{"title":"Objects: get API Documentation","link":"https://cloud.google.com/storage/docs/json_api/v1/objects/get"}],"examples":[{"code":"file.getMetadata(function(err, metadata, apiResponse) {});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.metadata","description":"<ul> <li>The File&#39;s metadata.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"setMetadata","name":"setMetadata","type":"instance","description":"<p>Merge the given metadata with the current remote file&#39;s metadata. This will set metadata if it was previously unset or update previously set metadata. To unset previously set metadata, set its value to null.</p><p>You can set custom key/value pairs in the metadata key of the given object, however the other properties outside of this object must adhere to the <a href=\"https://goo.gl/BOnnCK\">official API documentation</a>.</p><p>See the examples below for more information.</p>","source":"lib/storage/file.js#L237","resources":[{"title":"Objects: patch API Documentation","link":"https://cloud.google.com/storage/docs/json_api/v1/objects/patch"}],"examples":[{"code":"file.setMetadata({\n  contentType: 'application/x-font-ttf',\n  metadata: {\n    my: 'custom',\n    properties: 'go here'\n  }\n}, function(err, apiResponse) {});\n\n// Assuming current metadata = { hello: 'world', unsetMe: 'will do' }\nfile.setMetadata({\n  metadata: {\n    abc: '123', // will be set.\n    unsetMe: null, // will be unset (deleted).\n    hello: 'goodbye' // will be updated from 'hello' to 'goodbye'.\n  }\n}, function(err, apiResponse) {\n  // metadata should now be { abc: '123', hello: 'goodbye' }\n});"}],"params":[{"name":"metadata","description":"<ul> <li>The metadata you wish to update.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"acl","name":"acl","type":"instance","description":"<p>Google Cloud Storage uses access control lists (ACLs) to manage object and bucket access. ACLs are the mechanism you use to share objects with other users and allow other users to access your buckets and objects.</p><p>An ACL consists of one or more entries, where each entry grants permissions to an entity. Permissions define the actions that can be performed against an object or bucket (for example, <code>READ</code> or <code>WRITE</code>); the entity defines who the permission applies to (for example, a specific user or group of users).</p><p>The <code>acl</code> object on a File instance provides methods to get you a list of the ACLs defined on your bucket, as well as set, update, and delete them.</p>","source":"lib/storage/file.js#L282","resources":[{"title":"About Access Control lists","link":"http://goo.gl/6qBBPO"}],"examples":[{"caption":"<p>Make a file publicly readable.</p>","code":"file.acl.add({\n  entity: 'allUsers',\n  role: gcs.acl.READER_ROLE\n}, function(err, aclObject) {});"}],"params":[],"exceptions":[],"returns":[]},{"id":"copy","name":"copy","type":"instance","description":"<p>Copy this file to another file. By default, this will copy the file to the same bucket, but you can choose to copy it to another Bucket by providing a Bucket or File object or a URL starting with &quot;gs://&quot;.</p>","source":"lib/storage/file.js#L377","resources":[{"title":"Objects: copy API Documentation","link":"https://cloud.google.com/storage/docs/json_api/v1/objects/copy"}],"examples":[{"caption":"<p>You can pass in a variety of types for the destination. \nFor all of the below examples, assume we are working with the following \nBucket and File objects.</p>","code":"var bucket = gcs.bucket('my-bucket');\nvar file = bucket.file('my-image.png');"},{"caption":"<p>If you pass in a string for the destination, the file is copied to its \ncurrent bucket, under the new name provided.</p>","code":"file.copy('my-image-copy.png', function(err, copiedFile, apiResponse) {\n  // `my-bucket` now contains:\n  // - \"my-image.png\"\n  // - \"my-image-copy.png\"\n\n  // `copiedFile` is an instance of a File object that refers to your new\n  // file.\n});"},{"caption":"<p>If you pass in a string starting with \"gs:\n\" for the destination, the \nfile is copied to the other bucket and under the new name provided.</p>","code":"var newLocation = 'gs://another-bucket/my-image-copy.png';\nfile.copy(newLocation, function(err, copiedFile, apiResponse) {\n  // `my-bucket` still contains:\n  // - \"my-image.png\"\n  //\n  // `another-bucket` now contains:\n  // - \"my-image-copy.png\"\n\n  // `copiedFile` is an instance of a File object that refers to your new\n  // file.\n});"},{"caption":"<p>If you pass in a Bucket object, the file will be copied to that bucket \nusing the same name.</p>","code":"var anotherBucket = gcs.bucket('another-bucket');\nfile.copy(anotherBucket, function(err, copiedFile, apiResponse) {\n  // `my-bucket` still contains:\n  // - \"my-image.png\"\n  //\n  // `another-bucket` now contains:\n  // - \"my-image.png\"\n\n  // `copiedFile` is an instance of a File object that refers to your new\n  // file.\n});"},{"caption":"<p>If you pass in a File object, you have complete control over the new \nbucket and filename.</p>","code":"var anotherFile = anotherBucket.file('my-awesome-image.png');\nfile.copy(anotherFile, function(err, copiedFile, apiResponse) {\n  // `my-bucket` still contains:\n  // - \"my-image.png\"\n  //\n  // `another-bucket` now contains:\n  // - \"my-awesome-image.png\"\n\n  // Note:\n  // The `copiedFile` parameter is equal to `anotherFile`.\n});"}],"params":[{"name":"destination","description":"<ul> <li>Destination file.</li> </ul> ","types":["string","<a data-custom-type=\"storage/bucket\" data-method=\"\">storage/bucket</a>","<a data-custom-type=\"storage/file\" data-method=\"\">storage/file</a>"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.copiedFile","description":"<ul> <li>The copied File.</li> </ul> ","types":["<a data-custom-type=\"storage/file\" data-method=\"\">storage/file</a>"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[{"type":"Error","description":"<p>If the destination file is not provided.</p>"}],"returns":[]},{"id":"createReadStream","name":"createReadStream","type":"instance","description":"<p>Create a readable stream to read the contents of the remote file. It can be piped to a writable stream or listened to for &#39;data&#39; events to read a file&#39;s contents.</p><p>In the unlikely event there is a mismatch between what you downloaded and the version in your Bucket, your error handler will receive an error with code &quot;CONTENT_DOWNLOAD_MISMATCH&quot;. If you receive this error, the best recourse is to try downloading the file again.</p><p>For faster crc32c computation, you must manually install <a href=\"http://www.gitnpm.com/fast-crc32c\"><code>fast-crc32c</code></a>:</p><pre><code>$ npm install --save fast-crc32c </code></pre><p>NOTE: Readable streams will emit the <code>end</code> event when the file is fully downloaded.</p>","source":"lib/storage/file.js#L515","resources":[],"examples":[{"caption":"<p><h4>Downloading a File</h4> \nThe example below demonstrates how we can reference a remote file, then \npipe its contents to a local file. This is effectively creating a local \nbackup of your remote data.</p>","code":"var fs = require('fs');\nvar remoteFile = bucket.file('image.png');\nvar localFilename = '/Users/stephen/Photos/image.png';\n\nremoteFile.createReadStream()\n  .on('error', function(err) {})\n  .on('response', function(response) {\n    // Server connected and responded with the specified status and headers.\n   })\n  .on('end', function() {\n    // The file is fully downloaded.\n  })\n  .pipe(fs.createWriteStream(localFilename));"},{"caption":"<p>To limit the downloaded data to only a byte range, pass an options object.</p>","code":"var logFile = myBucket.file('access_log');\nlogFile.createReadStream({\n    start: 10000,\n    end: 20000\n  })\n  .on('error', function(err) {})\n  .pipe(fs.createWriteStream('/Users/stephen/logfile.txt'));"},{"caption":"<p>To read a tail byte range, specify only <code>options.end</code> as a negative \nnumber.</p>","code":"var logFile = myBucket.file('access_log');\nlogFile.createReadStream({\n    end: -100\n  })\n  .on('error', function(err) {})\n  .pipe(fs.createWriteStream('/Users/stephen/logfile.txt'));"}],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.validation","description":"<ul> <li>Possible values: <code>&quot;md5&quot;</code>, <code>&quot;crc32c&quot;</code>, or <code>false</code>. By default, data integrity is validated with an  MD5 checksum for maximum reliability, falling back to CRC32c when an MD5  hash wasn&#39;t returned from the API. CRC32c will provide better performance  with less reliability. You may also choose to skip validation completely,  however this is <strong>not recommended</strong>.</li> </ul> ","types":["string","boolean"],"optional":false,"nullable":false},{"name":"options.start","description":"<ul> <li>A byte offset to begin the file&#39;s download from. Default is 0. NOTE: Byte ranges are inclusive; that is,  <code>options.start = 0</code> and <code>options.end = 999</code> represent the first 1000  bytes in a file or object. NOTE: when specifying a byte range, data  integrity is not available.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"options.end","description":"<ul> <li>A byte offset to stop reading the file at. NOTE: Byte ranges are inclusive; that is, <code>options.start = 0</code> and  <code>options.end = 999</code> represent the first 1000 bytes in a file or object.  NOTE: when specifying a byte range, data integrity is not available.</li> </ul> ","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["ReadableStream"],"description":""}]},{"id":"createResumableUpload","name":"createResumableUpload","type":"instance","description":"<p>Create a unique resumable upload session URI. This is the first step when performing a resumable upload.</p><p>See the <a href=\"https://cloud.google.com/storage/docs/json_api/v1/how-tos/upload#resumable\">Resumable upload guide</a> for more on how the entire process works.</p><h4>Note</h4> <p>If you are just looking to perform a resumable upload without worrying about any of the details, see <a data-custom-type=\"storage/createWriteStream\" data-method=\"\">storage/createWriteStream</a>. Resumable uploads are performed by default.</p>","source":"lib/storage/file.js#L722","resources":[{"title":"Resumable upload guide","link":"https://cloud.google.com/storage/docs/json_api/v1/how-tos/upload#resumable"}],"examples":[{"code":"file.createResumableUpload(function(err, uri) {\n  if (!err) {\n    // `uri` can be used to PUT data to.\n  }\n});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.metadata","description":"<ul> <li>Metadata to set on the file.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"options.origin","description":"<ul> <li>Origin header to set for the upload.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.predefinedAcl","description":"<ul> <li><p>Apply a predefined set of access controls to this object.</p><p> Acceptable values are:</p><ul> <li><p><strong><code>authenticatedRead</code></strong> - Object owner gets <code>OWNER</code> access, and <code>allAuthenticatedUsers</code> get <code>READER</code> access.</p></li> <li><p><strong><code>bucketOwnerFullControl</code></strong> - Object owner gets <code>OWNER</code> access, and project team owners get <code>OWNER</code> access.</p></li> <li><p><strong><code>bucketOwnerRead</code></strong> - Object owner gets <code>OWNER</code> access, and project team owners get <code>READER</code> access.</p></li> <li><p><strong><code>private</code></strong> - Object owner gets <code>OWNER</code> access.</p></li> <li><p><strong><code>projectPrivate</code></strong> - Object owner gets <code>OWNER</code> access, and project team members get access according to their roles.</p></li> <li><p><strong><code>publicRead</code></strong> - Object owner gets <code>OWNER</code> access, and <code>allUsers</code> get <code>READER</code> access.</p></li> </ul> </li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.private","description":"<ul> <li>Make the uploaded file private. (Alias for <code>options.predefinedAcl = &#39;private&#39;</code>)</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"options.public","description":"<ul> <li>Make the uploaded file public. (Alias for <code>options.predefinedAcl = &#39;publicRead&#39;</code>)</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.uri","description":"<ul> <li>The resumable upload&#39;s unique session URI.</li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"createWriteStream","name":"createWriteStream","type":"instance","description":"<p>Create a writable stream to overwrite the contents of the file in your bucket.</p><p>A File object can also be used to create files for the first time.</p><p>Resumable uploads are automatically enabled and must be shut off explicitly by setting <code>options.resumable</code> to <code>false</code>.</p><p>For faster crc32c computation, you must manually install <a href=\"http://www.gitnpm.com/fast-crc32c\"><code>fast-crc32c</code></a>:</p><pre><code>$ npm install --save fast-crc32c </code></pre><p>NOTE: Writable streams will emit the <code>finish</code> event when the file is fully uploaded.</p>","source":"lib/storage/file.js#L860","resources":[{"title":"Upload Options (Simple or Resumable)","link":"https://cloud.google.com/storage/docs/json_api/v1/how-tos/upload#uploads"},{"title":"Objects: insert API Documentation","link":"https://cloud.google.com/storage/docs/json_api/v1/objects/insert"}],"examples":[{"code":"var fs = require('fs');"},{"caption":"<p><h4>Uploading a File</h4> \nNow, consider a case where we want to upload a file to your bucket. You \nhave the option of using <a data-custom-type=\"storage/bucket\" data-method=\"upload\">storage/bucket#upload</a>, but that is just \na convenience method which will do the following.</p>","code":"fs.createReadStream('/Users/stephen/Photos/birthday-at-the-zoo/panda.jpg')\n  .pipe(file.createWriteStream())\n  .on('error', function(err) {})\n  .on('finish', function() {\n    // The file upload is complete.\n  });"},{"caption":"<p><h4>Uploading a File with gzip compression</h4></p>","code":"fs.createReadStream('/Users/stephen/site/index.html')\n  .pipe(file.createWriteStream({ gzip: true }))\n  .on('error', function(err) {})\n  .on('finish', function() {\n    // The file upload is complete.\n  });"},{"caption":"<p>Downloading the file with <code>createReadStream</code> will automatically decode the \nfile.</p>"},{"caption":"<p><h4>Uploading a File with Metadata</h4> \nOne last case you may run into is when you want to upload a file to your \nbucket and set its metadata at the same time. Like above, you can use \n<a data-custom-type=\"storage/bucket\" data-method=\"upload\">storage/bucket#upload</a> to do this, which is just a wrapper around \nthe following.</p>","code":"fs.createReadStream('/Users/stephen/Photos/birthday-at-the-zoo/panda.jpg')\n  .pipe(file.createWriteStream({\n    metadata: {\n      contentType: 'image/jpeg',\n      metadata: {\n        custom: 'metadata'\n      }\n    }\n  }))\n  .on('error', function(err) {})\n  .on('finish', function() {\n    // The file upload is complete.\n  });"}],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.gzip","description":"<ul> <li>Automatically gzip the file. This will set <code>options.metadata.contentEncoding</code> to <code>gzip</code>.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"options.metadata","description":"<ul> <li>See the examples below or <a href=\"https://cloud.google.com/storage/docs/json_api/v1/objects/insert#request_properties_JSON\">Objects: insert request body</a>  for more details.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.offset","description":"<ul> <li>The starting byte of the upload stream, for resuming an interrupted upload. Defaults to 0.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.predefinedAcl","description":"<ul> <li><p>Apply a predefined set of access controls to this object.</p><p> Acceptable values are:</p><ul> <li><p><strong><code>authenticatedRead</code></strong> - Object owner gets <code>OWNER</code> access, and <code>allAuthenticatedUsers</code> get <code>READER</code> access.</p></li> <li><p><strong><code>bucketOwnerFullControl</code></strong> - Object owner gets <code>OWNER</code> access, and project team owners get <code>OWNER</code> access.</p></li> <li><p><strong><code>bucketOwnerRead</code></strong> - Object owner gets <code>OWNER</code> access, and project team owners get <code>READER</code> access.</p></li> <li><p><strong><code>private</code></strong> - Object owner gets <code>OWNER</code> access.</p></li> <li><p><strong><code>projectPrivate</code></strong> - Object owner gets <code>OWNER</code> access, and project team members get access according to their roles.</p></li> <li><p><strong><code>publicRead</code></strong> - Object owner gets <code>OWNER</code> access, and <code>allUsers</code> get <code>READER</code> access.</p></li> </ul> </li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.private","description":"<ul> <li>Make the uploaded file private. (Alias for <code>options.predefinedAcl = &#39;private&#39;</code>)</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"options.public","description":"<ul> <li>Make the uploaded file public. (Alias for <code>options.predefinedAcl = &#39;publicRead&#39;</code>)</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"options.resumable","description":"<ul> <li>Force a resumable upload. NOTE: When working with streams, the file format and size is unknown until it&#39;s  completely consumed. Because of this, it&#39;s best for you to be explicit  for what makes sense given your input.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"options.uri","description":"<ul> <li>The URI for an already-created resumable upload. See <a data-custom-type=\"storage/file\" data-method=\"createResumableUpload\">storage/file#createResumableUpload</a>.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.validation","description":"<ul> <li>Possible values: <code>&quot;md5&quot;</code>, <code>&quot;crc32c&quot;</code>, or <code>false</code>. By default, data integrity is validated with an  MD5 checksum for maximum reliability. CRC32c will provide better  performance with less reliability. You may also choose to skip validation  completely, however this is <strong>not recommended</strong>.</li> </ul> ","types":["string","boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["WritableStream"],"description":""}]},{"id":"download","name":"download","type":"instance","description":"<p>Convenience method to download a file into memory or to a local destination.</p>","source":"lib/storage/file.js#L1002","resources":[],"examples":[{"caption":"<p>Download a file into memory. The contents will be available as the second \nargument in the demonstration below, <code>contents</code>.</p>","code":"file.download(function(err, contents) {});"},{"caption":"<p>Download a file to a local destination.</p>","code":"file.download({\n  destination: '/Users/stephen/Desktop/file-backup.txt'\n}, function(err) {});"}],"params":[{"name":"options","description":"<ul> <li>Optional configuration. The arguments match those passed to <a data-custom-type=\"storage/file\" data-method=\"createReadStream\">storage/file#createReadStream</a>.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.destination","description":"<ul> <li>Local file path to write the file&#39;s contents to.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.contents","description":"<ul> <li>The contents of a File.</li> </ul> ","types":["buffer"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"setEncryptionKey","name":"setEncryptionKey","type":"instance","description":"<p>The Storage API allows you to use a custom key for server-side encryption.</p>","source":"lib/storage/file.js#L1059","resources":[{"title":"Customer-supplied Encryption Keys","link":"https://cloud.google.com/storage/docs/encryption#customer-supplied"}],"examples":[{"code":"var crypto = require('crypto');\nvar encryptionKey = crypto.randomBytes(32);\n\nvar fileWithCustomEncryption = myBucket.file('my-file');\nfileWithCustomEncryption.setEncryptionKey(encryptionKey);\n\nvar fileWithoutCustomEncryption = myBucket.file('my-file');\n\nfileWithCustomEncryption.save('data', function(err) {\n  // Try to download with the File object that hasn't had\n  // `setEncryptionKey()` called:\n  fileWithoutCustomEncryption.download(function(err) {\n    // We will receive an error:\n    //   err.message === 'Bad Request'\n\n    // Try again with the File object we called `setEncryptionKey()` on:\n    fileWithCustomEncryption.download(function(err, contents) {\n      // contents.toString() === 'data'\n    });\n  });\n});"}],"params":[{"name":"encryptionKey","description":"<ul> <li>An AES-256 encryption key.</li> </ul> ","types":["string","buffer"],"optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"storage/file\" data-method=\"\">storage/file</a>"],"description":""}]},{"id":"getSignedPolicy","name":"getSignedPolicy","type":"instance","description":"<p>Get a signed policy document to allow a user to upload data with a POST request.</p>","source":"lib/storage/file.js#L1136","resources":[{"title":"Policy Document Reference","link":"https://cloud.google.com/storage/docs/reference-methods#policydocument"}],"examples":[{"code":"var options = {\n  equals: ['$Content-Type', 'image/jpeg'],\n  expires: '10-25-2022',\n  contentLengthRange: {\n    min: 0,\n    max: 1024\n  }\n};\n\nfile.getSignedPolicy(options, function(err, policy) {\n  // policy.string: the policy document in plain text.\n  // policy.base64: the policy document in base64.\n  // policy.signature: the policy signature in base64.\n});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"options.equals","description":"<ul> <li>Array of request parameters and their expected value (e.g. [[&#39;$<field>&#39;, &#39;<value>&#39;]]). Values are  translated into equality constraints in the conditions field of the  policy document (e.g. [&#39;eq&#39;, &#39;$<field>&#39;, &#39;<value>&#39;]). If only one  equality condition is to be specified, options.equals can be a one-  dimensional array (e.g. [&#39;$<field>&#39;, &#39;<value>&#39;]).</li> </ul> ","types":["array","array[]"],"optional":true,"nullable":false},{"name":"options.expires","description":"<ul> <li>A timestamp when this policy will expire. Any value given is passed to <code>new Date()</code>.</li> </ul> ","types":[],"optional":false,"nullable":false},{"name":"options.startsWith","description":"<ul> <li>Array of request parameters and their expected prefixes (e.g. [[&#39;$<field>&#39;, &#39;<value>&#39;]). Values are  translated into starts-with constraints in the conditions field of the  policy document (e.g. [&#39;starts-with&#39;, &#39;$<field>&#39;, &#39;<value>&#39;]). If only  one prefix condition is to be specified, options.startsWith can be a one-  dimensional array (e.g. [&#39;$<field>&#39;, &#39;<value>&#39;]).</li> </ul> ","types":["array","array[]"],"optional":true,"nullable":false},{"name":"options.acl","description":"<ul> <li>ACL for the object from possibly predefined ACLs.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"options.successRedirect","description":"<ul> <li>The URL to which the user client is redirected if the upload is successful.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"options.successStatus","description":"<ul> <li>The status of the Google Storage response if the upload is successful (must be string).</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"options.contentLengthRange","description":"","types":["object"],"optional":true,"nullable":false},{"name":"options.contentLengthRange.min","description":"<ul> <li>Minimum value for the request&#39;s content length.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"options.contentLengthRange.max","description":"<ul> <li>Maximum value for the request&#39;s content length.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.policy","description":"<ul> <li>The document policy.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[{"type":"Error","description":"<p>If an expiration timestamp from the past is given.</p>"},{"type":"Error","description":"<p>If options.equals has an array with less or more than two members.</p>"},{"type":"Error","description":"<p>If options.startsWith has an array with less or more than two members.</p>"}],"returns":[]},{"id":"getSignedUrl","name":"getSignedUrl","type":"instance","description":"<p>Get a signed URL to allow limited time access to the file.</p>","source":"lib/storage/file.js#L1320","resources":[{"title":"Signed URLs Reference","link":"https://cloud.google.com/storage/docs/access-control#Signed-URLs"}],"examples":[{"caption":"<p>Generate a URL that allows temporary access to download your file.</p>","code":"var request = require('request');\n\nfile.getSignedUrl({\n  action: 'read',\n  expires: '03-17-2025'\n}, function(err, url) {\n  if (err) {\n    console.error(err);\n    return;\n  }\n\n  // The file is now available to read from this URL.\n  request(url, function(err, resp) {\n    // resp.statusCode = 200\n  });\n});"},{"caption":"<p>Generate a URL to allow write permissions. This means anyone with this URL \ncan send a POST request with new data that will overwrite the file.</p>","code":"file.getSignedUrl({\n  action: 'write',\n  expires: '03-17-2025'\n}, function(err, url) {\n  if (err) {\n    console.error(err);\n    return;\n  }\n\n  // The file is now available to be written to.\n  var writeStream = request.put(url);\n  writeStream.end('New data');\n\n  writeStream.on('complete', function(resp) {\n    // Confirm the new content was saved.\n    file.download(function(err, fileContents) {\n      console.log('Contents:', fileContents.toString());\n      // Contents: New data\n    });\n  });\n});"}],"params":[{"name":"config","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"config.action","description":"<ul> <li>&quot;read&quot; (HTTP: GET), &quot;write&quot; (HTTP: PUT), or &quot;delete&quot; (HTTP: DELETE).</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"config.cname","description":"<ul> <li>The cname for this bucket, i.e., &quot;<a href=\"https://cdn.example.com\">https://cdn.example.com</a>&quot;.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"config.contentMd5","description":"<ul> <li>The MD5 digest value in base64. If you provide this, the client must provide this HTTP header with this same  value in its request.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"config.contentType","description":"<ul> <li>If you provide this value, the client must provide this HTTP header set to the same value.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"config.expires","description":"<ul> <li>A timestamp when this link will expire. Any value given is passed to <code>new Date()</code>.</li> </ul> ","types":[],"optional":false,"nullable":false},{"name":"config.extensionHeaders","description":"<ul> <li>If these headers are used, the server will check to make sure that the client provides matching values.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"config.promptSaveAs","description":"<ul> <li>The filename to prompt the user to save the file as when the signed url is accessed. This is ignored if  <code>config.responseDisposition</code> is set.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"config.responseDisposition","description":"<ul> <li>The <a href=\"http://goo.gl/yMWxQV\">response-content-disposition parameter</a> of the  signed url.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"config.responseType","description":"<ul> <li>The response-content-type parameter of the signed url.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.url","description":"<ul> <li>The signed URL.</li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[{"type":"Error","description":"<p>if an expiration timestamp from the past is given.</p>"}],"returns":[]},{"id":"makePrivate","name":"makePrivate","type":"instance","description":"<p>$/, &#39;&#39;), // Remove trailing slashes.  name: name,  id: &#39;?GoogleAccessId=&#39; + credentials.client_email,  exp: &#39;&amp;Expires=&#39; + expiresInSeconds,  sig: &#39;&amp;Signature=&#39; + encodeURIComponent(signature),  type: responseContentType || &#39;&#39;,  disp: responseContentDisposition || &#39;&#39;,  gen: self.generation ? &#39;&amp;generation=&#39; + self.generation : &#39;&#39;  });</p><pre><code>callback(null, signedUrl); </code></pre><p> }); };</p><p>/** Make a file private to the project and remove all other permissions. Set <code>options.strict</code> to true to make the file private to only the owner.</p>","source":"lib/storage/file.js#L1435","resources":[{"title":"Objects: patch API Documentation","link":"https://cloud.google.com/storage/docs/json_api/v1/objects/patch"}],"examples":[{"caption":"<p>Set the file private so only project maintainers can see and modify it.</p>","code":"file.makePrivate(function(err) {});"},{"caption":"<p>Set the file private so only the owner can see and modify it.</p>","code":"file.makePrivate({ strict: true }, function(err) {});"}],"params":[{"name":"options","description":"<ul> <li>The configuration object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.strict","description":"<ul> <li>If true, set the file to be private to only the owner user. Otherwise, it will be private to the project.</li> </ul> ","types":["boolean"],"optional":true,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true}],"exceptions":[],"returns":[]},{"id":"makePublic","name":"makePublic","type":"instance","description":"<p>Set a file to be publicly readable and maintain all previous permissions.</p>","source":"lib/storage/file.js#L1484","resources":[{"title":"ObjectAccessControls: insert API Documentation","link":"https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/insert"}],"examples":[{"code":"file.makePublic(function(err, apiResponse) {});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"move","name":"move","type":"instance","description":"<p>Move this file to another location. By default, this will move the file to the same bucket, but you can choose to move it to another Bucket by providing a Bucket or File object or a URL beginning with &quot;gs://&quot;.</p><p><strong>Warning</strong>: There is currently no atomic <code>move</code> method in the Google Cloud Storage API, so this method is a composition of <a data-custom-type=\"storage/file\" data-method=\"copy\">storage/file#copy</a> (to the new location) and <a data-custom-type=\"storage/file\" data-method=\"delete\">storage/file#delete</a> (from the old location). While unlikely, it is possible that an error returned to your callback could be triggered from either one of these API calls failing, which could leave a duplicate file lingering.</p>","source":"lib/storage/file.js#L1593","resources":[{"title":"Objects: copy API Documentation","link":"https://cloud.google.com/storage/docs/json_api/v1/objects/copy"}],"examples":[{"caption":"<p>You can pass in a variety of types for the destination. \nFor all of the below examples, assume we are working with the following \nBucket and File objects.</p>","code":"var bucket = gcs.bucket('my-bucket');\nvar file = bucket.file('my-image.png');"},{"caption":"<p>If you pass in a string for the destination, the file is moved to its \ncurrent bucket, under the new name provided.</p>","code":"file.move('my-image-new.png', function(err, destinationFile, apiResponse) {\n  // `my-bucket` no longer contains:\n  // - \"my-image.png\"\n  // but contains instead:\n  // - \"my-image-new.png\"\n\n  // `destinationFile` is an instance of a File object that refers to your\n  // new file.\n});"},{"caption":"<p>If you pass in a string starting with \"gs:\n\" for the destination, the \nfile is copied to the other bucket and under the new name provided.</p>","code":"var newLocation = 'gs://another-bucket/my-image-new.png';\nfile.move(newLocation, function(err, destinationFile, apiResponse) {\n  // `my-bucket` no longer contains:\n  // - \"my-image.png\"\n  //\n  // `another-bucket` now contains:\n  // - \"my-image-new.png\"\n\n  // `destinationFile` is an instance of a File object that refers to your\n  // new file.\n});"},{"caption":"<p>If you pass in a Bucket object, the file will be moved to that bucket \nusing the same name.</p>","code":"var anotherBucket = gcs.bucket('another-bucket');\n\nfile.move(anotherBucket, function(err, destinationFile, apiResponse) {\n  // `my-bucket` no longer contains:\n  // - \"my-image.png\"\n  //\n  // `another-bucket` now contains:\n  // - \"my-image.png\"\n\n  // `destinationFile` is an instance of a File object that refers to your\n  // new file.\n});"},{"caption":"<p>If you pass in a File object, you have complete control over the new \nbucket and filename.</p>","code":"var anotherFile = anotherBucket.file('my-awesome-image.png');\n\nfile.move(anotherFile, function(err, destinationFile, apiResponse) {\n  // `my-bucket` no longer contains:\n  // - \"my-image.png\"\n  //\n  // `another-bucket` now contains:\n  // - \"my-awesome-image.png\"\n\n  // Note:\n  // The `destinationFile` parameter is equal to `anotherFile`.\n});"}],"params":[{"name":"destination","description":"<ul> <li>Destination file.</li> </ul> ","types":["string","<a data-custom-type=\"storage/bucket\" data-method=\"\">storage/bucket</a>","<a data-custom-type=\"storage/file\" data-method=\"\">storage/file</a>"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.destinationFile","description":"<ul> <li>The destination File.</li> </ul> ","types":["<a data-custom-type=\"storage/file\" data-method=\"\">storage/file</a>"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[{"type":"Error","description":"<p>If the destination file is not provided.</p>"}],"returns":[]},{"id":"save","name":"save","type":"instance","description":"<p>Write arbitrary data to a file.</p><p><em>This is a convenience method which wraps <a data-custom-type=\"storage/file\" data-method=\"createWriteStream\">storage/file#createWriteStream</a>.</em></p>","source":"lib/storage/file.js#L1629","resources":[],"examples":[{"code":"file.save('This is the contents of the file.', function(err) {\n  if (!err) {\n    // File written successfully.\n  }\n});"}],"params":[{"name":"data","description":"<ul> <li>The data to write to a file.</li> </ul> ","types":[],"optional":false,"nullable":false},{"name":"options","description":"<ul> <li>See <a data-custom-type=\"storage/file\" data-method=\"createWriteStream\">storage/file#createWriteStream</a>&#39;s <code>options</code> parameter.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true}],"exceptions":[],"returns":[]},{"id":"acl.owners","name":"acl.owners","type":"instance","description":"<p>An object of convenience methods to add or delete owner ACL permissions for a given entity.</p><p>The supported methods include:</p><ul> <li><code>myFile.acl.owners.addAllAuthenticatedUsers</code></li> <li><code>myFile.acl.owners.deleteAllAuthenticatedUsers</code></li> <li><code>myFile.acl.owners.addAllUsers</code></li> <li><code>myFile.acl.owners.deleteAllUsers</code></li> <li><code>myFile.acl.owners.addDomain</code></li> <li><code>myFile.acl.owners.deleteDomain</code></li> <li><code>myFile.acl.owners.addGroup</code></li> <li><code>myFile.acl.owners.deleteGroup</code></li> <li><code>myFile.acl.owners.addProject</code></li> <li><code>myFile.acl.owners.deleteProject</code></li> <li><code>myFile.acl.owners.addUser</code></li> <li><code>myFile.acl.owners.deleteUser</code></li> </ul> ","source":"lib/storage/acl.js#L115","resources":[],"examples":[{"code":"var gcs = gcloud.storage({\n  projectId: 'grape-spaceship-123'\n});"},{"caption":"<p>Add a user as an owner of a file.</p>","code":"var myBucket = gcs.bucket('my-bucket');\nvar myFile = myBucket.file('my-file');\nmyFile.acl.owners.addUser('email@example.com', function(err, aclObject) {});"},{"caption":"<p>For reference, the above command is the same as running the following.</p>","code":"myFile.acl.add({\n  entity: 'user-email@example.com',\n  role: gcs.acl.OWNER_ROLE\n}, function(err, aclObject) {});"}],"params":[],"exceptions":[],"returns":[{"types":["object"],"description":""}]},{"id":"acl.readers","name":"acl.readers","type":"instance","description":"<p>An object of convenience methods to add or delete reader ACL permissions for a given entity.</p><p>The supported methods include:</p><ul> <li><code>myFile.acl.readers.addAllAuthenticatedUsers</code></li> <li><code>myFile.acl.readers.deleteAllAuthenticatedUsers</code></li> <li><code>myFile.acl.readers.addAllUsers</code></li> <li><code>myFile.acl.readers.deleteAllUsers</code></li> <li><code>myFile.acl.readers.addDomain</code></li> <li><code>myFile.acl.readers.deleteDomain</code></li> <li><code>myFile.acl.readers.addGroup</code></li> <li><code>myFile.acl.readers.deleteGroup</code></li> <li><code>myFile.acl.readers.addProject</code></li> <li><code>myFile.acl.readers.deleteProject</code></li> <li><code>myFile.acl.readers.addUser</code></li> <li><code>myFile.acl.readers.deleteUser</code></li> </ul> ","source":"lib/storage/acl.js#L152","resources":[],"examples":[{"caption":"<p>Add a user as a reader of a file.</p>","code":"myFile.acl.readers.addUser('email@example.com', function(err, aclObject) {});"},{"caption":"<p>For reference, the above command is the same as running the following.</p>","code":"myFile.acl.add({\n  entity: 'user-email@example.com',\n  role: gcs.acl.READER_ROLE\n}, function(err, aclObject) {});"}],"params":[],"exceptions":[],"returns":[{"types":["object"],"description":""}]},{"id":"acl.writers","name":"acl.writers","type":"instance","description":"<p>An object of convenience methods to add or delete writer ACL permissions for a given entity.</p><p>The supported methods include:</p><ul> <li><code>myFile.acl.writers.addAllAuthenticatedUsers</code></li> <li><code>myFile.acl.writers.deleteAllAuthenticatedUsers</code></li> <li><code>myFile.acl.writers.addAllUsers</code></li> <li><code>myFile.acl.writers.deleteAllUsers</code></li> <li><code>myFile.acl.writers.addDomain</code></li> <li><code>myFile.acl.writers.deleteDomain</code></li> <li><code>myFile.acl.writers.addGroup</code></li> <li><code>myFile.acl.writers.deleteGroup</code></li> <li><code>myFile.acl.writers.addProject</code></li> <li><code>myFile.acl.writers.deleteProject</code></li> <li><code>myFile.acl.writers.addUser</code></li> <li><code>myFile.acl.writers.deleteUser</code></li> </ul> ","source":"lib/storage/acl.js#L189","resources":[],"examples":[{"caption":"<p>Add a user as a writer of a file.</p>","code":"myFile.acl.writers.addUser('email@example.com', function(err, aclObject) {});"},{"caption":"<p>For reference, the above command is the same as running the following.</p>","code":"myFile.acl.add({\n  entity: 'user-email@example.com',\n  role: gcs.acl.WRITER_ROLE\n}, function(err, aclObject) {});"}],"params":[],"exceptions":[],"returns":[{"types":["object"],"description":""}]},{"id":"acl.add","name":"acl.add","type":"instance","description":"<p>Add access controls on a <a data-custom-type=\"storage/bucket\" data-method=\"\">storage/bucket</a> or <a data-custom-type=\"storage/file\" data-method=\"\">storage/file</a>.</p>","source":"lib/storage/acl.js#L227","resources":[{"title":"BucketAccessControls: insert API Documentation","link":"https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/insert"},{"title":"ObjectAccessControls: insert API Documentation","link":"https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/insert"}],"examples":[{"code":"myBucket.acl.add({\n  entity: 'user-useremail@example.com',\n  role: gcs.acl.OWNER_ROLE\n}, function(err, aclObject, apiResponse) {});"},{"caption":"<p>For file ACL operations, you can also specify a <code>generation</code> property. \nHere is how you would grant ownership permissions to a user on a specific \nrevision of a file.</p>","code":"myFile.acl.add({\n  entity: 'user-useremail@example.com',\n  role: gcs.acl.OWNER_ROLE,\n  generation: 1\n}, function(err, aclObject, apiResponse) {});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"options.entity","description":"<ul> <li>Whose permissions will be added.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.role","description":"<ul> <li>Permissions allowed for the defined entity. See <a data-custom-type=\"storage\" data-method=\"acl\">storage#acl</a>.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.generation","description":"<ul> <li><strong>File Objects Only</strong> Select a specific revision of this file (as opposed to the latest version, the default).</li> </ul> ","types":["int"],"optional":true,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.aclObject","description":"<ul> <li>The Acl Object.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"acl.delete","name":"acl.delete","type":"instance","description":"<p>Delete access controls on a <a data-custom-type=\"storage/bucket\" data-method=\"\">storage/bucket</a> or <a data-custom-type=\"storage/file\" data-method=\"\">storage/file</a>.</p>","source":"lib/storage/acl.js#L281","resources":[{"title":"BucketAccessControls: delete API Documentation","link":"https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/delete"},{"title":"ObjectAccessControls: delete API Documentation","link":"https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/delete"}],"examples":[{"code":"myBucket.acl.delete({\n  entity: 'user-useremail@example.com'\n}, function(err, apiResponse) {});"},{"caption":"<p>For file ACL operations, you can also specify a <code>generation</code> property.</p>","code":"myFile.acl.delete({\n  entity: 'user-useremail@example.com',\n  generation: 1\n}, function(err, apiResponse) {});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.entity","description":"<ul> <li>Whose permissions will be revoked.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.generation","description":"<ul> <li><strong>File Objects Only</strong> Select a specific revision of this file (as opposed to the latest version, the default).</li> </ul> ","types":["int"],"optional":true,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"acl.get","name":"acl.get","type":"instance","description":"<p>Get access controls on a <a data-custom-type=\"storage/bucket\" data-method=\"\">storage/bucket</a> or <a data-custom-type=\"storage/file\" data-method=\"\">storage/file</a>. If an entity is omitted, you will receive an array of all applicable access controls.</p>","source":"lib/storage/acl.js#L341","resources":[{"title":"BucketAccessControls: get API Documentation","link":"https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/get"},{"title":"ObjectAccessControls: get API Documentation","link":"https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/get"}],"examples":[{"code":"myBucket.acl.get({\n  entity: 'user-useremail@example.com'\n}, function(err, aclObject, apiResponse) {});"},{"caption":"<p>Get all access controls.</p>","code":"myBucket.acl.get(function(err, aclObjects, apiResponse) {\n  // aclObjects = [\n  //   {\n  //     entity: 'user-useremail@example.com',\n  //     role: 'owner'\n  //   }\n  // ]\n});"},{"caption":"<p>For file ACL operations, you can also specify a <code>generation</code> property.</p>","code":"myFile.acl.get({\n  entity: 'user-useremail@example.com',\n  generation: 1\n}, function(err, aclObject, apiResponse) {});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object. If you want to receive a list of all access controls, pass the callback function as the  only argument.</li> </ul> ","types":["object","function"],"optional":false,"nullable":false},{"name":"options.entity","description":"<ul> <li>Whose permissions will be fetched.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"options.generation","description":"<ul> <li><strong>File Objects Only</strong> Select a specific revision of this file (as opposed to the latest version, the default).</li> </ul> ","types":["int"],"optional":true,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.aclObject","description":"<ul> <li>Single or Array of Acl Objects.</li> </ul> ","types":["object","array"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"acl.update","name":"acl.update","type":"instance","description":"<p>Update access controls on a <a data-custom-type=\"storage/bucket\" data-method=\"\">storage/bucket</a> or <a data-custom-type=\"storage/file\" data-method=\"\">storage/file</a>.</p>","source":"lib/storage/acl.js#L414","resources":[{"title":"BucketAccessControls: update API Documentation","link":"https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/update"},{"title":"ObjectAccessControls: update API Documentation","link":"https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/update"}],"examples":[{"code":"var gcs = gcloud.storage({\n  projectId: 'grape-spaceship-123'\n});\n\nmyBucket.acl.update({\n  entity: 'user-useremail@example.com',\n  role: gcs.acl.WRITER_ROLE\n}, function(err, aclObject, apiResponse) {});"},{"caption":"<p>For file ACL operations, you can also specify a <code>generation</code> property.</p>","code":"myFile.acl.update({\n  entity: 'user-useremail@example.com',\n  role: gcs.acl.WRITER_ROLE,\n  generation: 1\n}, function(err, aclObject, apiResponse) {});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.entity","description":"<ul> <li>Whose permissions will be updated.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.role","description":"<ul> <li>Permissions allowed for the defined entity. See <a data-custom-type=\"storage\" data-method=\"acl\">storage#acl</a>.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.generation","description":"<ul> <li><strong>File Objects Only</strong> Select a specific revision of this file (as opposed to the latest version, the default).</li> </ul> ","types":["int"],"optional":true,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.aclObject","description":"<ul> <li>The updated Acl Object.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]}]}