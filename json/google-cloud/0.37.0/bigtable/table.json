{"id":"bigtable/table","type":"class","name":"Table","description":"","source":"lib/bigtable/table.js","parent":"bigtable","children":[],"methods":[{"id":"Table","name":"Table","type":"constructor","description":"<p>Create a Table object to interact with a Google Cloud Bigtable table.</p>","source":"lib/bigtable/table.js#L82","resources":[],"examples":[{"code":"var gcloud = require('gcloud');\n\nvar bigtable = gcloud.bigtable({\n  keyFilename: '/path/to/keyfile.json',\n  projectId: 'grape-spaceship-123',\n  cluster: 'gcloud-node',\n  zone: 'us-central1-b'\n});\n\nvar table = bigtable.table('prezzy');"}],"params":[{"name":"name","description":"<ul> <li>Name of the table.</li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"create","name":"create","type":"instance","description":"<p>Create a table.</p>","source":"lib/bigtable/table.js#L99","resources":[],"examples":[{"code":"table.create(function(err, table, apiResponse) {\n  if (!err) {\n    // The table was created successfully.\n  }\n});"}],"params":[{"name":"options","description":"<ul> <li>See <a data-custom-type=\"bigtable\" data-method=\"createTable\">bigtable#createTable</a>.</li> </ul> ","types":["object"],"optional":true,"nullable":false}],"exceptions":[],"returns":[]},{"id":"delete","name":"delete","type":"instance","description":"<p>Delete the table.</p>","source":"lib/bigtable/table.js#L112","resources":[],"examples":[{"code":"table.delete(function(err, apiResponse) {});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"exists","name":"exists","type":"instance","description":"<p>Check if a table exists.</p>","source":"lib/bigtable/table.js#L133","resources":[],"examples":[{"code":"table.exists(function(err, exists) {});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.exists","description":"<ul> <li>Whether the table exists or not.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"get","name":"get","type":"instance","description":"<p>Get a table if it exists.</p><p>You may optionally use this to &quot;get or create&quot; an object by providing an object with <code>autoCreate</code> set to <code>true</code>. Any extra configuration that is normally required for the <code>create</code> method must be contained within this object as well.</p>","source":"lib/bigtable/table.js#L152","resources":[],"examples":[{"code":"table.get(function(err, table, apiResponse) {\n  // The `table` data has been populated.\n});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["options"],"optional":true,"nullable":false},{"name":"options.autoCreate","description":"<ul> <li>Automatically create the object if it does not exist. Default: <code>false</code></li> </ul> ","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"getMetadata","name":"getMetadata","type":"instance","description":"<p>Get the table&#39;s metadata.</p>","source":"lib/bigtable/table.js#L166","resources":[],"examples":[{"code":"table.getMetadata(function(err, metadata, apiResponse) {});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.metadata","description":"<ul> <li>The table&#39;s metadata.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"createFamily","name":"createFamily","type":"instance","description":"<p>Create a column family.</p><p>Optionally you can send garbage collection rules and expressions when creating a family. Garbage collection executes opportunistically in the background, so it&#39;s possible for reads to return a cell even if it matches the active expression for its family.</p>","source":"lib/bigtable/table.js#L294","resources":[{"title":"Garbage Collection Proto Docs","link":"https://github.com/googleapis/googleapis/blob/master/google/bigtable/admin/table/v1/bigtable_table_data.proto#L59"}],"examples":[{"code":"var callback = function(err, family, apiResponse) {\n  // `family` is a Family object\n};\n\nvar rule = {\n  age: {\n    seconds: 0,\n    nanos: 5000\n  },\n  versions: 3,\n  union: true\n};\n\ntable.createFamily('follows', rule, callback);"},{"caption":"<p>Alternatively you can send a garbage collection expression.</p>","code":"var expression = 'version() > 3 || (age() > 3d && version() > 1)';\n\ntable.createFamily('follows', expression, callback);"}],"params":[{"name":"name","description":"<ul> <li>The name of column family.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"rule","description":"<ul> <li>Garbage collection rule.</li> </ul> ","types":["string","object"],"optional":true,"nullable":false},{"name":"rule.age","description":"<ul> <li>Delete cells in a column older than the given age. Values must be at least 1 millisecond.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"rule.versions","description":"<ul> <li>Maximum number of versions to delete cells in a column, except for the most recent.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"rule.intersect","description":"<ul> <li>Cells to delete should match all rules.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"rule.union","description":"<ul> <li>Cells to delete should match any of the rules.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.family","description":"<ul> <li>The newly created Family.</li> </ul> ","types":["<a data-custom-type=\"bigtable/family\" data-method=\"\">bigtable/family</a>"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"deleteRows","name":"deleteRows","type":"instance","description":"<p>Delete all rows in the table, optionally corresponding to a particular prefix.</p>","source":"lib/bigtable/table.js#L364","resources":[],"examples":[{"caption":"<p>You can supply a prefix to delete all corresponding rows.</p>","code":"var callback = function(err, apiResponse) {\n  if (!err) {\n    // Rows successfully deleted.\n  }\n};\n\ntable.deleteRows({\n  prefix: 'alincoln'\n}, callback);"},{"caption":"<p>If you choose to omit the prefix, all rows in the table will be deleted.</p>","code":"table.deleteRows(callback);"}],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["options"],"optional":true,"nullable":false},{"name":"options.prefix","description":"<ul> <li>Row key prefix, when omitted all rows will be deleted.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"family","name":"family","type":"instance","description":"<p>Get a reference to a Table Family.</p>","source":"lib/bigtable/table.js#L397","resources":[],"examples":[{"code":"var family = table.family('my-family');"}],"params":[{"name":"name","description":"<ul> <li>The family name.</li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"bigtable/family\" data-method=\"\">bigtable/family</a>"],"description":""}]},{"id":"getFamilies","name":"getFamilies","type":"instance","description":"<p>Get Family objects for all the column familes in your table.</p>","source":"lib/bigtable/table.js#L414","resources":[],"examples":[{"code":"table.getFamilies(function(err, families, apiResponse) {\n  // `families` is an array of Family objects.\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.families","description":"<ul> <li>The list of families.</li> </ul> ","types":["<a data-custom-type=\"bigtable/family[]\" data-method=\"\">bigtable/family[]</a>"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"getRows","name":"getRows","type":"instance","description":"<p>Get Row objects for the rows currently in your table.</p>","source":"lib/bigtable/table.js#L553","resources":[],"examples":[{"caption":"<p>While this method does accept a callback, this is not recommended for \nlarge datasets as it will buffer all rows before executing the callback. \nInstead we recommend using the streaming API by simply omitting the \ncallback.</p>","code":"var callback = function(err, rows) {\n  if (!err) {\n    // `rows` is an array of Row objects.\n  }\n};\n\ntable.getRows(callback);"},{"caption":"<p>Specify a single row to be returned.</p>","code":"table.getRows({\n  key: 'alincoln'\n}, callback);"},{"caption":"<p>Specify arbitrary keys for a non-contiguous set of rows. \nThe total size of the keys must remain under 1MB, after encoding.</p>","code":"table.getRows({\n  keys: [\n    'alincoln',\n    'gwashington'\n  ]\n}, callback);"},{"caption":"<p>Specify a contiguous range of rows to read by supplying <code>start</code> and <code>end</code> \nkeys. \nIf the <code>start</code> key is omitted, it is interpreted as an empty string. \nIf the <code>end</code> key is omitted, it is interpreted as infinity.</p>","code":"table.getRows({\n  start: 'alincoln',\n  end: 'gwashington'\n}, callback);"},{"caption":"<p>Specify multiple ranges.</p>","code":"table.getRows({\n  ranges: [{\n    start: 'alincoln',\n    end: 'gwashington'\n  }, {\n    start: 'tjefferson',\n    end: 'jadams'\n  }]\n}, callback);"},{"caption":"<p>By default, rows are read sequentially, producing results which are \nguaranteed to arrive in increasing row order. Setting <code>interleave</code> to \ntrue allows multiple rows to be interleaved in the response, which \nincreases throughput but breaks this guarantee and may force the client \nto use more memory to buffer partially-received rows.</p>","code":"table.getRows({\n  interleave: true\n}, callback);"},{"caption":"<p>Apply a <a data-custom-type=\"bigtable/filter\" data-method=\"\">bigtable/filter</a> to the contents of the specified rows.</p>","code":"table.getRows({\n  filter: [\n    {\n      column: 'gwashington'\n    }, {\n      value: 1\n    }\n  ]\n}, callback);"},{"caption":"<p>Get the rows from your table as a readable object stream.</p>","code":"table.getRows()\n  .on('error', console.error)\n  .on('data', function(row) {\n    // `row` is a Row object.\n  })\n  .on('end', function() {\n    // All rows retrieved.\n  });"},{"caption":"<p>If you anticipate many results, you can end a stream early to prevent \nunnecessary processing.</p>","code":"table.getRows()\n  .on('data', function(row) {\n    this.end();\n  });"}],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["options"],"optional":true,"nullable":false},{"name":"options.key","description":"<ul> <li>An individual row key.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.keys","description":"<ul> <li>A list of row keys.</li> </ul> ","types":["string[]"],"optional":false,"nullable":false},{"name":"options.start","description":"<ul> <li>Start value for key range.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.end","description":"<ul> <li>End value for key range.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.ranges","description":"<ul> <li>A list of key ranges.</li> </ul> ","types":["object[]"],"optional":false,"nullable":false},{"name":"options.filter","description":"<ul> <li>Row filters allow you to both make advanced queries and format how the data is returned.</li> </ul> ","types":["<a data-custom-type=\"bigtable/filter\" data-method=\"\">bigtable/filter</a>"],"optional":false,"nullable":false},{"name":"options.interleave","description":"<ul> <li>Allow for interleaving.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"options.limit","description":"<ul> <li>Maximum number of rows to be returned.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.rows","description":"<ul> <li>List of Row objects.</li> </ul> ","types":["<a data-custom-type=\"bigtable/row[]\" data-method=\"\">bigtable/row[]</a>"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"insert","name":"insert","type":"instance","description":"<p>Insert or update rows in your table.</p>","source":"lib/bigtable/table.js#L666","resources":[],"examples":[{"code":"var entries = [\n {\n    key: 'alincoln',\n    data: {\n      follows: {\n        gwashington: 1\n      }\n    }\n  }\n];\n\ntable.insert(entries, function(err, apiResponse) {});"},{"caption":"<p>By default whenever you insert new data, the server will capture a \ntimestamp of when your data was inserted. It's possible to provide a \ndate object to be used instead.</p>","code":"var entries = [\n  {\n    key: 'gwashington',\n    data: {\n      follows: {\n        jadams: {\n          value: 1,\n          timestamp: new Date('March 22, 2016')\n        }\n      }\n    }\n  }\n];\n\ntable.insert(entries, function(err, apiResponse) {});"}],"params":[{"name":"entries","description":"<ul> <li>List of entries to be inserted. See <a data-custom-type=\"bigtable/table\" data-method=\"mutate\">bigtable/table#mutate</a>.</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"mutate","name":"mutate","type":"instance","description":"<p>Apply a set of changes to be atomically applied to the specified row(s). Mutations are applied in order, meaning that earlier mutations can be masked by later ones.</p>","source":"lib/bigtable/table.js#L758","resources":[],"examples":[{"caption":"<p>Insert entities. See <a data-custom-type=\"bigtable/table\" data-method=\"insert\">bigtable/table#insert</a></p>","code":"var callback = function(err, apiResponse) {\n  if (!err) {\n    // Mutations were successful.\n  }\n};\n\nvar entries = [\n  {\n    method: 'insert',\n    key: 'gwashington',\n    data: {\n      follows: {\n        jadams: 1\n      }\n    }\n  }\n];\n\ntable.mutate(entries, callback)"},{"caption":"<p>Delete entities. See <a data-custom-type=\"bigtable/row\" data-method=\"deleteCells\">bigtable/row#deleteCells</a></p>","code":"var entries = [\n  {\n    method: 'delete',\n    key: 'gwashington'\n  }\n];\n\ntable.mutate(entries, callback);"},{"caption":"<p>Delete specific columns within a row.</p>","code":"var entries = [\n  {\n    method: 'delete',\n    key: 'gwashington',\n    data: [\n      'follows:jadams'\n    ]\n  }\n];\n\ntable.mutate(entries, callback);"},{"caption":"<p>Mix and match mutations. This must contain at least one entry and at \nmost 100,000.</p>","code":"var entries = [\n  {\n    method: 'insert',\n    key: 'alincoln',\n    data: {\n      follows: {\n        gwashington: 1\n      }\n    }\n  }, {\n    method: 'delete',\n    key: 'jadams',\n    data: [\n      'follows:gwashington'\n    ]\n  }\n];\n\ntable.mutate(entries, callback);"}],"params":[{"name":"entries","description":"<ul> <li>List of entities to be inserted or deleted.</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"row","name":"row","type":"instance","description":"<p>Get a reference to a table row.</p>","source":"lib/bigtable/table.js#L783","resources":[],"examples":[{"code":"var row = table.row('lincoln');"}],"params":[{"name":"key","description":"<ul> <li>The row key.</li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"bigtable/row\" data-method=\"\">bigtable/row</a>"],"description":""}]},{"id":"sampleRowKeys","name":"sampleRowKeys","type":"instance","description":"<p>Returns a sample of row keys in the table. The returned row keys will delimit contigous sections of the table of approximately equal size, which can be used to break up the data for distributed tasks like mapreduces.</p>","source":"lib/bigtable/table.js#L825","resources":[],"examples":[{"code":"table.sampleRowKeys(function(err, keys) {\n  // keys = [\n  //   {\n  //     key: '',\n  //     offset: '805306368'\n  //   },\n  //   ...\n  // ]\n});"},{"caption":"<p>Get the keys from your table as a readable object stream.</p>","code":"table.sampleRowKeys()\n  .on('error', console.error)\n  .on('data', function(key) {\n    // Do something with the `key` object.\n  });"},{"caption":"<p>If you anticipate many results, you can end a stream early to prevent \nunnecessary processing.</p>","code":"table.sampleRowKeys()\n  .on('data', function(key) {\n    this.end();\n  });"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.keys","description":"<ul> <li>The list of keys.</li> </ul> ","types":["object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]}]}