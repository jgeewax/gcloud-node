{"id":"bigtable/filter","type":"class","name":"Filter","description":"","source":"lib/bigtable/filter.js","parent":"bigtable","children":[],"methods":[{"id":"Filter","name":"Filter","type":"constructor","description":"<p>A filter takes a row as input and produces an alternate view of the row based on specified rules. For example, a row filter might trim down a row to include just the cells from columns matching a given regular expression, or might return all the cells of a row but not their values. More complicated filters can be composed out of these components to express requests such as, &quot;within every column of a particular family, give just the two most recent cells which are older than timestamp X.&quot;</p><p>There are two broad categories of filters (true filters and transformers), as well as two ways to compose simple filters into more complex ones (<a data-custom-type=\"bigtable/filter\" data-method=\"interleave\">bigtable/filter#interleave</a>). They work as follows:</p><p>True filters alter the input row by excluding some of its cells wholesale from the output row. An example of a true filter is the <a data-custom-type=\"bigtable/filter\" data-method=\"value\">bigtable/filter#value</a> filter, which excludes cells whose values don&#39;t match the specified pattern. All regex true filters use RE2 syntax (<a href=\"https://github.com/google/re2/wiki/Syntax\">https://github.com/google/re2/wiki/Syntax</a>) and are evaluated as full matches. An important point to keep in mind is that RE2(.) is equivalent by default to RE2([^\\n]), meaning that it does not match newlines. When attempting to match an arbitrary byte, you should therefore use the escape sequence &#39;\\C&#39;, which may need to be further escaped as &#39;\\C&#39; in your client language.</p><p>Transformers alter the input row by changing the values of some of its cells in the output, without excluding them completely. Currently, the only supported transformer is the <a data-custom-type=\"bigtable/filter\" data-method=\"value\">bigtable/filter#value</a> <code>strip</code> filter, which replaces every cell&#39;s value with the empty string.</p><p>The total serialized size of a filter message must not exceed 4096 bytes, and filters may not be nested within each other to a depth of more than 20.</p><p>Use the following table for the various examples found throughout the filter documentation.</p><table> <thead> <tr> <th>Row Key</th> <th style=\"text-align:center\">follows:gwashington</th> <th style=\"text-align:center\">follows:jadams</th> <th style=\"text-align:center\">follows:tjefferson</th> </tr> </thead> <tbody> <tr> <td>gwashington</td> <td style=\"text-align:center\"></td> <td style=\"text-align:center\">1</td> <td style=\"text-align:center\"></td> </tr> <tr> <td>tjefferson</td> <td style=\"text-align:center\">1</td> <td style=\"text-align:center\">1</td> <td style=\"text-align:center\"></td> </tr> <tr> <td>jadams</td> <td style=\"text-align:center\">1</td> <td style=\"text-align:center\"></td> <td style=\"text-align:center\">1</td> </tr> </tbody> </table> ","source":"lib/bigtable/filter.js#L86","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"all","name":"all","type":"instance","description":"","source":"lib/bigtable/filter.js#L246","resources":[],"examples":[{"caption":"<p>Matches all cells, regardless of input. Functionally equivalent to \nleaving <code>filter</code> unset, but included for completeness.</p>","code":"var filter = {\n  all: true\n};"},{"caption":"<p>Does not match any cells, regardless of input. Useful for temporarily \ndisabling just part of a filter.</p>","code":"var filter = {\n  all: false\n};"}],"params":[],"exceptions":[],"returns":[]},{"id":"column","name":"column","type":"instance","description":"<p>Matches only cells from columns whose qualifiers satisfy the given RE2 regex.</p><p>Note that, since column qualifiers can contain arbitrary bytes, the &#39;\\C&#39; escape sequence must be used if a true wildcard is desired. The &#39;.&#39; character will not match the new line character &#39;\\n&#39;, which may be present in a binary qualifier.</p>","source":"lib/bigtable/filter.js#L369","resources":[],"examples":[{"caption":"<p>Using the following filter, we would retrieve the <code>tjefferson</code> and \n<code>gwashington</code> columns.</p>","code":"var filter = [\n  {\n    column: /[a-z]+on$/\n  }\n];"},{"caption":"<p>You can also provide a string (optionally containing regexp characters) \nfor simple column filters.</p>","code":"var filter = [\n  {\n    column: 'gwashington'\n  }\n];"},{"caption":"<p>Or you can provide an array of strings if you wish to match against \nmultiple columns.</p>","code":"var filter = [\n  {\n    column: [\n      'gwashington',\n      'tjefferson'\n    ]\n  }\n];"},{"caption":"<p>If you wish to use additional column filters, consider using the following \nsyntax.</p>","code":"var filter = [\n  {\n    column: {\n      name: 'gwashington'\n    }\n  }\n];"},{"caption":"<p><h4>Column Cell Limits</h4> \nMatches only the most recent number of versions within each column. For \nexample, if the <code>versions</code> is set to 2, this filter would only match \ncolumns updated at the two most recent timestamps. \nIf duplicate cells are present, as is possible when using an \n<a data-custom-type=\"bigtable/filter\" data-method=\"interleave\">bigtable/filter#interleave</a> filter, each copy of the cell is \ncounted separately.</p>","code":"var filter = [\n  {\n    column: {\n      cellLimit: 2\n    }\n  }\n];"},{"caption":"<p><h4>Column Ranges</h4> \nSpecifies a contiguous range of columns within a single column family. \nThe range spans from <column_family>:<start_qualifier> to \n<column_family>:<end_qualifier>, where both bounds can be either \ninclusive or exclusive. By default both are inclusive. \nWhen the <code>start</code> bound is omitted it is interpreted as an empty string. \nWhen the <code>end</code> bound is omitted it is interpreted as Infinity.</p>","code":"var filter = [\n  {\n    column: {\n      family: 'follows',\n      start: 'gwashington',\n      end: 'tjefferson'\n    }\n  }\n];"},{"caption":"<p>By default, both the <code>start</code> and <code>end</code> bounds are inclusive. You can \noverride these by providing an object explicity stating whether or not it \nis <code>inclusive</code>.</p>","code":"var filter = [\n  {\n    column: {\n      family: 'follows',\n      start: {\n        value: 'gwashington',\n        inclusive: false\n      },\n      end: {\n        value: 'jadams',\n        inclusive: false\n      }\n    }\n  }\n];"}],"params":[],"exceptions":[],"returns":[]},{"id":"condition","name":"condition","type":"instance","description":"<p>A filter which evaluates one of two possible filters, depending on whether or not a <code>test</code> filter outputs any cells from the input row.</p><p>IMPORTANT NOTE: The <code>test</code> filter does not execute atomically with the pass and fail filters, which may lead to inconsistent or unexpected results. Additionally, condition filters have poor performance, especially when filters are set for the fail condition.</p>","source":"lib/bigtable/filter.js#L445","resources":[],"examples":[{"caption":"<p>In the following example we're creating a filter that will check if \n<code>gwashington</code> follows <code>tjefferson</code>. If he does, we'll get all of the \n<code>gwashington</code> data. If he does not, we'll instead return all of the \n<code>tjefferson</code> data.</p>","code":"var filter = [\n  {\n    condition: {\n      // If `test` outputs any cells, then `pass` will be evaluated on the\n      // input row. Otherwise `fail` will be evaluated.\n      test: [\n        {\n          row: 'gwashington'\n        },\n        {\n          family: 'follows'\n        },\n        {\n          column: 'tjefferson'\n        }\n      ],\n\n      // If omitted, no results will be returned in the true case.\n      pass: [\n        {\n          row: 'gwashington'\n        }\n      ],\n\n      // If omitted, no results will be returned in the false case.\n      fail: [\n        {\n          row: 'tjefferson'\n        }\n      ]\n    }\n  }\n];"}],"params":[],"exceptions":[],"returns":[]},{"id":"family","name":"family","type":"instance","description":"<p>Matches only cells from columns whose families satisfy the given RE2 regex. For technical reasons, the regex must not contain the &#39;:&#39; character, even if it is not being used as a literal. Note that, since column families cannot contain the new line character &#39;\\n&#39;, it is sufficient to use &#39;.&#39; as a full wildcard when matching column family names.</p>","source":"lib/bigtable/filter.js#L468","resources":[],"examples":[{"code":"var filter = [\n  {\n    family: 'follows'\n  }\n];"}],"params":[],"exceptions":[],"returns":[]},{"id":"interleave","name":"interleave","type":"instance","description":"<p>Applies several filters to the data in parallel and combines the results.</p><p>The elements of &quot;filters&quot; all process a copy of the input row, and the results are pooled, sorted, and combined into a single output row. If multiple cells are produced with the same column and timestamp, they will all appear in the output row in an unspecified mutual order. All interleaved filters are executed atomically.</p>","source":"lib/bigtable/filter.js#L511","resources":[],"examples":[{"caption":"<p>In the following example, we're creating a filter that will retrieve \nresults for entries that were either created between December 17th, 2015 \nand March 22nd, 2016 or entries that have data for <code>follows:tjefferson</code>.</p>","code":"var filter = [\n  {\n    interleave: [\n      [\n        {\n          time: {\n            start: new Date('December 17, 2015'),\n            end: new Date('March 22, 2016')\n          }\n        }\n      ],\n      [\n        {\n          family: 'follows'\n        },\n        {\n          column: 'tjefferson'\n        }\n      ]\n    ]\n  }\n];"}],"params":[],"exceptions":[],"returns":[]},{"id":"label","name":"label","type":"instance","description":"<p>Applies the given label to all cells in the output row. This allows the client to determine which results were produced from which part of the filter.</p><p>Values must be at most 15 characters in length, and match the RE2 pattern [a-z0-9\\-]+</p><p>Due to a technical limitation, it is not currently possible to apply multiple labels to a cell. As a result, a chain filter may have no more than one sub-filter which contains a apply label transformer. It is okay for an <a data-custom-type=\"bigtable/filter\" data-method=\"interleave\">bigtable/filter#interleave</a> to contain multiple apply label transformers, as they will be applied to separate copies of the input. This may be relaxed in the future.</p>","source":"lib/bigtable/filter.js#L537","resources":[],"examples":[{"code":"var filter = {\n  label: 'my-label'\n};"}],"params":[],"exceptions":[],"returns":[]},{"id":"row","name":"row","type":"instance","description":"","source":"lib/bigtable/filter.js#L644","resources":[],"examples":[{"caption":"<p>Matches only cells from rows whose keys satisfy the given RE2 regex. In \nother words, passes through the entire row when the key matches, and \notherwise produces an empty row. \nNote that, since row keys can contain arbitrary bytes, the '\\C' escape \nsequence must be used if a true wildcard is desired. The '.' character \nwill not match the new line character '\\n', which may be present in a \nbinary key. \nIn the following example we'll use a regular expression to match all \nrow keys ending with the letters \"on\", which would then yield \n<code>gwashington</code> and <code>tjefferson</code>.</p>","code":"var filter = [\n  {\n    row: /[a-z]+on$/\n  }\n];"},{"caption":"<p>You can also provide a string (optionally containing regexp characters) \nfor simple key filters.</p>","code":"var filter = [\n  {\n    row: 'gwashington'\n  }\n];"},{"caption":"<p>Or you can provide an array of strings if you wish to match against \nmultiple keys.</p>","code":"var filter = [\n  {\n    row: [\n      'gwashington',\n      'tjefferson'\n    ]\n  }\n];"},{"caption":"<p>If you wish to use additional row filters, consider using the following \nsyntax.</p>","code":"var filter = [\n  {\n    row: {\n      key: 'gwashington'\n    }\n  }\n];"},{"caption":"<p><h4>Row Samples</h4> \nMatches all cells from a row with probability p, and matches no cells \nfrom the row with probability 1-p.</p>","code":"var filter = [\n  {\n    row: {\n      sample: 1\n    }\n  }\n];"},{"caption":"<p><h4>Row Cell Offsets</h4> \nSkips the first N cells of each row, matching all subsequent cells. \nIf duplicate cells are present, as is possible when using an \n<a data-custom-type=\"bigtable/filter\" data-method=\"interleave\">bigtable/filter#interleave</a>, each copy of the cell is counted \nseparately.</p>","code":"var filter = [\n  {\n    row: {\n      cellOffset: 2\n    }\n  }\n];"},{"caption":"<p><h4>Row Cell Limits</h4> \nMatches only the first N cells of each row. \nIf duplicate cells are present, as is possible when using an \n<a data-custom-type=\"bigtable/filter\" data-method=\"interleave\">bigtable/filter#interleave</a>, each copy of the cell is counted \nseparately.</p>","code":"var filter = [\n  {\n    row: {\n      cellLimit: 4\n    }\n  }\n];"}],"params":[],"exceptions":[],"returns":[]},{"id":"sink","name":"sink","type":"instance","description":"<p>This filter is meant for advanced use only. Hook for introspection into the filter. Outputs all cells directly to the output of the read rather than to any parent filter.</p><p>Despite being excluded by the qualifier filter, a copy of every cell that reaches the sink is present in the final result.</p><p>As with an <a data-custom-type=\"bigtable/filter\" data-method=\"interleave\">bigtable/filter#interleave</a> filter, duplicate cells are possible, and appear in an unspecified mutual order.</p><p>Cannot be used within <a data-custom-type=\"bigtable/filter\" data-method=\"condition\">bigtable/filter#condition</a> filter.</p>","source":"lib/bigtable/filter.js#L740","resources":[],"examples":[{"caption":"<p>Using the following filter, a copy of every cell that reaches the sink is \npresent in the final result, despite being excluded by the qualifier \nfilter</p>","code":"var filter = [\n  {\n    family: 'follows'\n  },\n  {\n    interleave: [\n      [\n        {\n          all: true\n        }\n      ],\n      [\n        {\n          label: 'prezzy'\n        },\n        {\n          sink: true\n        }\n      ]\n    ]\n  },\n  {\n    column: 'gwashington'\n  }\n];"},{"caption":"<p>As with an <a data-custom-type=\"bigtable/filter\" data-method=\"interleave\">bigtable/filter#interleave</a> filter, duplicate cells \nare possible, and appear in an unspecified mutual order. In this case we \nhave a duplicates with multiple <code>gwashington</code> columns because one copy \npassed through the <a data-custom-type=\"bigtable/filter\" data-method=\"all\">bigtable/filter#all</a> filter while the other was \npassed through the <a data-custom-type=\"bigtable/filter\" data-method=\"label\">bigtable/filter#label</a> and sink. Note that one \ncopy has label \"prezzy\" while the other does not.</p>"}],"params":[],"exceptions":[],"returns":[]},{"id":"time","name":"time","type":"instance","description":"<p>Matches only cells with timestamps within the given range.</p>","source":"lib/bigtable/filter.js#L757","resources":[],"examples":[{"code":"var filter = [\n  {\n    time: {\n      start: new Date('December 17, 2006 03:24:00'),\n      end: new Date()\n    }\n  }\n];"}],"params":[],"exceptions":[],"returns":[]},{"id":"value","name":"value","type":"instance","description":"<p>Matches only cells with values that satisfy the given regular expression. Note that, since cell values can contain arbitrary bytes, the &#39;\\C&#39; escape sequence must be used if a true wildcard is desired. The &#39;.&#39; character will not match the new line character &#39;\\n&#39;, which may be present in a binary value.</p>","source":"lib/bigtable/filter.js#L863","resources":[],"examples":[{"code":"var filter = [\n  {\n    value: /[0-9]/\n  }\n];"},{"caption":"<p>You can also provide a string (optionally containing regexp characters) \nfor value filters.</p>","code":"var filter = [\n  {\n    value: '1'\n  }\n];"},{"caption":"<p>Or you can provide an array of strings if you wish to match against \nmultiple values.</p>","code":"var filter = [\n  {\n    value: ['1', '9']\n  }\n];"},{"caption":"<p><h4>Value Ranges</h4> \nSpecifies a contigous range of values. \nWhen the <code>start</code> bound is omitted it is interpreted as an empty string. \nWhen the <code>end</code> bound is omitted it is interpreted as Infinity.</p>","code":"var filter = [\n  {\n    value: {\n      start: '1',\n      end: '9'\n    }\n  }\n];"},{"caption":"<p>By default, both the <code>start</code> and <code>end</code> bounds are inclusive. You can \noverride these by providing an object explicity stating whether or not it \nis <code>inclusive</code>.</p>","code":"var filter = [\n  {\n    value: {\n      start: {\n        value: '1',\n        inclusive: false\n      },\n      end: {\n        value: '9',\n        inclusive: false\n      }\n    }\n  }\n];"},{"caption":"<p><h4>Strip Values</h4> \nReplaces each cell's value with an emtpy string.</p>","code":"var filter = [\n  {\n    value: {\n      strip: true\n    }\n  }\n];"}],"params":[],"exceptions":[],"returns":[]}]}