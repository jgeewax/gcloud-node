{"id":"bigtable","type":"class","name":"Bigtable","description":"<p>The <code>gcloud.bigtable</code> object allows you interact with Google Cloud Bigtable.</p><p>To learn more about Bigtable, read the <a href=\"https://cloud.google.com/bigtable/docs/concepts\">Google Cloud Bigtable Concepts Overview</a></p>","source":"lib/bigtable/index.js","parent":null,"children":["bigtable/family","bigtable/filter","bigtable/row","bigtable/table"],"methods":[{"id":"Bigtable","name":"Bigtable","type":"constructor","description":"<p>Interact with <a href=\"https://cloud.google.com/bigtable/\">Google Cloud Bigtable</a>.</p>","source":"lib/bigtable/index.js#L278","resources":[{"title":"Creating a Cloud Bigtable Cluster","link":"https://cloud.google.com/bigtable/docs/creating-compute-instance"}],"examples":[{"code":"var gcloud = require('gcloud')({\n  keyFilename: '/path/to/keyfile.json',\n  projectId: 'my-project'\n});\n\nvar bigtable = gcloud.bigtable({\n  zone: 'us-central1-b',\n  cluster: 'gcloud-node'\n});"},{"caption":"<p><h3>Creating a Cluster</h3> \nBefore you create your table, you first need to create a Bigtable Cluster \nfor the table to be served from. This can be done from either the \nGoogle Cloud Platform Console or the <code>gcloud</code> cli tool. Please refer to \nthe <a href=\"https://cloud.google.com/bigtable/docs/creating-compute-instance\"> \nofficial Bigtable documentation</a> for more information.</p>"},{"caption":"<p><h3>Creating Tables</h3> \nAfter creating your cluster and enabling the Bigtable APIs, you are now \nready to create your table with <a data-custom-type=\"bigtable\" data-method=\"createTable\">bigtable#createTable</a>.</p>","code":"bigtable.createTable('prezzy', function(err, table) {\n  // `table` is your newly created Table object.\n});"},{"caption":"<p><h3>Creating Column Families</h3> \nColumn families are used to group together various pieces of data within \nyour table. You can think of column families as a mechanism to categorize \nall of your data. \nWe can create a column family with <a data-custom-type=\"bigtable/table\" data-method=\"createFamily\">bigtable/table#createFamily</a>.</p>","code":"var table = bigtable.table('prezzy');\n\ntable.createFamily('follows', function(err, family) {\n  // `family` is your newly created Family object.\n});"},{"caption":"<p><h3>Creating Rows</h3> \nNew rows can be created within your table using \n<a data-custom-type=\"bigtable/table\" data-method=\"insert\">bigtable/table#insert</a>. You must provide a unique key for each row \nto be inserted, this key can then be used to retrieve your row at a later \ntime. \nWith Bigtable, all columns have a unique id composed of a column family \nand a column qualifier. In the example below <code>follows</code> is the column \nfamily and <code>tjefferson</code> is the column qualifier. Together they could be \nreferred to as <code>follows:tjefferson</code>.</p>","code":"var rows = [\n  {\n    key: 'wmckinley',\n    data: {\n      follows: {\n        tjefferson: 1\n      }\n    }\n  }\n];\n\ntable.insert(rows, function(err) {\n  if (!err) {\n    // Your rows were successfully inserted.\n  }\n});"},{"caption":"<p><h3>Retrieving Rows</h3> \nIf you're anticipating a large number of rows to be returned, we suggest \nusing the <a data-custom-type=\"bigtable/table\" data-method=\"getRows\">bigtable/table#getRows</a> streaming API.</p>","code":"table.getRows()\n  .on('error', console.error)\n  .on('data', function(row) {\n    // `row` is a Row object.\n  });"},{"caption":"<p>If you're not anticpating a large number of results, a callback mode \nis also available.</p>","code":"var callback = function(err, rows) {\n  // `rows` is an array of Row objects.\n};\n\ntable.getRows(callback);"},{"caption":"<p>A range of rows can be retrieved by providing <code>start</code> and <code>end</code> row keys.</p>","code":"var options = {\n  start: 'gwashington',\n  end: 'wmckinley'\n};\n\ntable.getRows(options, callback);"},{"caption":"<p>Retrieve an individual row with <a data-custom-type=\"bigtable/row\" data-method=\"get\">bigtable/row#get</a>.</p>","code":"var row = table.row('alincoln');\n\nrow.get(function(err) {\n  // `row.data` is now populated.\n});"},{"caption":"<p><h3>Accessing Row Data</h3> \nWhen retrieving rows, upon success the <code>row.data</code> property will be \npopulated by an object. That object will contain additional objects \nfor each family in your table that the row has data for. \nBy default, when retrieving rows, each column qualifier will provide you \nwith all previous versions of the data. So your <code>row.data</code> object could \nresemble the following.</p>","code":"console.log(row.data);\n// {\n//   follows: {\n//     wmckinley: [\n//       {\n//         value: 1,\n//         timestamp: 1466017315951\n//       }, {\n//         value: 2,\n//         timestamp: 1458619200000\n//       }\n//     ]\n//   }\n// }"},{"caption":"<p>The <code>timestamp</code> field can be used to order cells from newest to oldest. \nIf you only wish to retrieve the most recent version of the data, you \ncan specify the number of cells with a <a data-custom-type=\"bigtable/filter\" data-method=\"\">bigtable/filter</a> object.</p>","code":"var filter = [\n  {\n    column: {\n      cellLimit: 1\n    }\n  }\n];\n\ntable.getRows({\n  filter: filter\n}, callback);"},{"caption":"<p><h3>Deleting Row Data</h3> \nWe can delete all of an individual row's cells using \n<a data-custom-type=\"bigtable/row\" data-method=\"delete\">bigtable/row#delete</a>.</p>","code":"var callback = function(err) {\n  if (!err) {\n    // All cells for this row were deleted successfully.\n  }\n};\n\nrow.delete(callback);"},{"caption":"<p>To delete a specific set of cells, we can provide an array of \ncolumn families and qualifiers.</p>","code":"var cells = [\n  'follows:gwashington',\n  'traits'\n];\n\nrow.delete(cells, callback);"},{"caption":"<p><h3>Deleting Rows</h3> \nIf you wish to delete multiple rows entirely, we can do so with \n<a data-custom-type=\"bigtable/table\" data-method=\"deleteRows\">bigtable/table#deleteRows</a>. You can provide this method with a \nrow key prefix.</p>","code":"var options = {\n  prefix: 'gwash'\n};\n\ntable.deleteRows(options, function(err) {\n  if (!err) {\n    // Rows were deleted successfully.\n  }\n});"},{"caption":"<p>If you omit the prefix, you can delete all rows in your table.</p>","code":"table.deleteRows(function(err) {\n  if (!err) {\n    // All rows were deleted successfully.\n  }\n});"}],"params":[{"name":"options","description":"<ul> <li><a href=\"#/docs\">Configuration object</a>.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.cluster","description":"<ul> <li>The cluster name that hosts your tables.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.zone","description":"<ul> <li>The zone in which your cluster resides.</li> </ul> ","types":["string","<a data-custom-type=\"compute/zone\" data-method=\"\">compute/zone</a>"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"createTable","name":"createTable","type":"instance","description":"<p>Create a table on your Bigtable cluster.</p>","source":"lib/bigtable/index.js#L370","resources":[{"title":"Designing Your Schema","link":"https://cloud.google.com/bigtable/docs/schema-design"},{"title":"Splitting Keys","link":"https://cloud.google.com/bigtable/docs/managing-tables#splits"}],"examples":[{"code":"var callback = function(err, table, apiResponse) {\n  // `table` is a Table object.\n};\n\nbigtable.createTable('prezzy', callback);"},{"caption":"<p>Pre-split the table based on the row key to spread the load across \nmultiple Cloud Bigtable nodes.</p>","code":"var options = {\n  splits: ['10', '20']\n};\n\nbigtable.createTable('prezzy', options, callback);"}],"params":[{"name":"name","description":"<ul> <li>The name of the table.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options","description":"<ul> <li>Table creation options.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.operation","description":"<ul> <li>Operation used for table that has already been queued to be created.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.splits","description":"<ul> <li>Initial <a href=\"https://cloud.google.com/bigtable/docs/managing-tables#splits\">split keys</a>.</li> </ul> ","types":["string[]"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.table","description":"<ul> <li>The newly created table.</li> </ul> ","types":["<a data-custom-type=\"bigtable/table\" data-method=\"\">bigtable/table</a>"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"getTables","name":"getTables","type":"instance","description":"<p>Get Table objects for all the tables in your Bigtable cluster.</p>","source":"lib/bigtable/index.js#L431","resources":[],"examples":[{"code":"bigtable.getTables(function(err, tables) {\n  if (!err) {\n    // `tables` is an array of Table objects.\n  }\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.tables","description":"<ul> <li>List of all Tables.</li> </ul> ","types":["<a data-custom-type=\"bigtable/table[]\" data-method=\"\">bigtable/table[]</a>"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"table","name":"table","type":"instance","description":"<p>Get a reference to a Bigtable table.</p>","source":"lib/bigtable/index.js#L470","resources":[],"examples":[{"code":"var table = bigtable.table('presidents');"}],"params":[{"name":"name","description":"<ul> <li>The name of the table.</li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"bigtable/table\" data-method=\"\">bigtable/table</a>"],"description":""}]}]}