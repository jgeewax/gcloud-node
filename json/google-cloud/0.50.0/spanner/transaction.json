{"id":"spanner/transaction","type":"class","name":"Transaction","overview":"<p>\n  This class allows you interact with Cloud Spanner.\n</p>\n\n\n<div class=\"notice\">\n  <strong><code>google-cloud</code> is deprecated</strong>\n  <p>\n    Due to the scope of our API rapidly increasing, you may notice a decrease in performance if you continue to use the bundled module, `google-cloud`.\n  </p>\n  <p>\n    Going forward, please install only the individual service modules that you need, such as <code>google-cloud</code>.\n  </p>\n  <p>\n    The instructions below are here for reference, however, we will soon stop releasing updates to the bundled package.\n  </p>\n</div>\n\n\n<p>\n  First, install <code>google-cloud</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save google-cloud</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>google-cloud</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Google Cloud Platform</h4>\n<div hljs language=\"javascript\">\nvar gcloud = require('google-cloud');\nvar spanner = gcloud.spanner();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar gcloud = require('google-cloud');\nvar spanner = gcloud.spanner({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>google-cloud</code> are outlined in our <a href=\"#/docs/google-cloud/0.50.0/guides/authentication\">Authentication guide</a>.\n</p>\n","description":"","source":"packages/spanner/src/transaction.js","parent":"spanner","children":[],"methods":[{"id":"Transaction","name":"Transaction","type":"constructor","description":"<p>Use a Transaction object to read and write against inside of your Cloud Spanner database.</p><p><strong>This object is created and returned from <a data-custom-type=\"database/runTransaction\" data-method=\"\">database/runTransaction</a>.</strong></p>","source":"packages/spanner/src/transaction.js#L92","resources":[],"examples":[{"code":"var instance = spanner.instance('my-instance');\nvar database = instance.database('my-database');\n\ndatabase.runTransaction(function(err, transaction) {\n  // The `transaction` object is ready for use.\n});"}],"params":[{"name":"options","description":"<ul> <li><a href=\"https://cloud.google.com/spanner/docs/timestamp-bounds\">Transaction options</a>.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.exactStaleness","description":"<ul> <li>Executes all reads at the timestamp that is <code>exactStaleness</code> old.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"options.minReadTimestamp","description":"<ul> <li>Executes all reads at a timestamp greater than or equal to this. This option can only be used for  single-use transactions.</li> </ul> ","types":["date"],"optional":false,"nullable":false},{"name":"options.maxStaleness","description":"<ul> <li>Read data at a timestamp that is greater than or equal to this. This option can only be used for  single-use transactions.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"options.readTimestamp","description":"<ul> <li>Execute all reads at the given timestamp.</li> </ul> ","types":["date"],"optional":false,"nullable":false},{"name":"options.returnReadTimestamp","description":"<ul> <li>If <code>true</code>, returns the read timestamp.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"options.strong","description":"<ul> <li>Read at the timestamp where all previously committed transactions are visible.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"commit","name":"commit","type":"instance","description":"<p>Commit the transaction.</p>","source":"packages/spanner/src/transaction.js#L225","resources":[{}],"examples":[{"code":"database.runTransaction(function(err, transaction) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  // Queue a mutation (note that there is no callback passed to `insert`).\n  transaction.insert('Singers', {\n    SingerId: 'Id3b',\n    Name: 'Joe West'\n  });\n\n  // Commit the transaction.\n  transaction.commit(function(err) {\n    if (!err) {\n      // Mutations were committed successfully.\n    }\n  });\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"rollback","name":"rollback","type":"instance","description":"<p>Roll back a transaction, releasing any locks it holds. It is a good idea to call this for any transaction that includes one or more queries that you decide not to commit.</p>","source":"packages/spanner/src/transaction.js#L325","resources":[{}],"examples":[{"code":"database.runTransaction(function(err, transaction) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  transaction.rollback(function(err) {\n    if (!err) {\n      // Transaction rolled back successfully.\n    }\n  });\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"run","name":"run","type":"instance","description":"<p>Execute a SQL statement on this database inside of a transaction.</p><h4>Performance Considerations</h4> <p>This method wraps the streaming method, <a data-custom-type=\"spanner/transaction\" data-method=\"run\">spanner/transaction#run</a> for your convenience. All rows will be stored in memory before being released to your callback. If you intend on receiving a lot of results from your query, consider using the streaming method, so you can free each result from memory after consuming it.</p>","source":"packages/spanner/src/transaction.js#L410","resources":[{},{}],"examples":[{"code":"var query = 'SELECT * FROM Singers';\n\ndatabase.runTransaction(function(err, transaction) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  transaction.run(query, function(err, rows) {\n    if (err) {\n      // Error handling omitted.\n    }\n\n    // rows = [\n    //   {\n    //     SingerId: '1',\n    //     Name: 'Eddie Wilson'\n    //   }\n    // ]\n  });\n});"},{"caption":"<p>The SQL query string can contain parameter placeholders. A parameter \nplaceholder consists of '@' followed by the parameter name.</p>","code":"database.runTransaction(function(err, transaction) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  var query = {\n    sql: 'SELECT * FROM Singers WHERE name = @name',\n    params: {\n      name: 'Eddie Wilson'\n    }\n  };\n\n  transaction.run(query, function(err, rows) {});\n});"}],"params":[{"name":"query","description":"<ul> <li>A SQL query or <a href=\"https://cloud.google.com/spanner/docs/reference/rpc/google.spanner.v1#google.spanner.v1.ExecuteSqlRequest\"><code>ExecuteSqlRequest</code></a>  object.</li> </ul> ","types":["string","object"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.rows","description":"<ul> <li>The results from the SQL query.</li> </ul> ","types":["object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"runStream","name":"runStream","type":"instance","description":"<p>Create a readable object stream to receive resulting rows from a SQL statement.</p>","source":"packages/spanner/src/transaction.js#L494","resources":[{},{}],"examples":[{"code":"var query = 'SELECT * FROM Singers';\n\ndatabase.runTransaction(function(err, transaction) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  transaction.runStream(query)\n    .on('error', function(err) {})\n    .on('data', function(row) {\n      // row = {\n      //   SingerId: '1',\n      //   Name: 'Eddie Wilson'\n      // }\n    })\n    .on('end', function() {\n      // All results retrieved.\n    });\n});"},{"caption":"<p>The SQL query string can contain parameter placeholders. A parameter \nplaceholder consists of '@' followed by the parameter name.</p>","code":"database.runTransaction(function(err, transaction) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  var query = {\n    sql: 'SELECT * FROM Singers WHERE name = @name',\n    params: {\n      name: 'Eddie Wilson'\n    }\n  };\n\n  transaction.runStream(query)\n    .on('error', function(err) {})\n    .on('data', function(row) {})\n    .on('end', function() {});\n});"},{"caption":"<p>If you anticipate many results, you can end a stream early to prevent \nunnecessary processing and API requests.</p>","code":"database.runTransaction(function(err, transaction) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  transaction.runStream(query)\n    .on('data', function(row) {\n      this.end();\n    })\n    .on('end', function() {});\n});"}],"params":[{"name":"query","description":"<ul> <li>A SQL query or <a href=\"https://cloud.google.com/spanner/docs/reference/rpc/google.spanner.v1#google.spanner.v1.ExecuteSqlRequest\"><code>ExecuteSqlRequest</code></a>  object.</li> </ul> ","types":["string","object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["Stream"],"description":""}]},{"id":"end","name":"end","type":"instance","description":"<p>Let the client know you&#39;re done with a particular transaction. This should only be called for read-only transactions.</p>","source":"packages/spanner/src/transaction.js#L579","resources":[],"examples":[{"code":"var options = {\n  readOnly: true\n};\n\ndatabase.runTransaction(options, function(err, transaction) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  transaction.runQuery('SELECT * FROM Singers', function(err, rows) {\n    if (err) {\n      // Error handling omitted.\n    }\n\n    // End the transaction. Note that no callback is provided.\n    transaction.end();\n  });\n});"}],"params":[],"exceptions":[],"returns":[]},{"id":"createReadStream","name":"createReadStream","type":"instance","description":"<p>Create a readable object stream to receive rows from the database using key lookups and scans.</p>","source":"packages/spanner/src/transaction-request.js#L209","resources":[{},{}],"examples":[{"code":"database.runTransaction(function(err, transaction) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  transaction.createReadStream('Singers', {\n      keys: ['1'],\n      columns: ['SingerId', 'name']\n    })\n    .on('error', function(err) {})\n    .on('data', function(row) {\n      // row = [\n      //   {\n      //     name: 'SingerId',\n      //     value: '1'\n      //   },\n      //   {\n      //     name: 'Name',\n      //     value: 'Eddie Wilson'\n      //   }\n      // ]\n    })\n    .on('end', function() {\n      // All results retrieved.\n    });\n});"},{"caption":"<p>Provide an array for <code>query.keys</code> to read with a composite key.</p>","code":"var query = {\n  keys: [\n    [\n      'Id1',\n      'Name1'\n    ],\n    [\n      'Id2',\n      'Name2'\n    ]\n  ],\n  // ...\n};"},{"caption":"<p>Rows are returned as an array of object arrays. Each object has a <code>name</code> \nand <code>value</code> property. To get a serialized object, call <code>toJSON()</code>.</p>","code":"database.runTransaction(function(err, transaction) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  transaction.createReadStream('Singers', {\n      keys: ['1'],\n      columns: ['SingerId', 'name']\n    })\n    .on('error', function(err) {})\n    .on('data', function(row) {\n      // row.toJSON() = {\n      //   SingerId: '1',\n      //   Name: 'Eddie Wilson'\n      // }\n    })\n    .on('end', function() {\n      // All results retrieved.\n    });\n});"},{"caption":"<p>If you anticipate many results, you can end a stream early to prevent \nunnecessary processing and API requests.</p>","code":"database.runTransaction(function(err, transaction) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  transaction.createReadStream('Singers', {\n      keys: ['1'],\n      columns: ['SingerId', 'name']\n    })\n    .on('data', function(row) {\n      this.end();\n    });\n});"}],"params":[{"name":"table","description":"<ul> <li>The table to read from.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"query","description":"<ul> <li>Configuration object. See <a href=\"https://cloud.google.com/spanner/docs/reference/rpc/google.spanner.v1#google.spanner.v1.ReadRequest\"><code>ReadRequest</code></a>.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"query.columns","description":"<ul> <li>The columns of the table to be returned for each row matching this query.</li> </ul> ","types":["string[]"],"optional":false,"nullable":false},{"name":"query.keys","description":"<ul> <li>The primary keys of the rows in this table to be yielded. If using a composite key, provide an array within this array.  See the example below.</li> </ul> ","types":["*[]","Array.<*>[]"],"optional":false,"nullable":false},{"name":"query.index","description":"<ul> <li>The name of an index on the table.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"query.limit","description":"<ul> <li>The number of rows to yield.</li> </ul> ","types":["number"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Stream"],"description":""}]},{"id":"deleteRows","name":"deleteRows","type":"instance","description":"<p>Delete rows from a table.</p>","source":"packages/spanner/src/transaction-request.js#L295","resources":[{}],"examples":[{"code":"var keys = ['Id1', 'Id2', 'Id3'];\n\ndatabase.runTransaction(function(err, transaction) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  // Queue this mutation until later calling `commit`.\n  // Note that a callback is not passed to `deleteRows`.\n  transaction.deleteRows('Singers', keys);\n\n  // Commit the transaction.\n  transaction.commit(function(err) {\n    if (!err) {\n      // The rows were deleted successfully.\n    }\n  });\n});"},{"caption":"<p>Provide an array for <code>keys</code> to delete rows with a composite key.</p>","code":"var keys = [\n  [\n    'Id1',\n    'Name1'\n  ],\n  [\n    'Id2',\n    'Name2'\n  ]\n];"}],"params":[{"name":"table","description":"<ul> <li>The name of the table.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"keys","description":"<ul> <li>The keys for the rows to delete. If using a composite key, provide an array within this array. See the example below.</li> </ul> ","types":["*[]","Array.<*>[]"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"insert","name":"insert","type":"instance","description":"<p>Insert rows of data into this table.</p>","source":"packages/spanner/src/transaction-request.js#L387","resources":[{}],"examples":[{"code":"var row = {\n  SingerId: 'Id3',\n  Name: 'Eddie Wilson'\n};\n\ndatabase.runTransaction(function(err, transaction) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  // Queue this mutation until later calling `commit`.\n  // Note that a callback is not passed to `insert`.\n  transaction.insert('Singers', row);\n\n  // Commit the transaction.\n  transaction.commit(function(err) {\n    if (!err) {\n      // The row was inserted successfully.\n    }\n  });\n});"},{"caption":"<p>Multiple rows can be inserted at once.</p>","code":"var row2 = {\n  SingerId: 'Id3b',\n  Name: 'Joe West'\n};\n\ndatabase.runTransaction(function(err, transaction) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  // Queue multiple mutations until later calling `commit`.\n  // Note that a callback is not passed to `insert`.\n  transaction.insert('Singers', [\n    row,\n    row2\n  ]);\n\n  // Commit the transaction.\n  transaction.commit(function(err) {\n    if (!err) {\n      // The rows were inserted successfully.\n    }\n  });\n});"}],"params":[{"name":"table","description":"<ul> <li>The name of the table.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"keyVals","description":"<ul> <li>A map of names to values of data to insert into this table.</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"read","name":"read","type":"instance","description":"<p>Performs a read request against the specified Table.</p>","source":"packages/spanner/src/transaction-request.js#L487","resources":[],"examples":[{"code":"var query = {\n  keys: ['1'],\n  columns: ['SingerId', 'name']\n};\n\ndatabase.runTransaction(function(err, transaction) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  transaction.read('Singers', query, function(err, rows) {\n    if (err) {\n      // Error handling omitted.\n    }\n\n    var row1 = rows[0];\n\n    // row1 = [\n    //   {\n    //     name: 'SingerId',\n    //     value: '1'\n    //   },\n    //   {\n    //     name: 'Name',\n    //     value: 'Eddie Wilson'\n    //   }\n    // ]\n\n    // End the transaction. Note that no callback is provided.\n    transaction.end();\n  });\n});"},{"caption":"<p>Provide an array for <code>query.keys</code> to read with a composite key.</p>","code":"var query = {\n  keys: [\n    [\n      'Id1',\n      'Name1'\n    ],\n    [\n      'Id2',\n      'Name2'\n    ]\n  ],\n  // ...\n};"},{"caption":"<p>Rows are returned as an array of object arrays. Each object has a <code>name</code> \nand <code>value</code> property. To get a serialized object, call <code>toJSON()</code>.</p>","code":"database.runTransaction(function(err, transaction) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  transaction.read('Singers', query, function(err, rows) {\n    if (err) {\n      // Error handling omitted.\n    }\n\n    var row1 = rows[0];\n\n    // row1.toJSON() = {\n    //   SingerId: '1',\n    //   Name: 'Eddie Wilson'\n    // }\n\n    // End the transaction. Note that no callback is provided.\n    transaction.end();\n  });\n});"}],"params":[{"name":"table","description":"<ul> <li>The table to read from.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"query","description":"<ul> <li>Configuration object, describing what to read from the table.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"query.columns","description":"<ul> <li>The columns of the table to be returned for each row matching this query.</li> </ul> ","types":["string[]"],"optional":false,"nullable":false},{"name":"query.keys","description":"<ul> <li>The primary keys of the rows in this table to be yielded. If using a composite key, provide an array within this array.  See the example below.</li> </ul> ","types":["*[]","Array.<*>[]"],"optional":false,"nullable":false},{"name":"query.index","description":"<ul> <li>The name of an index on the table.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.rows","description":"<ul> <li>Rows are returned as an array of object arrays. Each object has a <code>name</code> and <code>value</code> property. To get a  serialized object, call <code>toJSON()</code>.</li> </ul> ","types":["array[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"replace","name":"replace","type":"instance","description":"<p>Replace rows of data within a table.</p>","source":"packages/spanner/src/transaction-request.js#L536","resources":[{}],"examples":[{"code":"var row = {\n  SingerId: 'Id3',\n  Name: 'Joe West'\n};\n\ndatabase.runTransaction(function(err, transaction) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  // Queue this mutation until later calling `commit`.\n  // Note that a callback is not passed to `replace`.\n  transaction.replace('Singers', row);\n\n  // Commit the transaction.\n  transaction.commit(function(err) {\n    if (!err) {\n      // The row was replaced successfully.\n    }\n  });\n});"}],"params":[{"name":"table","description":"<ul> <li>The table to read from.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"keyVals","description":"<ul> <li>A map of names to values of data to insert into this table.</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"update","name":"update","type":"instance","description":"<p>Update rows of data within a table.</p>","source":"packages/spanner/src/transaction-request.js#L594","resources":[{}],"examples":[{"code":"var row = {\n  SingerId: 'Id3',\n  Name: 'Joe West'\n};\n\ndatabase.runTransaction(function(err, transaction) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  // Queue this mutation until later calling `commit`.\n  // Note that a callback is not passed to `update`.\n  transaction.update('Singers', row);\n\n  // Commit the transaction.\n  transaction.commit(function(err) {\n    if (!err) {\n      // The row was updated successfully.\n    }\n  });\n});"}],"params":[{"name":"table","description":"<ul> <li>The table to read from.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"keyVals","description":"<ul> <li>A map of names to values of data to insert into this table.</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"upsert","name":"upsert","type":"instance","description":"<p>Insert or update rows of data within a table.</p>","source":"packages/spanner/src/transaction-request.js#L634","resources":[{}],"examples":[{"code":"var row = {\n  SingerId: 'Id3',\n  Name: 'Joe West'\n};\n\ndatabase.runTransaction(function(err, transaction) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  // Queue this mutation until later calling `commit`.\n  // Note that a callback is not passed to `upsert`.\n  transaction.upsert('Singers', row);\n\n  // Commit the transaction.\n  transaction.commit(function(err) {\n    if (!err) {\n      // The row was updated or inserted successfully.\n    }\n  });\n});"}],"params":[{"name":"table","description":"<ul> <li>The table to read from.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"keyVals","description":"<ul> <li>A map of names to values of data to insert into this table.</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]}],"path":"transaction.json"}