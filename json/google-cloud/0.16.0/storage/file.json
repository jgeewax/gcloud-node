{"id":"storage/file","type":"class","name":"File","description":null,"source":"/lib/storage/file.js#L71","parent":"storage","children":[],"methods":[{"id":"File","name":"File","type":"constructor","description":"<p>A File object is created from your Bucket object using <a data-custom-type=\"storage/bucket\" data-method=\"file\">storage/bucket#file</a>.</p>","source":"/lib/storage/file.js#L71","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"acl","name":"acl","type":"instance","description":"<p>Google Cloud Storage uses access control lists (ACLs) to manage object and bucket access. ACLs are the mechanism you use to share objects with other users and allow other users to access your buckets and objects.</p><p>An ACL consists of one or more entries, where each entry grants permissions to a scope. Permissions define the actions that can be performed against an object or bucket (for example, <code>READ</code> or <code>WRITE</code>); the scope defines who the permission applies to (for example, a specific user or group of users).</p><p>For more detailed information, see <a href=\"http://goo.gl/6qBBPO\">About Access Control Lists</a>.</p><p>The <code>acl</code> object on a File instance provides methods to get you a list of the ACLs defined on your bucket, as well as set, update, and delete them.</p>","source":"/lib/storage/file.js#L121","resources":[],"examples":[{"caption":"<p>Make a file publicly readable.</p>","code":"var gcs = gcloud.storage({\n  projectId: 'grape-spaceship-123'\n});\n\nvar myFile = gcs.bucket('my-bucket').file('my-file');\n\n myFile.acl.add({\n  scope: 'allUsers',\n  role: gcs.acl.READER_ROLE\n}, function(err, aclObject) {});"}],"params":[],"exceptions":[],"returns":[]},{"id":"copy","name":"copy","type":"instance","description":"<p>Copy this file to another file. By default, this will copy the file to the same bucket, but you can choose to copy it to another Bucket by providing either a Bucket or File object.</p>","source":"/lib/storage/file.js#L193","resources":[],"examples":[{"caption":"<p>You can pass in a variety of types for the destination. \nFor all of the below examples, assume we are working with the following \nBucket and File objects.</p>","code":"var bucket = gcs.bucket('my-bucket');\nvar file = bucket.file('my-image.png');"},{"caption":"<p>If you pass in a string for the destination, the file is copied to its \ncurrent bucket, under the new name provided.</p>","code":"file.copy('my-image-copy.png', function(err, copiedFile, apiResponse) {\n  // `my-bucket` now contains:\n  // - \"my-image.png\"\n  // - \"my-image-copy.png\"\n\n  // `copiedFile` is an instance of a File object that refers to your new\n  // file.\n});"},{"caption":"<p>If you pass in a Bucket object, the file will be copied to that bucket \nusing the same name.</p>","code":"var anotherBucket = gcs.bucket('another-bucket');\nfile.copy(anotherBucket, function(err, copiedFile, apiResponse) {\n  // `my-bucket` still contains:\n  // - \"my-image.png\"\n  //\n  // `another-bucket` now contains:\n  // - \"my-image.png\"\n\n  // `copiedFile` is an instance of a File object that refers to your new\n  // file.\n});"},{"caption":"<p>If you pass in a File object, you have complete control over the new \nbucket and filename.</p>","code":"var anotherFile = anotherBucket.file('my-awesome-image.png');\nfile.copy(anotherFile, function(err, copiedFile, apiResponse) {\n  // `my-bucket` still contains:\n  // - \"my-image.png\"\n  //\n  // `another-bucket` now contains:\n  // - \"my-awesome-image.png\"\n\n  // Note:\n  // The `copiedFile` parameter is equal to `anotherFile`.\n});"}],"params":[{"name":"destination","description":"<ul> <li>Destination file.</li> </ul> ","types":["string","<a data-custom-type=\"storage/bucket\">storage/bucket</a>","<a data-custom-type=\"storage/file\">storage/file</a>"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false}],"exceptions":[{"type":"Error","description":"<p>If the destination file is not provided.</p>"}],"returns":[]},{"id":"move","name":"move","type":"instance","description":"<p>Move this file to another location. By default, this will move the file to the same bucket, but you can choose to move it to another Bucket by providing either a Bucket or File object.</p><p><strong>Warning</strong>: There is currently no atomic <code>move</code> method in the Google Cloud Storage API, so this method is a composition of <a data-custom-type=\"storage/file\" data-method=\"copy\">storage/file#copy</a> (to the new location) and <a data-custom-type=\"storage/file\" data-method=\"delete\">storage/file#delete</a> (from the old location). While unlikely, it is possible that an error returned to your callback could be triggered from either one of these API calls failing, which could leave a duplicate file lingering.</p>","source":"/lib/storage/file.js#L320","resources":[],"examples":[{"caption":"<p>You can pass in a variety of types for the destination. \nFor all of the below examples, assume we are working with the following \nBucket and File objects.</p>","code":"var bucket = gcs.bucket('my-bucket');\nvar file = bucket.file('my-image.png');"},{"caption":"<p>If you pass in a string for the destination, the file is moved to its \ncurrent bucket, under the new name provided.</p>","code":"file.move('my-image-new.png', function(err, destinationFile, apiResponse) {\n  // `my-bucket` no longer contains:\n  // - \"my-image.png\"\n  // but contains instead:\n  // - \"my-image-new.png\"\n\n  // `destinationFile` is an instance of a File object that refers to your\n  // new file.\n});"},{"caption":"<p>If you pass in a Bucket object, the file will be moved to that bucket \nusing the same name.</p>","code":"var anotherBucket = gcs.bucket('another-bucket');\n\nfile.move(anotherBucket, function(err, destinationFile, apiResponse) {\n  // `my-bucket` no longer contains:\n  // - \"my-image.png\"\n  //\n  // `another-bucket` now contains:\n  // - \"my-image.png\"\n\n  // `destinationFile` is an instance of a File object that refers to your\n  // new file.\n});"},{"caption":"<p>If you pass in a File object, you have complete control over the new \nbucket and filename.</p>","code":"var anotherFile = anotherBucket.file('my-awesome-image.png');\n\nfile.move(anotherFile, function(err, destinationFile, apiResponse) {\n  // `my-bucket` no longer contains:\n  // - \"my-image.png\"\n  //\n  // `another-bucket` now contains:\n  // - \"my-awesome-image.png\"\n\n  // Note:\n  // The `destinationFile` parameter is equal to `anotherFile`.\n});"}],"params":[{"name":"destination","description":"<ul> <li>Destination file.</li> </ul> ","types":["string","<a data-custom-type=\"storage/bucket\">storage/bucket</a>","<a data-custom-type=\"storage/file\">storage/file</a>"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false}],"exceptions":[{"type":"Error","description":"<p>If the destination file is not provided.</p>"}],"returns":[]},{"id":"createReadStream","name":"createReadStream","type":"instance","description":"<p>Create a readable stream to read the contents of the remote file. It can be piped to a writable stream or listened to for &#39;data&#39; events to read a file&#39;s contents.</p><p>In the unlikely event there is a mismatch between what you downloaded and the version in your Bucket, your error handler will receive an error with code &quot;CONTENT_DOWNLOAD_MISMATCH&quot;. If you receive this error, the best recourse is to try downloading the file again.</p><p>NOTE: Readable streams will emit the <code>complete</code> event when the file is fully downloaded.</p>","source":"/lib/storage/file.js#L400","resources":[],"examples":[{"caption":"<p><h4>Downloading a File</h4> \nThe example below demonstrates how we can reference a remote file, then \npipe its contents to a local file. This is effectively creating a local \nbackup of your remote data.</p>","code":"var fs = require('fs');\nvar myBucket = gcs.bucket('my-bucket');\nvar image = myBucket.file('image.png');\n\nimage.createReadStream()\n  .pipe(fs.createWriteStream('/Users/stephen/Photos/image.png'))\n  .on('error', function(err) {})\n  .on('response', function(response) {\n    // Server connected and responded with the specified status and headers.\n   })\n  .on('complete', function() {\n    // The file is fully downloaded.\n  });"},{"caption":"<p>To limit the downloaded data to only a byte range, pass an options object.</p>","code":"var logFile = myBucket.file('access_log');\nlogFile.createReadStream({\n    start: 10000,\n    end: 20000\n  })\n  .pipe(fs.createWriteStream('/Users/stephen/logfile.txt'))\n  .on('error', function(err) {});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.validation","description":"<ul> <li>Possible values: <code>&quot;md5&quot;</code>, <code>&quot;crc32c&quot;</code>, or <code>false</code>. By default, data integrity is validated with an  MD5 checksum for maximum reliability, falling back to CRC32c when an MD5  hash wasn&#39;t returned from the API. CRC32c will provide better performance  with less reliability. You may also choose to skip validation completely,  however this is <strong>not recommended</strong>.</li> </ul> ","types":["string","boolean"],"optional":false,"nullable":false},{"name":"options.start","description":"<ul> <li>A byte offset to begin the file&#39;s download from. Default is 0. NOTE: Byte ranges are inclusive; that is,  <code>options.start = 0</code> and <code>options.end = 999</code> represent the first 1000  bytes in a file or object. NOTE: when specifying a byte range, data  integrity is not available.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"options.end","description":"<ul> <li>A byte offset to stop reading the file at. NOTE: Byte ranges are inclusive; that is, <code>options.start = 0</code> and  <code>options.end = 999</code> represent the first 1000 bytes in a file or object.  NOTE: when specifying a byte range, data integrity is not available.</li> </ul> ","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"createWriteStream","name":"createWriteStream","type":"instance","description":"<p>Create a writable stream to overwrite the contents of the file in your bucket.</p><p>A File object can also be used to create files for the first time.</p><p>NOTE: Writable streams will emit the <code>complete</code> event when the file is fully uploaded.</p>","source":"/lib/storage/file.js#L638","resources":[],"examples":[{"caption":"<p><h4>Uploading a File</h4> \nNow, consider a case where we want to upload a file to your bucket. You \nhave the option of using <a data-custom-type=\"storage/bucket\" data-method=\"upload\">storage/bucket#upload</a>, but that is just \na convenience method which will do the following.</p>","code":"var fs = require('fs');\nvar image = myBucket.file('image.png');\n\nfs.createReadStream('/Users/stephen/Photos/birthday-at-the-zoo/panda.jpg')\n  .pipe(image.createWriteStream())\n  .on('error', function(err) {})\n  .on('complete', function(metadata) {\n    // The file upload is complete.\n  });"},{"caption":"<p><h4>Uploading a File with Metadata</h4> \nOne last case you may run into is when you want to upload a file to your \nbucket and set its metadata at the same time. Like above, you can use \n<a data-custom-type=\"storage/bucket\" data-method=\"upload\">storage/bucket#upload</a> to do this, which is just a wrapper around \nthe following.</p>","code":"var fs = require('fs');\nvar image = myBucket.file('image.png');\n\nfs.createReadStream('/Users/stephen/Photos/birthday-at-the-zoo/panda.jpg')\n  .pipe(image.createWriteStream({\n    metadata: {\n      contentType: 'image/jpeg',\n      metadata: {\n        custom: 'metadata'\n      }\n    }\n  }))\n  .on('error', function(err) {});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.metadata","description":"<ul> <li>Set the metadata for this file.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.resumable","description":"<ul> <li>Force a resumable upload. NOTE: When working with streams, the file format and size is unknown until it&#39;s  completely consumed. Because of this, it&#39;s best for you to be explicit  for what makes sense given your input. Read more about resumable uploads  <a href=\"http://goo.gl/1JWqCF\">here</a>.</li> </ul> ","types":["boolean"],"optional":true,"nullable":false},{"name":"options.validation","description":"<ul> <li>Possible values: <code>&quot;md5&quot;</code>, <code>&quot;crc32c&quot;</code>, or <code>false</code>. By default, data integrity is validated with an  MD5 checksum for maximum reliability. CRC32c will provide better  performance with less reliability. You may also choose to skip validation  completely, however this is <strong>not recommended</strong>.</li> </ul> ","types":["string","boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"delete","name":"delete","type":"instance","description":"<p>Delete the file.</p>","source":"/lib/storage/file.js#L779","resources":[],"examples":[{"code":"file.delete(function(err, apiResponse) {});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false}],"exceptions":[],"returns":[]},{"id":"download","name":"download","type":"instance","description":"<p>Convenience method to download a file into memory or to a local destination.</p>","source":"/lib/storage/file.js#L823","resources":[],"examples":[{"caption":"<p>Download a file into memory. The contents will be available as the second \nargument in the demonstration below, <code>contents</code>.</p>","code":"file.download(function(err, contents) {});"},{"caption":"<p>Download a file to a local destination.</p>","code":"file.download({\n  destination: '/Users/stephen/Desktop/file-backup.txt'\n}, function(err) {});"}],"params":[{"name":"options","description":"<ul> <li>Optional configuration. The arguments match those passed to <a data-custom-type=\"storage/file\" data-method=\"createReadStream\">storage/file#createReadStream</a>.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.destination","description":"<ul> <li>Local file path to write the file&#39;s contents to.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"getMetadata","name":"getMetadata","type":"instance","description":"<p>Get the file&#39;s metadata.</p>","source":"/lib/storage/file.js#L864","resources":[],"examples":[{"code":"file.getMetadata(function(err, metadata, apiResponse) {});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false}],"exceptions":[],"returns":[]},{"id":"getSignedPolicy","name":"getSignedPolicy","type":"instance","description":"<p>Get a signed policy document to allow a user to upload data with a POST request.</p><p><em><a href=\"http://goo.gl/JWJEkG\">Reference</a>.</em></p>","source":"/lib/storage/file.js#L937","resources":[],"examples":[{"code":"file.getSignedPolicy({\n  equals: ['$Content-Type', 'image/jpeg'],\n  contentLengthRange: { min: 0, max: 1024 },\n  expiration: Math.round(Date.now() / 1000) + (60 * 60 * 24 * 14) // 2 weeks.\n}, function(err, policy) {\n  // policy.string: the policy document in plain text.\n  // policy.base64: the policy document in base64.\n  // policy.signature: the policy signature in base64.\n});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"options.expiration","description":"<ul> <li>Timestamp (seconds since epoch) when this policy will expire.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"options.equals","description":"<ul> <li>Array of request parameters and their expected value (e.g. [[&#39;$<field>&#39;, &#39;<value>&#39;]]). Values are  translated into equality constraints in the conditions field of the  policy document (e.g. [&#39;eq&#39;, &#39;$<field>&#39;, &#39;<value>&#39;]). If only one  equality condition is to be specified, options.equals can be a one-  dimensional array (e.g. [&#39;$<field>&#39;, &#39;<value>&#39;]).</li> </ul> ","types":["array","array[]"],"optional":true,"nullable":false},{"name":"options.startsWith","description":"<ul> <li>Array of request parameters and their expected prefixes (e.g. [[&#39;$<field>&#39;, &#39;<value>&#39;]). Values are  translated into starts-with constraints in the conditions field of the  policy document (e.g. [&#39;starts-with&#39;, &#39;$<field>&#39;, &#39;<value>&#39;]). If only  one prefix condition is to be specified, options.startsWith can be a one-  dimensional array (e.g. [&#39;$<field>&#39;, &#39;<value>&#39;]).</li> </ul> ","types":["array","array[]"],"optional":true,"nullable":false},{"name":"options.acl","description":"<ul> <li>ACL for the object from possibly predefined ACLs.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"options.successRedirect","description":"<ul> <li>The URL to which the user client is redirected if the upload is successful.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"options.successStatus","description":"<ul> <li>The status of the Google Storage response if the upload is successful (must be string).</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"options.contentLengthRange","description":"","types":["object"],"optional":true,"nullable":false},{"name":"options.contentLengthRange.min","description":"<ul> <li>Minimum value for the request&#39;s content length.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"options.contentLengthRange.max","description":"<ul> <li>Maximum value for the request&#39;s content length.</li> </ul> ","types":["number"],"optional":false,"nullable":false}],"exceptions":[{"type":"Error","description":"<p>If an expiration timestamp from the past is given.</p>"},{"type":"Error","description":"<p>If options.equals has an array with less or more than two members.</p>"},{"type":"Error","description":"<p>If options.startsWith has an array with less or more than two members.</p>"}],"returns":[]},{"id":"getSignedUrl","name":"getSignedUrl","type":"instance","description":"<p>Get a signed URL to allow limited time access to the file.</p><p><em><a href=\"http://goo.gl/LcqhjU\">Reference</a>.</em></p>","source":"/lib/storage/file.js#L1065","resources":[],"examples":[{"code":"file.getSignedUrl({\n  action: 'read',\n  expires: Math.round(Date.now() / 1000) + (60 * 60 * 24 * 14), // 2 weeks.\n  promptSaveAs: 'filename.ext'\n}, function(err, url) {});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"options.action","description":"<ul> <li>&quot;read&quot;, &quot;write&quot;, or &quot;delete&quot;</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.contentMd5","description":"<ul> <li>The MD5 digest value in base64. If you provide this, the client must provide this HTTP header with this same  value in its request.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"options.contentType","description":"<ul> <li>If you provide this value, the client must provide this HTTP header set to the same value.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"options.expires","description":"<ul> <li>Timestamp (seconds since epoch) when this link will expire.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"options.extensionHeaders","description":"<ul> <li>If these headers are used, the server will check to make sure that the client provides matching values.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"options.promptSaveAs","description":"<ul> <li>The filename to prompt the user to save the file as when the signed url is accessed. This is ignored if  options.responseDisposition is set.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"options.responseDisposition","description":"<ul> <li>The response-content-disposition parameter (<a href=\"http://goo.gl/yMWxQV\">http://goo.gl/yMWxQV</a>) of the  signed url.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"options.responseType","description":"<ul> <li>The response-content-type parameter of the signed url.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false}],"exceptions":[{"type":"Error","description":"<p>if an expiration timestamp from the past is given.</p>"}],"returns":[]},{"id":"setMetadata","name":"setMetadata","type":"instance","description":"<p>Merge the given metadata with the current remote file&#39;s metadata. This will set metadata if it was previously unset or update previously set metadata. To unset previously set metadata, set its value to null.</p><p>You can set custom key/value pairs in the metadata key of the given object, however the other properties outside of this object must adhere to the <a href=\"https://goo.gl/BOnnCK\">official API documentation</a>.</p><p>See the examples below for more information.</p>","source":"/lib/storage/file.js#L1162","resources":[],"examples":[{"code":"file.setMetadata({\n  contentType: 'application/x-font-ttf',\n  metadata: {\n    my: 'custom',\n    properties: 'go here'\n  }\n}, function(err, metadata, apiResponse) {});\n\n// Assuming current metadata = { hello: 'world', unsetMe: 'will do' }\nfile.setMetadata({\n  metadata: {\n    abc: '123', // will be set.\n    unsetMe: null, // will be unset (deleted).\n    hello: 'goodbye' // will be updated from 'hello' to 'goodbye'.\n  }\n}, function(err, metadata, apiResponse) {\n  // metadata should now be { abc: '123', hello: 'goodbye' }\n});"}],"params":[{"name":"metadata","description":"<ul> <li>The metadata you wish to update.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false}],"exceptions":[],"returns":[]},{"id":"makePrivate","name":"makePrivate","type":"instance","description":"<p>Make a file private to the project and remove all other permissions. Set <code>options.strict</code> to true to make the file private to only the owner.</p>","source":"/lib/storage/file.js#L1206","resources":[],"examples":[{"code":"file.makePrivate(function(err) {});"},{"caption":"<p>Set the file private so only the owner can see and modify it.</p>","code":"file.makePrivate({ strict: true }, function(err) {});"}],"params":[{"name":"options","description":"<ul> <li>The configuration object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.strict","description":"<ul> <li>If true, set the file to be private to only the owner user. Otherwise, it will be private to the project.</li> </ul> ","types":["boolean"],"optional":true,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false}],"exceptions":[],"returns":[]},{"id":"makePublic","name":"makePublic","type":"instance","description":"<p>Set a file to be publicly readable and maintain all previous permissions.</p>","source":"/lib/storage/file.js#L1241","resources":[],"examples":[{"code":"file.makePublic(function(err, apiResponse) {});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false}],"exceptions":[],"returns":[]},{"id":"acl.owners","name":"acl.owners","type":"instance","description":"<p>An object of convenience methods to add or delete owner ACL permissions for a given entity.</p><p>The supported methods include:</p><ul> <li><code>myFile.acl.owners.addAllAuthenticatedUsers</code></li> <li><code>myFile.acl.owners.deleteAllAuthenticatedUsers</code></li> <li><code>myFile.acl.owners.addAllUsers</code></li> <li><code>myFile.acl.owners.deleteAllUsers</code></li> <li><code>myFile.acl.owners.addDomain</code></li> <li><code>myFile.acl.owners.deleteDomain</code></li> <li><code>myFile.acl.owners.addGroup</code></li> <li><code>myFile.acl.owners.deleteGroup</code></li> <li><code>myFile.acl.owners.addProject</code></li> <li><code>myFile.acl.owners.deleteProject</code></li> <li><code>myFile.acl.owners.addUser</code></li> <li><code>myFile.acl.owners.deleteUser</code></li> </ul> ","source":"gcloud-node/lib/storage/acl.js#L121","resources":[],"examples":[{"code":"var gcs = gcloud.storage({\n  projectId: 'grape-spaceship-123'\n});"},{"caption":"<p>Add a user as an owner of a file.</p>","code":"var myBucket = gcs.bucket('my-bucket');\nvar myFile = myBucket.file('my-file');\nmyFile.acl.owners.addUser('email@example.com', function(err, aclObject) {});"},{"caption":"<p>For reference, the above command is the same as running the following.</p>","code":"myFile.acl.add({\n  entity: 'user-email@example.com',\n  role: gcs.acl.OWNER_ROLE\n}, function(err, aclObject) {});"}],"params":[],"exceptions":[],"returns":[]},{"id":"acl.readers","name":"acl.readers","type":"instance","description":"<p>An object of convenience methods to add or delete reader ACL permissions for a given entity.</p><p>The supported methods include:</p><ul> <li><code>myFile.acl.readers.addAllAuthenticatedUsers</code></li> <li><code>myFile.acl.readers.deleteAllAuthenticatedUsers</code></li> <li><code>myFile.acl.readers.addAllUsers</code></li> <li><code>myFile.acl.readers.deleteAllUsers</code></li> <li><code>myFile.acl.readers.addDomain</code></li> <li><code>myFile.acl.readers.deleteDomain</code></li> <li><code>myFile.acl.readers.addGroup</code></li> <li><code>myFile.acl.readers.deleteGroup</code></li> <li><code>myFile.acl.readers.addProject</code></li> <li><code>myFile.acl.readers.deleteProject</code></li> <li><code>myFile.acl.readers.addUser</code></li> <li><code>myFile.acl.readers.deleteUser</code></li> </ul> ","source":"gcloud-node/lib/storage/acl.js#L160","resources":[],"examples":[{"caption":"<p>Add a user as a reader of a file.</p>","code":"myFile.acl.readers.addUser('email@example.com', function(err, aclObject) {});"},{"caption":"<p>For reference, the above command is the same as running the following.</p>","code":"myFile.acl.add({\n  entity: 'user-email@example.com',\n  role: gcs.acl.READER_ROLE\n}, function(err, aclObject) {});"}],"params":[],"exceptions":[],"returns":[]},{"id":"acl.writers","name":"acl.writers","type":"instance","description":"<p>An object of convenience methods to add or delete writer ACL permissions for a given entity.</p><p>The supported methods include:</p><ul> <li><code>myFile.acl.writers.addAllAuthenticatedUsers</code></li> <li><code>myFile.acl.writers.deleteAllAuthenticatedUsers</code></li> <li><code>myFile.acl.writers.addAllUsers</code></li> <li><code>myFile.acl.writers.deleteAllUsers</code></li> <li><code>myFile.acl.writers.addDomain</code></li> <li><code>myFile.acl.writers.deleteDomain</code></li> <li><code>myFile.acl.writers.addGroup</code></li> <li><code>myFile.acl.writers.deleteGroup</code></li> <li><code>myFile.acl.writers.addProject</code></li> <li><code>myFile.acl.writers.deleteProject</code></li> <li><code>myFile.acl.writers.addUser</code></li> <li><code>myFile.acl.writers.deleteUser</code></li> </ul> ","source":"gcloud-node/lib/storage/acl.js#L199","resources":[],"examples":[{"caption":"<p>Add a user as a writer of a file.</p>","code":"myFile.acl.writers.addUser('email@example.com', function(err, aclObject) {});"},{"caption":"<p>For reference, the above command is the same as running the following.</p>","code":"myFile.acl.add({\n  entity: 'user-email@example.com',\n  role: gcs.acl.WRITER_ROLE\n}, function(err, aclObject) {});"}],"params":[],"exceptions":[],"returns":[]},{"id":"acl.add","name":"acl.add","type":"instance","description":"<p>Add access controls on a <a data-custom-type=\"storage/bucket\">storage/bucket</a> or <a data-custom-type=\"storage/file\">storage/file</a>.</p>","source":"gcloud-node/lib/storage/acl.js#L233","resources":[],"examples":[{"code":"myBucket.acl.add({\n  entity: 'user-useremail@example.com',\n  role: gcs.acl.OWNER_ROLE\n}, function(err, aclObject, apiResponse) {});"},{"caption":"<p>For file ACL operations, you can also specify a <code>generation</code> property. \nHere is how you would grant ownership permissions to a user on a specific \nrevision of a file.</p>","code":"myFile.acl.add({\n  entity: 'user-useremail@example.com',\n  role: gcs.acl.OWNER_ROLE,\n  generation: 1\n}, function(err, aclObject, apiResponse) {});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"options.entity","description":"<ul> <li>Whose permissions will be added.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.role","description":"<ul> <li>Permissions allowed for the defined entity. See <a data-custom-type=\"storage\" data-method=\"acl\">storage#acl</a>.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.generation","description":"<ul> <li><strong>File Objects Only</strong> Select a specific revision of this file (as opposed to the latest version, the default).</li> </ul> ","types":["int"],"optional":true,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"acl.delete","name":"acl.delete","type":"instance","description":"<p>Delete access controls on a <a data-custom-type=\"storage/bucket\">storage/bucket</a> or <a data-custom-type=\"storage/file\">storage/file</a>.</p>","source":"gcloud-node/lib/storage/acl.js#L283","resources":[],"examples":[{"code":"myBucket.acl.delete({\n  entity: 'user-useremail@example.com'\n}, function(err, apiResponse) {});"},{"caption":"<p>For file ACL operations, you can also specify a <code>generation</code> property.</p>","code":"myFile.acl.delete({\n  entity: 'user-useremail@example.com',\n  generation: 1\n}, function(err, apiResponse) {});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.entity","description":"<ul> <li>Whose permissions will be revoked.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.generation","description":"<ul> <li><strong>File Objects Only</strong> Select a specific revision of this file (as opposed to the latest version, the default).</li> </ul> ","types":["int"],"optional":true,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"acl.get","name":"acl.get","type":"instance","description":"<p>Get access controls on a <a data-custom-type=\"storage/bucket\">storage/bucket</a> or <a data-custom-type=\"storage/file\">storage/file</a>. If an entity is omitted, you will receive an array of all applicable access controls.</p>","source":"gcloud-node/lib/storage/acl.js#L336","resources":[],"examples":[{"code":"myBucket.acl.get({\n  entity: 'user-useremail@example.com'\n}, function(err, aclObject, apiResponse) {});"},{"caption":"<p>Get all access controls.</p>","code":"myBucket.acl.get(function(err, aclObjects, apiResponse) {\n  // aclObjects = [\n  //   {\n  //     entity: 'user-useremail@example.com',\n  //     role: 'owner'\n  //   }\n  // ]\n});"},{"caption":"<p>For file ACL operations, you can also specify a <code>generation</code> property.</p>","code":"myFile.acl.get({\n  entity: 'user-useremail@example.com',\n  generation: 1\n}, function(err, aclObject, apiResponse) {});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object. If you want to receive a list of all access controls, pass the callback function as the  only argument.</li> </ul> ","types":["object","function"],"optional":false,"nullable":false},{"name":"options.entity","description":"<ul> <li>Whose permissions will be fetched.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"options.generation","description":"<ul> <li><strong>File Objects Only</strong> Select a specific revision of this file (as opposed to the latest version, the default).</li> </ul> ","types":["int"],"optional":true,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"acl.update","name":"acl.update","type":"instance","description":"<p>Update access controls on a <a data-custom-type=\"storage/bucket\">storage/bucket</a> or <a data-custom-type=\"storage/file\">storage/file</a>.</p>","source":"gcloud-node/lib/storage/acl.js#L404","resources":[],"examples":[{"code":"var gcs = gcloud.storage({\n  projectId: 'grape-spaceship-123'\n});\n\nmyBucket.acl.update({\n  entity: 'user-useremail@example.com',\n  role: gcs.acl.WRITER_ROLE\n}, function(err, apiResponse) {});"},{"caption":"<p>For file ACL operations, you can also specify a <code>generation</code> property.</p>","code":"myFile.acl.update({\n  entity: 'user-useremail@example.com',\n  role: gcs.acl.WRITER_ROLE,\n  generation: 1\n}, function(err, apiResponse) {});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.entity","description":"<ul> <li>Whose permissions will be updated.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.role","description":"<ul> <li>Permissions allowed for the defined entity. See <a data-custom-type=\"storage\" data-method=\"acl\">storage#acl</a>.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.generation","description":"<ul> <li><strong>File Objects Only</strong> Select a specific revision of this file (as opposed to the latest version, the default).</li> </ul> ","types":["int"],"optional":true,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]}]}