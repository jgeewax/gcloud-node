{"id":"bigtable/table","type":"class","name":"Table","overview":"<p>\n  This class allows you interact with Cloud Bigtable.\n</p>\n\n<p>\n  First, install <code>google-cloud</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save google-cloud</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>google-cloud</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Compute Engine</h4>\n<div hljs language=\"javascript\">\nvar gcloud = require('google-cloud');\nvar bigtable = gcloud.bigtable();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar gcloud = require('google-cloud');\nvar bigtable = gcloud.bigtable({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>google-cloud</code> are outlined in our <a href=\"#/docs/google-cloud/0.48.0/guides/authentication\">Authentication guide</a>.\n</p>\n\n","description":"","source":"packages/bigtable/src/table.js","parent":"bigtable","children":[],"methods":[{"id":"Table","name":"Table","type":"constructor","description":"<p>Create a Table object to interact with a Cloud Bigtable table.</p>","source":"packages/bigtable/src/table.js#L70","resources":[],"examples":[{"code":"var instance = bigtable.instance('my-instance');\nvar table = instance.table('prezzy');"}],"params":[{"name":"name","description":"<ul> <li>Name of the table.</li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"create","name":"create","type":"instance","description":"<p>Create a table.</p>","source":"packages/bigtable/src/table.js#L95","resources":[],"examples":[{"code":"table.create(function(err, table, apiResponse) {\n  if (!err) {\n    // The table was created successfully.\n  }\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"table.create().then(function(data) {\n  var table = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"options","description":"<ul> <li>See <a data-custom-type=\"bigtable/instance\" data-method=\"createTable\">bigtable/instance#createTable</a>.</li> </ul> ","types":["object"],"optional":true,"nullable":false}],"exceptions":[],"returns":[]},{"id":"delete","name":"delete","type":"instance","description":"<p>Delete the table.</p>","source":"packages/bigtable/src/table.js#L115","resources":[],"examples":[{"code":"table.delete(function(err, apiResponse) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"table.delete().then(function(data) {\n  var apiResponse = data[0];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"exists","name":"exists","type":"instance","description":"<p>Check if a table exists.</p>","source":"packages/bigtable/src/table.js#L143","resources":[],"examples":[{"code":"table.exists(function(err, exists) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"table.exists().then(function(data) {\n  var exists = data[0];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.exists","description":"<ul> <li>Whether the table exists or not.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"get","name":"get","type":"instance","description":"<p>Get a table if it exists.</p><p>You may optionally use this to &quot;get or create&quot; an object by providing an object with <code>autoCreate</code> set to <code>true</code>. Any extra configuration that is normally required for the <code>create</code> method must be contained within this object as well.</p>","source":"packages/bigtable/src/table.js#L172","resources":[],"examples":[{"code":"table.get(function(err, table, apiResponse) {\n  // The `table` data has been populated.\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"table.get().then(function(data) {\n  var table = data[0];\n  var apiResponse = data[0];\n});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["options"],"optional":true,"nullable":false},{"name":"options.autoCreate","description":"<ul> <li>Automatically create the object if it does not exist. Default: <code>false</code></li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"options.view","description":"<ul> <li>The view to be applied to the table fields. See <a data-custom-type=\"bigtable/table\" data-method=\"getMetadata\">bigtable/table#getMetadata</a>.</li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"createFamily","name":"createFamily","type":"instance","description":"<p>Create a column family.</p><p>Optionally you can send garbage collection rules and when creating a family. Garbage collection executes opportunistically in the background, so it&#39;s possible for reads to return a cell even if it matches the active expression for its family.</p>","source":"packages/bigtable/src/table.js#L313","resources":[{"title":"Garbage Collection Proto Docs","link":"https://github.com/googleapis/googleapis/blob/master/google/bigtable/admin/table/v1/bigtable_table_data.proto#L59"}],"examples":[{"code":"var callback = function(err, family, apiResponse) {\n  // `family` is a Family object\n};\n\nvar rule = {\n  age: {\n    seconds: 0,\n    nanos: 5000\n  },\n  versions: 3,\n  union: true\n};\n\ntable.createFamily('follows', rule, callback);"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"table.createFamily('follows').then(function(data) {\n  var family = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"name","description":"<ul> <li>The name of column family.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"rule","description":"<ul> <li>Garbage collection rule.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"rule.age","description":"<ul> <li>Delete cells in a column older than the given age. Values must be at least 1 millisecond.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"rule.versions","description":"<ul> <li>Maximum number of versions to delete cells in a column, except for the most recent.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"rule.intersect","description":"<ul> <li>Cells to delete should match all rules.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"rule.union","description":"<ul> <li>Cells to delete should match any of the rules.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.family","description":"<ul> <li>The newly created Family.</li> </ul> ","types":["<a data-custom-type=\"bigtable/family\" data-method=\"\">bigtable/family</a>"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[{"type":"error","description":"<p>If a name is not provided.</p>"}],"returns":[]},{"id":"createReadStream","name":"createReadStream","type":"instance","description":"<p>Get <a data-custom-type=\"bigtable/row\" data-method=\"\">bigtable/row</a> objects for the rows currently in your table as a readable object stream.</p>","source":"packages/bigtable/src/table.js#L448","resources":[],"examples":[{"code":"table.createReadStream()\n  .on('error', console.error)\n  .on('data', function(row) {\n    // `row` is a Row object.\n  })\n  .on('end', function() {\n    // All rows retrieved.\n  });"},{"caption":"<p>If you anticipate many results, you can end a stream early to prevent \nunnecessary processing.</p>","code":"table.createReadStream()\n  .on('data', function(row) {\n    this.end();\n  });"},{"caption":"<p>Specify arbitrary keys for a non-contiguous set of rows. \nThe total size of the keys must remain under 1MB, after encoding.</p>","code":"table.createReadStream({\n  keys: [\n    'alincoln',\n    'gwashington'\n  ]\n});"},{"caption":"<p>Scan for row keys that contain a specific prefix.</p>","code":"table.createReadStream({\n  prefix: 'gwash'\n});"},{"caption":"<p>Specify a contiguous range of rows to read by supplying <code>start</code> and <code>end</code> \nkeys. \nIf the <code>start</code> key is omitted, it is interpreted as an empty string. \nIf the <code>end</code> key is omitted, it is interpreted as infinity.</p>","code":"table.createReadStream({\n  start: 'alincoln',\n  end: 'gwashington'\n});"},{"caption":"<p>Specify multiple ranges.</p>","code":"table.createReadStream({\n  ranges: [{\n    start: 'alincoln',\n    end: 'gwashington'\n  }, {\n    start: 'tjefferson',\n    end: 'jadams'\n  }]\n});"},{"caption":"<p>Apply a <a data-custom-type=\"bigtable/filter\" data-method=\"\">bigtable/filter</a> to the contents of the specified rows.</p>","code":"table.createReadStream({\n  filter: [\n    {\n      column: 'gwashington'\n    }, {\n      value: 1\n    }\n  ]\n});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["options"],"optional":true,"nullable":false},{"name":"options.decode","description":"<ul> <li>If set to <code>false</code> it will not decode Buffer values returned from Bigtable. Default: true.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"options.end","description":"<ul> <li>End value for key range.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.filter","description":"<ul> <li>Row filters allow you to both make advanced queries and format how the data is returned.</li> </ul> ","types":["<a data-custom-type=\"bigtable/filter\" data-method=\"\">bigtable/filter</a>"],"optional":false,"nullable":false},{"name":"options.keys","description":"<ul> <li>A list of row keys.</li> </ul> ","types":["string[]"],"optional":false,"nullable":false},{"name":"options.limit","description":"<ul> <li>Maximum number of rows to be returned.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"options.prefix","description":"<ul> <li>Prefix that the row key must match.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.ranges","description":"<ul> <li>A list of key ranges.</li> </ul> ","types":["object[]"],"optional":false,"nullable":false},{"name":"options.start","description":"<ul> <li>Start value for key range.</li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["stream"],"description":""}]},{"id":"deleteRows","name":"deleteRows","type":"instance","description":"<p>Delete all rows in the table, optionally corresponding to a particular prefix.</p>","source":"packages/bigtable/src/table.js#L554","resources":[],"examples":[{"caption":"<p>You can supply a prefix to delete all corresponding rows.</p>","code":"var callback = function(err, apiResponse) {\n  if (!err) {\n    // Rows successfully deleted.\n  }\n};\n\ntable.deleteRows({\n  prefix: 'alincoln'\n}, callback);"},{"caption":"<p>If you choose to omit the prefix, all rows in the table will be deleted.</p>","code":"table.deleteRows(callback);"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"table.deleteRows().then(function(data) {\n  var apiResponse = data[0];\n});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["options"],"optional":true,"nullable":false},{"name":"options.prefix","description":"<ul> <li>Row key prefix, when omitted all rows will be deleted.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"family","name":"family","type":"instance","description":"<p>Get a reference to a Table Family.</p>","source":"packages/bigtable/src/table.js#L589","resources":[],"examples":[{"code":"var family = table.family('my-family');"}],"params":[{"name":"name","description":"<ul> <li>The family name.</li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[{"type":"error","description":"<p>If a name is not provided.</p>"}],"returns":[{"types":["<a data-custom-type=\"bigtable/family\" data-method=\"\">bigtable/family</a>"],"description":""}]},{"id":"getFamilies","name":"getFamilies","type":"instance","description":"<p>Get Family objects for all the column familes in your table.</p>","source":"packages/bigtable/src/table.js#L618","resources":[],"examples":[{"code":"table.getFamilies(function(err, families, apiResponse) {\n  // `families` is an array of Family objects.\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"table.getFamilies().then(function(data) {\n  var families = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.families","description":"<ul> <li>The list of families.</li> </ul> ","types":["<a data-custom-type=\"bigtable/family[]\" data-method=\"\">bigtable/family[]</a>"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"getMetadata","name":"getMetadata","type":"instance","description":"<p>Get the table&#39;s metadata.</p>","source":"packages/bigtable/src/table.js#L659","resources":[],"examples":[{"code":"table.getMetadata(function(err, metadata, apiResponse) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"table.getMetadata().then(function(data) {\n  var metadata = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"options","description":"<ul> <li>Table request options.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.view","description":"<ul> <li>The view to be applied to the table fields.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.metadata","description":"<ul> <li>The table&#39;s metadata.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"getRows","name":"getRows","type":"instance","description":"<p>Get <a data-custom-type=\"bigtable/row\" data-method=\"\">bigtable/row</a> objects for the rows currently in your table.</p><p>This method is not recommended for large datasets as it will buffer all rows before returning the results. Instead we recommend using the streaming API via <a data-custom-type=\"bigtable/table\" data-method=\"createReadStream\">bigtable/table#createReadStream</a>.</p>","source":"packages/bigtable/src/table.js#L715","resources":[],"examples":[{"code":"table.getRows(function(err, rows) {\n  if (!err) {\n    // `rows` is an array of Row objects.\n  }\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"table.getRows().then(function(data) {\n  var rows = data[0];\n});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object. See <a data-custom-type=\"bigtable/table\" data-method=\"createReadStream\">bigtable/table#createReadStream</a> for a complete list of options.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.rows","description":"<ul> <li>List of Row objects.</li> </ul> ","types":["<a data-custom-type=\"bigtable/row[]\" data-method=\"\">bigtable/row[]</a>"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"insert","name":"insert","type":"instance","description":"<p>Insert or update rows in your table. It should be noted that gRPC only allows you to send payloads that are less than or equal to 4MB. If you&#39;re inserting more than that you may need to send smaller individual requests.</p>","source":"packages/bigtable/src/table.js#L797","resources":[],"examples":[{"code":"var callback = function(err) {\n  if (err) {\n    // An API error or partial failure occurred.\n\n    if (err.name === 'PartialFailureError') {\n      // err.errors[].code = 'Response code'\n      // err.errors[].message = 'Error message'\n      // err.errors[].entry = The original entry\n    }\n  }\n};\n\nvar entries = [\n {\n    key: 'alincoln',\n    data: {\n      follows: {\n        gwashington: 1\n      }\n    }\n  }\n];\n\ntable.insert(entries, callback);"},{"caption":"<p>By default whenever you insert new data, the server will capture a \ntimestamp of when your data was inserted. It's possible to provide a \ndate object to be used instead.</p>","code":"var entries = [\n  {\n    key: 'gwashington',\n    data: {\n      follows: {\n        jadams: {\n          value: 1,\n          timestamp: new Date('March 22, 2016')\n        }\n      }\n    }\n  }\n];\n\ntable.insert(entries, callback);"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"table.insert(entries).then(function() {\n  // All requested inserts have been processed.\n});\n//-"}],"params":[{"name":"entries","description":"<ul> <li>List of entries to be inserted. See <a data-custom-type=\"bigtable/table\" data-method=\"mutate\">bigtable/table#mutate</a>.</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.err.errors","description":"<ul> <li>If present, these represent partial failures. It&#39;s possible for part of your request to be completed  successfully, while the other part was not.</li> </ul> ","types":["object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"mutate","name":"mutate","type":"instance","description":"<p>Apply a set of changes to be atomically applied to the specified row(s). Mutations are applied in order, meaning that earlier mutations can be masked by later ones.</p>","source":"packages/bigtable/src/table.js#L904","resources":[],"examples":[{"caption":"<p>Insert entities. See <a data-custom-type=\"bigtable/table\" data-method=\"insert\">bigtable/table#insert</a>.</p>","code":"var callback = function(err) {\n  if (err) {\n    // An API error or partial failure occurred.\n\n    if (err.name === 'PartialFailureError') {\n      // err.errors[].code = 'Response code'\n      // err.errors[].message = 'Error message'\n      // err.errors[].entry = The original entry\n    }\n  }\n};\n\nvar entries = [\n  {\n    method: 'insert',\n    key: 'gwashington',\n    data: {\n      follows: {\n        jadams: 1\n      }\n    }\n  }\n];\n\ntable.mutate(entries, callback);"},{"caption":"<p>Delete entities. See <a data-custom-type=\"bigtable/row\" data-method=\"deleteCells\">bigtable/row#deleteCells</a>.</p>","code":"var entries = [\n  {\n    method: 'delete',\n    key: 'gwashington'\n  }\n];\n\ntable.mutate(entries, callback);"},{"caption":"<p>Delete specific columns within a row.</p>","code":"var entries = [\n  {\n    method: 'delete',\n    key: 'gwashington',\n    data: [\n      'follows:jadams'\n    ]\n  }\n];\n\ntable.mutate(entries, callback);"},{"caption":"<p>Mix and match mutations. This must contain at least one entry and at \nmost 100,000.</p>","code":"var entries = [\n  {\n    method: 'insert',\n    key: 'alincoln',\n    data: {\n      follows: {\n        gwashington: 1\n      }\n    }\n  }, {\n    method: 'delete',\n    key: 'jadams',\n    data: [\n      'follows:gwashington'\n    ]\n  }\n];\n\ntable.mutate(entries, callback);"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"table.mutate(entries).then(function() {\n  // All requested mutations have been processed.\n});"}],"params":[{"name":"entries","description":"<ul> <li>List of entities to be inserted or deleted.</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.err.errors","description":"<ul> <li>If present, these represent partial failures. It&#39;s possible for part of your request to be completed  successfully, while the other part was not.</li> </ul> ","types":["object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"row","name":"row","type":"instance","description":"<p>Get a reference to a table row.</p>","source":"packages/bigtable/src/table.js#L959","resources":[],"examples":[{"code":"var row = table.row('lincoln');"}],"params":[{"name":"key","description":"<ul> <li>The row key.</li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[{"type":"error","description":"<p>If a key is not provided.</p>"}],"returns":[{"types":["<a data-custom-type=\"bigtable/row\" data-method=\"\">bigtable/row</a>"],"description":""}]},{"id":"sampleRowKeys","name":"sampleRowKeys","type":"instance","description":"<p>Returns a sample of row keys in the table. The returned row keys will delimit contigous sections of the table of approximately equal size, which can be used to break up the data for distributed tasks like mapreduces.</p>","source":"packages/bigtable/src/table.js#L994","resources":[],"examples":[{"code":"table.sampleRowKeys(function(err, keys) {\n  // keys = [\n  //   {\n  //     key: '',\n  //     offset: '805306368'\n  //   },\n  //   ...\n  // ]\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"table.sampleRowKeys().then(function(data) {\n  var keys = data[0];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.keys","description":"<ul> <li>The list of keys.</li> </ul> ","types":["object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"sampleRowKeysStream","name":"sampleRowKeysStream","type":"instance","description":"<p>Returns a sample of row keys in the table as a readable object stream.</p><p>See <a data-custom-type=\"bigtable/table\" data-method=\"sampleRowKeys\">bigtable/table#sampleRowKeys</a> for more details.</p>","source":"packages/bigtable/src/table.js#L1025","resources":[],"examples":[{"code":"table.sampleRowKeysStream()\n  .on('error', console.error)\n  .on('data', function(key) {\n    // Do something with the `key` object.\n  });"},{"caption":"<p>If you anticipate many results, you can end a stream early to prevent \nunnecessary processing.</p>","code":"table.sampleRowKeysStream()\n  .on('data', function(key) {\n    this.end();\n  });"}],"params":[],"exceptions":[],"returns":[{"types":["stream"],"description":""}]}],"path":"table.json"}