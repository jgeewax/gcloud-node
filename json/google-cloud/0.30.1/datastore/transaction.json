{"id":"datastore/transaction","type":"class","name":"Transaction","description":"","source":"lib/datastore/transaction.js","parent":"datastore","children":[],"methods":[{"id":"Transaction","name":"Transaction","type":"constructor","description":"<p>Build a Transaction object. Transactions will be created for you by <a data-custom-type=\"datastore\" data-method=\"\">datastore</a>. When you need to run a transactional operation, use <a data-custom-type=\"datastore\" data-method=\"runInTransaction\">datastore#runInTransaction</a>.</p>","source":"lib/datastore/transaction.js#L73","resources":[{"title":"Transactions Reference","link":"https://cloud.google.com/datastore/docs/concepts/transactions"}],"examples":[{"code":"var datastore = gcloud.datastore({\n  projectId: 'my-project',\n  keyFilename: '/path/to/keyfile.json'\n});\n\ndatastore.runInTransaction(function(transaction, done) {\n  // `transaction` is a Transaction object.\n}, function(err) {});"}],"params":[],"exceptions":[],"returns":[]},{"id":"delete","name":"delete","type":"instance","description":"<p>Delete all entities identified with the specified key(s) in the current transaction.</p>","source":"lib/datastore/transaction.js#L119","resources":[],"examples":[{"code":"datastore.runInTransaction(function(transaction, done) {\n  // Delete a single entity.\n  transaction.delete(datastore.key(['Company', 123]));\n\n  // Delete multiple entities at once.\n  transaction.delete([\n    datastore.key(['Company', 123]),\n    datastore.key(['Product', 'Computer'])\n  ]);\n\n  done();\n});"}],"params":[{"name":"key","description":"<ul> <li>Datastore key object(s).</li> </ul> ","types":["Key","Key[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"rollback","name":"rollback","type":"instance","description":"<p>Reverse a transaction remotely and finalize the current transaction instance.</p>","source":"lib/datastore/transaction.js#L150","resources":[],"examples":[{"code":"datastore.runInTransaction(function(transaction, done) {\n  transaction.rollback(function(err, apiResponse) {\n    if (err) {\n      // Transaction could not be rolled back.\n    }\n    done();\n  });\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"save","name":"save","type":"instance","description":"<p>Insert or update the specified object(s) in the current transaction. If a key is incomplete, its associated object is inserted and the original Key object is updated to contain the generated ID.</p><p>This method will determine the correct Datastore method to execute (<code>upsert</code>, <code>insert</code>, <code>update</code>, and <code>insertAutoId</code>) by using the key(s) provided. For example, if you provide an incomplete key (one without an ID), the request will create a new entity and have its ID automatically assigned. If you provide a complete key, the entity will be updated with the data specified.</p><p>By default, all properties are indexed. To prevent a property from being included in <em>all</em> indexes, you must supply an entity&#39;s <code>data</code> property as an array. See below for an example.</p>","source":"lib/datastore/transaction.js#L254","resources":[],"examples":[{"caption":"<p>Save a single entity. \nNotice that we are providing an incomplete key. After the transaction is \ncommitted, the Key object held by the <code>key</code> variable will be populated \nwith a path containing its generated ID.</p>","code":"var key = datastore.key('Company');\n\ndatastore.runInTransaction(function(transaction, done) {\n  transaction.save({\n    key: key,\n    data: {\n      rating: '10'\n    }\n  });\n\n  done();\n});"},{"caption":"<p>To specify an <code>excludeFromIndexes</code> value for a Datastore entity, pass in \nan array for the key's data. The above example would then look like:</p>","code":"datastore.runInTransaction(function(transaction, done) {\n  transaction.save({\n    key: key,\n    data: [\n      {\n        name: 'rating',\n        value: '10',\n        excludeFromIndexes: false\n      }\n    ]\n  });\n\n  done();\n});"},{"caption":"<p>Save multiple entities at once.</p>","code":"var companyKey = datastore.key(['Company', 123]);\nvar productKey = datastore.key(['Product', 'Computer']);\n\ndatastore.runInTransaction(function(transaction, done) {\n  transaction.save([\n    {\n      key: companyKey,\n      data: {\n        HQ: 'Dallas, TX'\n      }\n    },\n    {\n      key: productKey,\n      data: {\n        vendor: 'Dell'\n      }\n    }\n  ]);\n\n  done();\n});"}],"params":[{"name":"entities","description":"<ul> <li>Datastore key object(s).</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false},{"name":"entities.key","description":"<ul> <li>Datastore key object.</li> </ul> ","types":["Key"],"optional":false,"nullable":false},{"name":"entities.data","description":"<ul> <li>Data to save with the provided key. If you provide an array of objects, you must use the explicit syntax:  <code>name</code> for the name of the property and <code>value</code> for its value. You may  also specify an <code>excludeFromIndexes</code> property, set to <code>true</code> or <code>false</code>.</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"allocateIds","name":"allocateIds","type":"instance","description":"<p>Generate IDs without creating entities.</p>","source":"lib/datastore/request.js#L123","resources":[],"examples":[{"code":"var incompleteKey = datastore.key(['Company']);"},{"caption":"<p>The following call will create 100 new IDs from the Company kind, which \nexists under the default namespace.</p>","code":"datastore.allocateIds(incompleteKey, 100, function(err, keys) {});"},{"caption":"<p>Or, if you're using a transaction object.</p>","code":"datastore.runInTransaction(function(transaction, done) {\n  transaction.allocateIds(incompleteKey, 100, function(err, keys) {\n    done();\n  });\n});"},{"caption":"<p>You may prefer to create IDs from a non-default namespace by providing an \nincomplete key with a namespace. Similar to the previous example, the call \nbelow will create 100 new IDs, but from the Company kind that exists under \nthe \"ns-test\" namespace.</p>","code":"var incompleteKey = datastore.key({\n  namespace: 'ns-test',\n  path: ['Company']\n});\n\nfunction callback(err, keys, apiResponse) {}\n\ndatastore.allocateIds(incompleteKey, 100, callback);"}],"params":[{"name":"incompleteKey","description":"<ul> <li>The key object to complete.</li> </ul> ","types":["Key"],"optional":false,"nullable":false},{"name":"n","description":"<ul> <li>How many IDs to generate.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.keys","description":"<ul> <li>The generated IDs</li> </ul> ","types":["array"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"get","name":"get","type":"instance","description":"<p>Retrieve the entities identified with the specified key(s) in the current transaction. Get operations require a valid key to retrieve the key-identified entity from Datastore.</p>","source":"lib/datastore/request.js#L272","resources":[],"examples":[{"caption":"<p>Get a single entity.</p>","code":"var key = datastore.key(['Company', 123]);\n\ndatastore.get(key, function(err, entity) {});"},{"caption":"<p>Or, if you're using a transaction object.</p>","code":"datastore.runInTransaction(function(transaction, done) {\n  transaction.get(key, function(err, entity) {\n    done();\n  });\n});"},{"caption":"<p>Get multiple entities at once with a callback.</p>","code":"var keys = [\n  datastore.key(['Company', 123]),\n  datastore.key(['Product', 'Computer'])\n];\n\ndatastore.get(keys, function(err, entities) {});"},{"caption":"<p>Or, get the entities as a readable object stream.</p>","code":"datastore.get(keys)\n  .on('error', function(err) {})\n  .on('data', function(entity) {\n    // entity is an entity object.\n  })\n  .on('end', function() {\n    // All entities retrieved.\n  });"},{"caption":"<p>Here's how you would update the value of an entity with the help of the \n<code>save</code> method.</p>","code":"datastore.get(key, function(err, entity) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  entity.data.newValue = true;\n  datastore.save(entity, function(err) {});\n});"}],"params":[{"name":"keys","description":"<ul> <li>Datastore key object(s).</li> </ul> ","types":["Key","Key[]"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.entity","description":"<ul> <li>The entity object(s) which match the provided keys.</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false}],"exceptions":[{"type":"Error","description":"<p>If at least one Key object is not provided.</p>"}],"returns":[]},{"id":"insert","name":"insert","type":"instance","description":"<p>Maps to <a data-custom-type=\"datastore\" data-method=\"save\">datastore#save</a>, forcing the method to be <code>insert</code>.</p>","source":"lib/datastore/request.js#L333","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"runQuery","name":"runQuery","type":"instance","description":"<p>Datastore allows you to query entities by kind, filter them by property filters, and sort them by a property name. Projection and pagination are also supported.</p><p>If you provide a callback, the query is run, and the results are returned as the second argument to your callback. A third argument may also exist, which is a query object that uses the end cursor from the previous query as the starting cursor for the next query. You can pass that object back to this method to see if more results exist.</p><p>You may also omit the callback to this function to trigger streaming mode.</p><p>See below for examples of both approaches.</p>","source":"lib/datastore/request.js#L426","resources":[],"examples":[{"caption":"<p>Where you see <code>transaction</code>, assume this is the context that's relevant to \nyour use, whether that be a Datastore or a Transaction object.</p>","code":"var query = datastore.createQuery('Lion');\n\ndatastore.runQuery(query, function(err, entities) {});"},{"caption":"<p>Or, if you're using a transaction object.</p>","code":"datastore.runInTransaction(function(transaction, done) {\n  transaction.runQuery(query, function(err, entities) {\n    done();\n  });\n});"},{"caption":"<p>To control how many API requests are made and page through the results \nmanually, call <code>autoPaginate(false)</code> on your query.</p>","code":"var manualPageQuery = datastore.createQuery('Lion').autoPaginate(false);\n\nfunction callback(err, entities, nextQuery, apiResponse) {\n  if (nextQuery) {\n    // More results might exist.\n    transaction.runQuery(nextQuery, callback);\n  }\n}\n\ndatastore.runQuery(manualPageQuery, callback);"},{"caption":"<p>If you omit the callback, runQuery will automatically call subsequent \nqueries until no results remain. Entity objects will be pushed as they are \nfound.</p>","code":"datastore.runQuery(query)\n  .on('error', console.error)\n  .on('data', function (entity) {})\n  .on('end', function() {\n    // All entities retrieved.\n  });"},{"caption":"<p>A keys-only query returns just the keys of the result entities instead of \nthe entities themselves, at lower latency and cost.</p>","code":"var keysOnlyQuery = datastore.createQuery('Lion').select('__key__');\n\ndatastore.runQuery(keysOnlyQuery, function(err, entities) {\n  // entities[].key = Key object\n  // entities[].data = Empty object\n});"}],"params":[{"name":"q","description":"<ul> <li>Query object.</li> </ul> ","types":["<a data-custom-type=\"datastore/query\" data-method=\"\">datastore/query</a>"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function. If omitted, a readable stream instance is returned.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request (may be null).</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.entities","description":"<ul> <li>The list of entities returned by this query. Note that this is a single page of entities, not necessarily  all of the entities.</li> </ul> ","types":["array"],"optional":false,"nullable":false},{"name":"callback.nextQuery","description":"<ul> <li>If present, run another query with this object to check for more results.</li> </ul> ","types":["<a data-custom-type=\"datastore/query\" data-method=\"\">datastore/query</a>"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.entities","description":"<ul> <li>A list of Entities</li> </ul> ","types":["<a data-custom-type=\"datastore/entity[]\" data-method=\"\">datastore/entity[]</a>"],"optional":false,"nullable":false},{"name":"callback.nextQuery","description":"<ul> <li>If present, query with this object to check for more results.</li> </ul> ","types":["object"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"update","name":"update","type":"instance","description":"<p>Maps to <a data-custom-type=\"datastore\" data-method=\"save\">datastore#save</a>, forcing the method to be <code>update</code>.</p>","source":"lib/datastore/request.js#L760","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"upsert","name":"upsert","type":"instance","description":"<p>Maps to <a data-custom-type=\"datastore\" data-method=\"save\">datastore#save</a>, forcing the method to be <code>upsert</code>.</p>","source":"lib/datastore/request.js#L768","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]}]}