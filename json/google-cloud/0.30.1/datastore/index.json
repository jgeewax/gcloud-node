{"id":"datastore","type":"class","name":"Datastore","description":"<p>The <code>gcloud.datastore</code> object allows you to interact with Google Cloud Datastore.</p><p>To learn more about Datastore, read the <a href=\"https://cloud.google.com/datastore/docs/concepts/overview\">Google Cloud Datastore Concepts Overview</a></p>","source":"lib/datastore/index.js","parent":null,"children":["datastore/query","datastore/transaction"],"methods":[{"id":"Datastore","name":"Datastore","type":"constructor","description":"<p>Interact with the <a href=\"https://developers.google.com/datastore/\">Google Cloud Datastore</a>.</p>","source":"lib/datastore/index.js#L107","resources":[],"examples":[{"code":"var gcloud = require('gcloud')({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n\nvar datastore = gcloud.datastore();"},{"caption":"<p>Connect to your local Datastore server.</p>","code":"var datastore = gcloud.datastore({\n  apiEndpoint: 'http://localhost:8080'\n});"},{"caption":"<p>The <code>DATASTORE_EMULATOR_HOST</code> environment variable is also recognized. If \nset, you may omit the <code>apiEndpoint</code> option. \nAdditionally, <code>DATASTORE_PROJECT_ID</code> is recognized. If you have this set, \nyou don't need to provide a <code>projectId</code>.</p>"}],"params":[{"name":"options","description":"<ul> <li><a href=\"#/docs\">Configuration object</a>.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.apiEndpoint","description":"<ul> <li>Override the default API endpoint used to reach Datastore. This is useful for connecting to your local Datastore  server (usually &quot;<a href=\"http://localhost:8080\">http://localhost:8080</a>&quot;).</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"options.namespace","description":"<ul> <li>Namespace to isolate transactions to.</li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"double","name":"double","type":"instance","description":"<p>Helper function to get a Datastore Double object.</p>","source":"lib/datastore/index.js#L144","resources":[],"examples":[{"code":"var threeDouble = gcloud.datastore.double(3.0);"}],"params":[{"name":"value","description":"<ul> <li>The double value.</li> </ul> ","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["object"],"description":""}]},{"id":"geoPoint","name":"geoPoint","type":"instance","description":"<p>Helper function to get a Datastore Geo Point object.</p>","source":"lib/datastore/index.js#L164","resources":[],"examples":[{"code":"var coordinates = {\n  latitude: 40.6894,\n  longitude: -74.0447\n};\n\nvar geoPoint = gcloud.datastore.geoPoint(coordinates);"}],"params":[{"name":"coordinates","description":"<ul> <li>Coordinate value.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"coordinates.latitude","description":"<ul> <li>Latitudinal value.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"coordinates.longitude","description":"<ul> <li>Longitudinal value.</li> </ul> ","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["object"],"description":""}]},{"id":"int","name":"int","type":"instance","description":"<p>Helper function to get a Datastore Integer object.</p>","source":"lib/datastore/index.js#L177","resources":[],"examples":[{"code":"var sevenInteger = gcloud.datastore.int(7);"}],"params":[{"name":"value","description":"<ul> <li>The integer value.</li> </ul> ","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["object"],"description":""}]},{"id":"createQuery","name":"createQuery","type":"instance","description":"<p>Create a query for the specified kind.</p>","source":"lib/datastore/index.js#L192","resources":[{"title":"Datastore Queries","link":"https://cloud.google.com/datastore/docs/concepts/queries"}],"examples":[],"params":[{"name":"namespace","description":"<ul> <li>Namespace.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"kind","description":"<ul> <li>The kind to query.</li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"datastore/query\" data-method=\"\">datastore/query</a>"],"description":""}]},{"id":"key","name":"key","type":"instance","description":"<p>Helper to create a Key object, scoped to the instance&#39;s namespace by default.</p><p>You may also specify a configuration object to define a namespace and path.</p>","source":"lib/datastore/index.js#L238","resources":[],"examples":[{"caption":"<p>Create an incomplete key with a kind value of <code>Company</code>.</p>","code":"var key = datastore.key('Company');"},{"caption":"<p>Create a complete key with a kind value of <code>Company</code> and id <code>123</code>.</p>","code":"var key = datastore.key(['Company', 123]);"},{"caption":"<p>Create a complete key with a kind value of <code>Company</code> and name <code>Google</code>. \nNote: <code>id</code> is used for numeric identifiers and <code>name</code> is used otherwise.</p>","code":"var key = datastore.key(['Company', 'Google']);"},{"caption":"<p>Create a complete key from a provided namespace and path.</p>","code":"var key = datastore.key({\n  namespace: 'My-NS',\n  path: ['Company', 123]\n});"}],"params":[{"name":"options","description":"<ul> <li>Key path. To specify or override a namespace, you must use an object here to explicitly state it.</li> </ul> ","types":[],"optional":true,"nullable":false},{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.path","description":"<ul> <li>Key path.</li> </ul> ","types":[],"optional":true,"nullable":false},{"name":"options.namespace","description":"<ul> <li>Optional namespace.</li> </ul> ","types":["string"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Key"],"description":"<p>A newly created Key from the options given.</p>"}]},{"id":"runInTransaction","name":"runInTransaction","type":"instance","description":"<p>Run a function in the context of a new transaction. Transactions allow you to perform multiple operations, committing your changes atomically. When you are finished making your changes within the transaction, run the done() function provided in the callback function to commit your changes. See an example below for more information.</p>","source":"lib/datastore/index.js#L274","resources":[],"examples":[{"code":"datastore.runInTransaction(function(transaction, done) {\n  // From the `transaction` object, execute datastore methods as usual.\n  transaction.get(datastore.key(['Company', 123]), function(err, entity) {\n    if (err) {\n      transaction.rollback(done);\n      return;\n    }\n\n    // Call `done` when you're ready to commit your changes.\n    done();\n  });\n}, function(err, apiResponse) {});"}],"params":[{"name":"fn","description":"<ul> <li>The function to run in the context of a transaction.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"fn.transaction","description":"<ul> <li>The Transaction.</li> </ul> ","types":["<a data-custom-type=\"datastore/transaction\" data-method=\"\">datastore/transaction</a>"],"optional":false,"nullable":false},{"name":"fn.done","description":"<ul> <li>Function used to commit changes.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true}],"exceptions":[],"returns":[]},{"id":"allocateIds","name":"allocateIds","type":"instance","description":"<p>Generate IDs without creating entities.</p>","source":"lib/datastore/request.js#L123","resources":[],"examples":[{"code":"var incompleteKey = datastore.key(['Company']);"},{"caption":"<p>The following call will create 100 new IDs from the Company kind, which \nexists under the default namespace.</p>","code":"datastore.allocateIds(incompleteKey, 100, function(err, keys) {});"},{"caption":"<p>Or, if you're using a transaction object.</p>","code":"datastore.runInTransaction(function(transaction, done) {\n  transaction.allocateIds(incompleteKey, 100, function(err, keys) {\n    done();\n  });\n});"},{"caption":"<p>You may prefer to create IDs from a non-default namespace by providing an \nincomplete key with a namespace. Similar to the previous example, the call \nbelow will create 100 new IDs, but from the Company kind that exists under \nthe \"ns-test\" namespace.</p>","code":"var incompleteKey = datastore.key({\n  namespace: 'ns-test',\n  path: ['Company']\n});\n\nfunction callback(err, keys, apiResponse) {}\n\ndatastore.allocateIds(incompleteKey, 100, callback);"}],"params":[{"name":"incompleteKey","description":"<ul> <li>The key object to complete.</li> </ul> ","types":["Key"],"optional":false,"nullable":false},{"name":"n","description":"<ul> <li>How many IDs to generate.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.keys","description":"<ul> <li>The generated IDs</li> </ul> ","types":["array"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"delete","name":"delete","type":"instance","description":"<p>Delete all entities identified with the specified key(s).</p>","source":"lib/datastore/request.js#L183","resources":[],"examples":[{"code":"var key = datastore.key(['Company', 123]);\ndatastore.delete(key, function(err, apiResp) {});"},{"caption":"<p>Or, if you're using a transaction object.</p>","code":"datastore.runInTransaction(function(transaction, done) {\n  transaction.delete(key, function(err, apiResp) {\n    done();\n  });\n});"},{"caption":"<p>Delete multiple entities at once.</p>","code":"datastore.delete([\n  datastore.key(['Company', 123]),\n  datastore.key(['Product', 'Computer'])\n], function(err, apiResponse) {});"}],"params":[{"name":"key","description":"<ul> <li>Datastore key object(s).</li> </ul> ","types":["Key","Key[]"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"get","name":"get","type":"instance","description":"<p>Retrieve the entities identified with the specified key(s) in the current transaction. Get operations require a valid key to retrieve the key-identified entity from Datastore.</p>","source":"lib/datastore/request.js#L272","resources":[],"examples":[{"caption":"<p>Get a single entity.</p>","code":"var key = datastore.key(['Company', 123]);\n\ndatastore.get(key, function(err, entity) {});"},{"caption":"<p>Or, if you're using a transaction object.</p>","code":"datastore.runInTransaction(function(transaction, done) {\n  transaction.get(key, function(err, entity) {\n    done();\n  });\n});"},{"caption":"<p>Get multiple entities at once with a callback.</p>","code":"var keys = [\n  datastore.key(['Company', 123]),\n  datastore.key(['Product', 'Computer'])\n];\n\ndatastore.get(keys, function(err, entities) {});"},{"caption":"<p>Or, get the entities as a readable object stream.</p>","code":"datastore.get(keys)\n  .on('error', function(err) {})\n  .on('data', function(entity) {\n    // entity is an entity object.\n  })\n  .on('end', function() {\n    // All entities retrieved.\n  });"},{"caption":"<p>Here's how you would update the value of an entity with the help of the \n<code>save</code> method.</p>","code":"datastore.get(key, function(err, entity) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  entity.data.newValue = true;\n  datastore.save(entity, function(err) {});\n});"}],"params":[{"name":"keys","description":"<ul> <li>Datastore key object(s).</li> </ul> ","types":["Key","Key[]"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.entity","description":"<ul> <li>The entity object(s) which match the provided keys.</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false}],"exceptions":[{"type":"Error","description":"<p>If at least one Key object is not provided.</p>"}],"returns":[]},{"id":"insert","name":"insert","type":"instance","description":"<p>Maps to <a data-custom-type=\"datastore\" data-method=\"save\">datastore#save</a>, forcing the method to be <code>insert</code>.</p>","source":"lib/datastore/request.js#L333","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"runQuery","name":"runQuery","type":"instance","description":"<p>Datastore allows you to query entities by kind, filter them by property filters, and sort them by a property name. Projection and pagination are also supported.</p><p>If you provide a callback, the query is run, and the results are returned as the second argument to your callback. A third argument may also exist, which is a query object that uses the end cursor from the previous query as the starting cursor for the next query. You can pass that object back to this method to see if more results exist.</p><p>You may also omit the callback to this function to trigger streaming mode.</p><p>See below for examples of both approaches.</p>","source":"lib/datastore/request.js#L426","resources":[],"examples":[{"caption":"<p>Where you see <code>transaction</code>, assume this is the context that's relevant to \nyour use, whether that be a Datastore or a Transaction object.</p>","code":"var query = datastore.createQuery('Lion');\n\ndatastore.runQuery(query, function(err, entities) {});"},{"caption":"<p>Or, if you're using a transaction object.</p>","code":"datastore.runInTransaction(function(transaction, done) {\n  transaction.runQuery(query, function(err, entities) {\n    done();\n  });\n});"},{"caption":"<p>To control how many API requests are made and page through the results \nmanually, call <code>autoPaginate(false)</code> on your query.</p>","code":"var manualPageQuery = datastore.createQuery('Lion').autoPaginate(false);\n\nfunction callback(err, entities, nextQuery, apiResponse) {\n  if (nextQuery) {\n    // More results might exist.\n    transaction.runQuery(nextQuery, callback);\n  }\n}\n\ndatastore.runQuery(manualPageQuery, callback);"},{"caption":"<p>If you omit the callback, runQuery will automatically call subsequent \nqueries until no results remain. Entity objects will be pushed as they are \nfound.</p>","code":"datastore.runQuery(query)\n  .on('error', console.error)\n  .on('data', function (entity) {})\n  .on('end', function() {\n    // All entities retrieved.\n  });"},{"caption":"<p>A keys-only query returns just the keys of the result entities instead of \nthe entities themselves, at lower latency and cost.</p>","code":"var keysOnlyQuery = datastore.createQuery('Lion').select('__key__');\n\ndatastore.runQuery(keysOnlyQuery, function(err, entities) {\n  // entities[].key = Key object\n  // entities[].data = Empty object\n});"}],"params":[{"name":"q","description":"<ul> <li>Query object.</li> </ul> ","types":["<a data-custom-type=\"datastore/query\" data-method=\"\">datastore/query</a>"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function. If omitted, a readable stream instance is returned.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request (may be null).</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.entities","description":"<ul> <li>The list of entities returned by this query. Note that this is a single page of entities, not necessarily  all of the entities.</li> </ul> ","types":["array"],"optional":false,"nullable":false},{"name":"callback.nextQuery","description":"<ul> <li>If present, run another query with this object to check for more results.</li> </ul> ","types":["<a data-custom-type=\"datastore/query\" data-method=\"\">datastore/query</a>"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.entities","description":"<ul> <li>A list of Entities</li> </ul> ","types":["<a data-custom-type=\"datastore/entity[]\" data-method=\"\">datastore/entity[]</a>"],"optional":false,"nullable":false},{"name":"callback.nextQuery","description":"<ul> <li>If present, query with this object to check for more results.</li> </ul> ","types":["object"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"save","name":"save","type":"instance","description":"<p>Insert or update the specified object(s). If a key is incomplete, its associated object is inserted and the original Key object is updated to contain the generated ID.</p><p>This method will determine the correct Datastore method to execute (<code>upsert</code>, <code>insert</code>, <code>update</code>, and <code>insertAutoId</code>) by using the key(s) provided. For example, if you provide an incomplete key (one without an ID), the request will create a new entity and have its ID automatically assigned. If you provide a complete key, the entity will be updated with the data specified.</p><p>By default, all properties are indexed. To prevent a property from being included in <em>all</em> indexes, you must supply an entity&#39;s <code>data</code> property as an array. See below for an example.</p>","source":"lib/datastore/request.js#L658","resources":[],"examples":[{"caption":"<p>Save a single entity. \nNotice that we are providing an incomplete key. After saving, the original \nKey object used to save will be updated to contain the path with its \ngenerated ID.</p>","code":"var key = datastore.key('Company');\n\ndatastore.save({\n  key: key,\n  data: {\n    rating: '10'\n  }\n}, function(err) {\n  console.log(key.path); // [ 'Company', 5669468231434240 ]\n  console.log(key.namespace); // undefined\n});"},{"caption":"<p>Save a single entity using a provided name instead of auto-generated ID. \nHere we are providing a key with name instead of an ID. After saving, the \noriginal Key object used to save will be updated to contain the path with \nthe name instead of a generated ID.</p>","code":"var key = datastore.key(['Company', 'donutshack']);\n\ndatastore.save({\n  key: key,\n  data: {\n    name: 'DonutShack',\n    rating: 8\n  }\n}, function(err) {\n  console.log(key.path); // ['Company', 'donutshack']\n  console.log(key.namespace); // undefined\n});"},{"caption":"<p>Save a single entity with a provided namespace. Namespaces allow for \nmultitenancy. To read more about this, see \n[the Datastore docs on key concepts](https://goo.gl/M1LUAu). \nHere we are providing a key with namespace.</p>","code":"var key = datastore.key({\n  namespace: 'my-namespace',\n  path: ['Company', 'donutshack']\n});\n\ndatastore.save({\n  key: key,\n  data: {\n    name: 'DonutShack',\n    rating: 8\n  }\n}, function(err) {\n  console.log(key.path); // ['Company', 'donutshack']\n  console.log(key.namespace); // 'my-namespace'\n});"},{"caption":"<p>Save different types of data, including ints, doubles, dates, booleans, \nblobs, and lists. \nNotice that we are providing an incomplete key. After saving, the original \nKey object used to save will be updated to contain the path with its \ngenerated ID.</p>","code":"var key = datastore.key('Company');\n\ndatastore.save({\n  key: key,\n  data: {\n    name: 'DonutShack',\n    rating: gcloud.datastore.int(10),\n    worth: gcloud.datastore.double(123456.78),\n    location: gcloud.datastore.geoPoint({\n      latitude: 40.6894,\n      longitude: -74.0447\n    }),\n    numDonutsServed: 45,\n    founded: new Date('Tue May 12 2015 15:30:00 GMT-0400 (EDT)'),\n    isStartup: true,\n    donutEmoji: new Buffer('\\uD83C\\uDF69'),\n    keywords: [\n      'donut',\n      'coffee',\n      'yum'\n    ]\n  }\n}, function(err, apiResponse) {});"},{"caption":"<p>To specify an <code>excludeFromIndexes</code> value for a Datastore entity, pass in \nan array for the key's data.</p>","code":"datastore.save({\n  key: datastore.key('Company'),\n  data: [\n    {\n      name: 'rating',\n      value: 10,\n      excludeFromIndexes: true\n    }\n  ]\n}, function(err, apiResponse) {});"},{"caption":"<p>Save multiple entities at once.</p>","code":"var companyKey = datastore.key(['Company', 123]);\nvar productKey = datastore.key(['Product', 'Computer']);\n\ndatastore.save([\n  {\n    key: companyKey,\n    data: {\n      HQ: 'Dallas, TX'\n    }\n  },\n  {\n    key: productKey,\n    data: {\n      vendor: 'Dell'\n    }\n  }\n], function(err, apiResponse) {});"},{"caption":"<p>Explicitly attempt to 'insert' a specific entity.</p>","code":"var userKey = datastore.key(['User', 'chilts']);\n\ndatastore.save({\n  key: userKey,\n  method: 'insert',\n  data: {\n    fullName: 'Andrew Chilton'\n  }\n}, function(err, apiResponse) {});"}],"params":[{"name":"entities","description":"<ul> <li>Datastore key object(s).</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false},{"name":"entities.key","description":"<ul> <li>Datastore key object.</li> </ul> ","types":["Key"],"optional":false,"nullable":false},{"name":"entities.method","description":"<ul> <li>Optional method to explicity use for save. The choices include &#39;insert&#39;, &#39;update&#39;, and &#39;upsert&#39;.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"entities.data","description":"<ul> <li>Data to save with the provided key. If you provide an array of objects, you must use the explicit syntax:  <code>name</code> for the name of the property and <code>value</code> for its value. You may  also specify an <code>excludeFromIndexes</code> property, set to <code>true</code> or <code>false</code>.</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[{"type":"Error","description":"<p>If an unrecognized method is provided.</p>"}],"returns":[]},{"id":"update","name":"update","type":"instance","description":"<p>Maps to <a data-custom-type=\"datastore\" data-method=\"save\">datastore#save</a>, forcing the method to be <code>update</code>.</p>","source":"lib/datastore/request.js#L760","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"upsert","name":"upsert","type":"instance","description":"<p>Maps to <a data-custom-type=\"datastore\" data-method=\"save\">datastore#save</a>, forcing the method to be <code>upsert</code>.</p>","source":"lib/datastore/request.js#L768","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]}]}