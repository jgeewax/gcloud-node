{"id":"language/document","type":"class","name":"Document","overview":"<p>\n  This class allows you interact with Cloud Natural Language.\n</p>\n\n\n<div class=\"notice\">\n  <strong><code>google-cloud</code> is deprecated</strong>\n  <p>\n    Due to the scope of our API rapidly increasing, you may notice a decrease in performance if you continue to use the bundled module, <code>google-cloud</code>.\n  </p>\n  <p>\n    Going forward, please install only the individual service modules that you need, such as <code>@google-cloud/language</code>.\n  </p>\n</div>\n\n\n<p>\n  First, install <code>google-cloud</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save google-cloud</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>google-cloud</code>— we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Google Cloud Platform</h4>\n<div hljs language=\"javascript\">\nvar gcloud = require('google-cloud');\nvar language = gcloud.language();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar gcloud = require('google-cloud');\nvar language = gcloud.language({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>google-cloud</code> are outlined in our <a href=\"#/docs/google-cloud/0.53.0/guides/authentication\">Authentication guide</a>.\n</p>\n","description":"","source":"packages/language/src/document.js","parent":"language","children":[],"methods":[{"id":"Document","name":"Document","type":"constructor","description":"<p>Create a Natural Language Document object. From this object, you will be able to run multiple detections.</p>","source":"packages/language/src/document.js#L63","resources":[],"examples":[{"code":"var textToAnalyze = [\n  'Google is an American multinational technology company specializing in',\n  'Internet-related services and products.'\n].join(' ');\n\nvar document = language.document(textToAnalyze);"},{"caption":"<p>Create a Document object with pre-defined configuration, such as its \nlanguage.</p>","code":"var spanishDocument = language.document('¿Dónde está la sede de Google?', {\n  language: 'es'\n});"}],"params":[{"name":"config","description":"<ul> <li>Configuration object, the inline content of the document, or a Storage File object.</li> </ul> ","types":["object","string","<a data-custom-type=\"storage/file\" data-method=\"\">storage/file</a>"],"optional":false,"nullable":false},{"name":"options.content","description":"<ul> <li>If using <code>config</code> as an object to specify the language of the document, use this property to pass  the inline content of the document or a Storage File object.</li> </ul> ","types":["string","<a data-custom-type=\"storage/file\" data-method=\"\">storage/file</a>"],"optional":false,"nullable":false},{"name":"options.language","description":"<ul> <li>The language of the text.</li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"language/document\" data-method=\"\">language/document</a>"],"description":""}]},{"id":"annotate","name":"annotate","type":"instance","description":"<p>Run an annotation of the text from the document.</p><p>By default, all annotation types are requested:</p><ul> <li>The sentiment of the document (positive or negative)</li> <li>The entities of the document (people, places, things, etc.)</li> <li>The syntax of the document (adjectives, nouns, verbs, etc.)</li> </ul> <p>See the examples below for how to request a subset of those types.</p><p>If you only need one type of annotation, you may appreciate one of these other methods from our API:</p><ul> <li><a data-custom-type=\"language\" data-method=\"detectEntities\">language#detectEntities</a></li> <li><a data-custom-type=\"language\" data-method=\"detectSentiment\">language#detectSentiment</a></li> <li><a data-custom-type=\"language\" data-method=\"detectSyntax\">language#detectSyntax</a></li> </ul> ","source":"packages/language/src/document.js#L389","resources":[{"title":"documents.annotateText API Documentation","link":"https://cloud.google.com/natural-language/reference/rest/v1/documents/annotateText"}],"examples":[{"code":"document.annotate(function(err, annotation) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  // annotation = {\n  //   language: 'en',\n  //   sentiment: {\n  //     magnitude: 0.5,\n  //     score: 0.5\n  //   },\n  //   entities: [\n  //     {\n  //       name: 'Google',\n  //       type: 'ORGANIZATION',\n  //       metadata: {\n  //         mid: '/m/045c7b',\n  //         wikipedia_url: 'http://en.wikipedia.org/wiki/Google'\n  //       },\n  //       salience: 0.7532734870910645,\n  //       mentions: [\n  //         {\n  //           text: {\n  //             content: 'Google',\n  //             beginOffset: -1\n  //           },\n  //           type: 'PROPER'\n  //         },\n  //         // ...\n  //       }\n  //     }\n  //   ],\n  //   sentences: [\n  //     {\n  //       text: {\n  //         content: 'Google is an American multinational technology...',\n  //         beginOffset: -1\n  //       },\n  //       sentiment: {\n  //         magnitude: 0.5,\n  //         score: 0.5\n  //       }\n  //     }\n  //   ],\n  //   tokens: [\n  //     {\n  //       text: {\n  //         content: 'Google',\n  //         beginOffset: -1\n  //       },\n  //       partOfSpeech: {\n  //         tag: 'NOUN',\n  //         aspect: 'ASPECT_UNKNOWN',\n  //         case: 'CASE_UNKNOWN',\n  //         form: 'FORM_UNKNOWN',\n  //         gender: 'GENDER_UNKNOWN',\n  //         mood: 'MOOD_UNKNOWN',\n  //         number: 'SINGULAR',\n  //         person: 'PERSON_UNKNOWN',\n  //         proper: 'PROPER',\n  //         reciprocity: 'RECIPROCITY_UNKNOWN',\n  //         tense: 'TENSE_UNKNOWN',\n  //         voice: 'VOICE_UNKNOWN'\n  //       },\n  //       dependencyEdge: {\n  //         headTokenIndex: 1,\n  //         label: 'NSUBJ'\n  //       },\n  //       lemma: 'Google'\n  //     },\n  //     // ...\n  //   ]\n  // }\n});"},{"caption":"<p>To request only certain annotation types, provide an options object.</p>","code":"var options = {\n  entities: true,\n  sentiment: true\n};\n\ndocument.annotate(function(err, annotation) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  // annotation = {\n  //   language: 'en',\n  //   sentiment: {\n  //     magnitude: 0.5,\n  //     score: 0.5\n  //   },\n  //   entities: [\n  //     {\n  //       name: 'Google',\n  //       type: 'ORGANIZATION',\n  //       metadata: {\n  //         mid: '/m/045c7b',\n  //         wikipedia_url: 'http://en.wikipedia.org/wiki/Google'\n  //       },\n  //       salience: 0.7532734870910645,\n  //       mentions: [\n  //         {\n  //           text: {\n  //             content: 'Google',\n  //             beginOffset: -1\n  //           },\n  //           type: 'PROPER'\n  //         },\n  //         // ...\n  //       }\n  //     }\n  //   ]\n  // }\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"document.annotate().then(function(data) {\n  var annotation = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object. See <a href=\"https://cloud.google.com/natural-language/docs/reference/rest/v1/documents/annotateText#features\">documents.annotateText</a>.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.encoding","description":"<ul> <li><code>UTF8</code> (also, <code>buffer</code>), <code>UTF16</code> (also <code>string</code>), or <code>UTF32</code>. (Alias for <code>options.encodingType</code>). Default:  &#39;UTF8&#39; if a Buffer, otherwise &#39;UTF16&#39;. See  <a href=\"https://cloud.google.com/natural-language/reference/rest/v1/EncodingType\"><code>EncodingType</code></a></li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.entities","description":"<ul> <li>Detect the entities from this document. By default, all features (<code>entities</code>, <code>sentiment</code>, and <code>syntax</code>) are  enabled. By overriding any of these values, all defaults are switched to  <code>false</code>. (Alias for <code>options.extractEntities</code>)</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"options.sentiment","description":"<ul> <li>Detect the sentiment from this document. By default, all features (<code>entities</code>, <code>sentiment</code>, and <code>syntax</code>) are  enabled. By overriding any of these values, all defaults are switched to  <code>false</code>. (Alias for <code>options.extractSentiment</code>)</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"options.syntax","description":"<ul> <li>Detect the syntax from this document. By default, all features (<code>entities</code>, <code>sentiment</code>, and <code>syntax</code>) are  enabled. By overriding any of these values, all defaults are switched to  <code>false</code>. (Alias for <code>options.extractDocumentSyntax</code>)</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error occurred while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.annotation","description":"<ul> <li>The formatted API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"callback.annotation.language","description":"<ul> <li>The language detected from the text.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"callback.annotation.sentiment","description":"<ul> <li>An object representing the overall sentiment of the text.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"callback.annotation.entities","description":"<ul> <li>The recognized entities from the text, grouped by the type of entity.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"callback.annotation.sentences","description":"<ul> <li>Sentences detected from the text.</li> </ul> ","types":["string[]"],"optional":false,"nullable":false},{"name":"callback.annotation.tokens","description":"<ul> <li>Parts of speech that were detected from the text.</li> </ul> ","types":["object[]"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"detectEntities","name":"detectEntities","type":"instance","description":"<p>Detect entities from the document.</p>","source":"packages/language/src/document.js#L514","resources":[{"title":"documents.analyzeEntities API Documentation","link":"https://cloud.google.com/natural-language/reference/rest/v1/documents/analyzeEntities"}],"examples":[{"code":"document.detectEntities(function(err, entities) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  // entities = [\n  //   {\n  //     name: 'Google',\n  //     type: 'ORGANIZATION',\n  //     metadata: {\n  //       mid: '/m/045c7b',\n  //       wikipedia_url: 'http://en.wikipedia.org/wiki/Google'\n  //     },\n  //     salience: 0.7532734870910645,\n  //     mentions: [\n  //       {\n  //         text: {\n  //           content: 'Google',\n  //           beginOffset: -1\n  //         },\n  //         type: 'PROPER'\n  //       },\n  //       // ...\n  //     }\n  //   },\n  //   // ...\n  // ]\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"document.detectEntities().then(function(data) {\n  var entities = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object. See <a href=\"https://cloud.google.com/natural-language/reference/rest/v1/documents/analyzeEntities#request-body\">documents.annotateText</a>.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.encoding","description":"<ul> <li><code>UTF8</code> (also, <code>buffer</code>), <code>UTF16</code> (also <code>string</code>), or <code>UTF32</code>. (Alias for <code>options.encodingType</code>). Default:  &#39;UTF8&#39; if a Buffer, otherwise &#39;UTF16&#39;. See  <a href=\"https://cloud.google.com/natural-language/reference/rest/v1/EncodingType\"><code>EncodingType</code></a></li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.verbose","description":"<ul> <li>Enable verbose mode for more detailed results. Default: <code>false</code></li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error occurred while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.entities","description":"<ul> <li>The recognized entities from the text, grouped by the type of entity.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"detectSentiment","name":"detectSentiment","type":"instance","description":"<p>Detect the sentiment of the text in this document.</p>","source":"packages/language/src/document.js#L570","resources":[{"title":"documents.analyzeSentiment API Documentation","link":"https://cloud.google.com/natural-language/reference/rest/v1/documents/analyzeSentiment"}],"examples":[{"code":"document.detectSentiment(function(err, sentiment) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  // sentiment = {\n  //   magnitude: 0.5,\n  //   score: 0.5\n  // }\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"document.detectSentiment().then(function(data) {\n  var sentiment = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object. See <a href=\"https://cloud.google.com/natural-language/reference/rest/v1/documents/analyzeSentiment#request-body\">documents.annotateText</a>.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.encoding","description":"<ul> <li><code>UTF8</code> (also, <code>buffer</code>), <code>UTF16</code> (also <code>string</code>), or <code>UTF32</code>. (Alias for <code>options.encodingType</code>). Default:  &#39;UTF8&#39; if a Buffer, otherwise &#39;UTF16&#39;. See  <a href=\"https://cloud.google.com/natural-language/reference/rest/v1/EncodingType\"><code>EncodingType</code></a></li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error occurred while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.sentiment","description":"<ul> <li>An object representing the overall sentiment of the text.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"detectSyntax","name":"detectSyntax","type":"instance","description":"<p>Detect syntax from the document.</p>","source":"packages/language/src/document.js#L649","resources":[{"title":"documents.analyzeSyntax API Documentation","link":"https://cloud.google.com/natural-language/reference/rest/v1/documents/analyzeSyntax"}],"examples":[{"code":"document.detectSyntax(function(err, syntax) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  // syntax = [\n  //   {\n  //     text: {\n  //       content: 'Google',\n  //       beginOffset: -1\n  //     },\n  //     partOfSpeech: {\n  //       tag: 'NOUN',\n  //       aspect: 'ASPECT_UNKNOWN',\n  //       case: 'CASE_UNKNOWN',\n  //       form: 'FORM_UNKNOWN',\n  //       gender: 'GENDER_UNKNOWN',\n  //       mood: 'MOOD_UNKNOWN',\n  //       number: 'SINGULAR',\n  //       person: 'PERSON_UNKNOWN',\n  //       proper: 'PROPER',\n  //       reciprocity: 'RECIPROCITY_UNKNOWN',\n  //       tense: 'TENSE_UNKNOWN',\n  //       voice: 'VOICE_UNKNOWN'\n  //     },\n  //     dependencyEdge: {\n  //       headTokenIndex: 1,\n  //       label: 'NSUBJ'\n  //     },\n  //     lemma: 'Google'\n  //   },\n  //   // ...\n  // ]\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"document.detectSyntax().then(function(data) {\n  var syntax = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object. See <a href=\"https://cloud.google.com/natural-language/reference/rest/v1/documents/analyzeSyntax#request-body\">documents.annotateSyntax</a>.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.encoding","description":"<ul> <li><code>UTF8</code> (also, <code>buffer</code>), <code>UTF16</code> (also <code>string</code>), or <code>UTF32</code>. (Alias for <code>options.encodingType</code>). Default:  &#39;UTF8&#39; if a Buffer, otherwise &#39;UTF16&#39;. See  <a href=\"https://cloud.google.com/natural-language/reference/rest/v1/EncodingType\"><code>EncodingType</code></a></li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error occurred while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.syntax","description":"<ul> <li>The syntax recognized from the text.</li> </ul> ","types":["object[]"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"detectEncodingType_","name":"detectEncodingType_","type":"instance","description":"<p>Check if the user provided an encodingType, and map it to its API value.</p>","source":"packages/language/src/document.js#L678","resources":[],"examples":[],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"options.encoding","description":"<ul> <li><code>UTF8</code> (also, <code>buffer</code>), <code>UTF16</code> (also <code>string</code>), or <code>UTF32</code>. (Alias for <code>options.encodingType</code>). Default:  &#39;UTF8&#39; if a Buffer, otherwise &#39;UTF16&#39;. See  <a href=\"https://cloud.google.com/natural-language/reference/rest/v1/EncodingType\"><code>EncodingType</code></a></li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["string"],"description":"<ul> <li>The encodingType, as understood by the API.</li> </ul> "}]}],"path":"document.json"}