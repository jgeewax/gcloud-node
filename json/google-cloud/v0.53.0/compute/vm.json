{"id":"compute/vm","type":"class","name":"VM","overview":"<p>\n  This class allows you interact with Compute Engine.\n</p>\n\n\n<div class=\"notice\">\n  <strong><code>google-cloud</code> is deprecated</strong>\n  <p>\n    Due to the scope of our API rapidly increasing, you may notice a decrease in performance if you continue to use the bundled module, <code>google-cloud</code>.\n  </p>\n  <p>\n    Going forward, please install only the individual service modules that you need, such as <code>@google-cloud/compute</code>.\n  </p>\n</div>\n\n\n<p>\n  First, install <code>google-cloud</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save google-cloud</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>google-cloud</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Google Cloud Platform</h4>\n<div hljs language=\"javascript\">\nvar gcloud = require('google-cloud');\nvar gce = gcloud.compute();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar gcloud = require('google-cloud');\nvar gce = gcloud.compute({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>google-cloud</code> are outlined in our <a href=\"#/docs/google-cloud/0.53.0/guides/authentication\">Authentication guide</a>.\n</p>\n","description":"","source":"packages/compute/src/vm.js","parent":"compute","children":[],"methods":[{"id":"VM","name":"VM","type":"constructor","description":"<p>An Instance object allows you to interact with a Google Compute Engine instance.</p>","source":"packages/compute/src/vm.js#L99","resources":[{"title":"Instances and Networks","link":"https://cloud.google.com/compute/docs/instances-and-network"},{"title":"Instance Resource","link":"https://cloud.google.com/compute/docs/reference/v1/instances"}],"examples":[{"code":"var zone = gce.zone('zone-name');\n\nvar vm = zone.vm('vm-name');"}],"params":[],"exceptions":[],"returns":[]},{"id":"create","name":"create","type":"instance","description":"<p>Create a virtual machine.</p>","source":"packages/compute/src/vm.js#L140","resources":[],"examples":[{"code":"var config = {\n  // ...\n};\n\nvm.create(config, function(err, vm, operation, apiResponse) {\n  // `vm` is a VM object.\n\n  // `operation` is an Operation object that can be used to check the\n  // status of the request.\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"vm.create(config).then(function(data) {\n  var vm = data[0];\n  var operation = data[1];\n  var apiResponse = data[2];\n});"}],"params":[{"name":"config","description":"<ul> <li>See <a data-custom-type=\"compute/zone\" data-method=\"createVM\">compute/zone#createVM</a>.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"exists","name":"exists","type":"instance","description":"<p>Check if the vm exists.</p>","source":"packages/compute/src/vm.js#L160","resources":[],"examples":[{"code":"vm.exists(function(err, exists) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"vm.exists().then(function(data) {\n  var exists = data[0];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.exists","description":"<ul> <li>Whether the vm exists or not.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"get","name":"get","type":"instance","description":"<p>Get a virtual machine if it exists.</p><p>You may optionally use this to &quot;get or create&quot; an object by providing an object with <code>autoCreate</code> set to <code>true</code>. Any extra configuration that is normally required for the <code>create</code> method must be contained within this object as well.</p>","source":"packages/compute/src/vm.js#L187","resources":[],"examples":[{"code":"vm.get(function(err, vm, apiResponse) {\n  // `vm` is a VM object.\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"vm.get().then(function(data) {\n  var vm = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["options"],"optional":true,"nullable":false},{"name":"options.autoCreate","description":"<ul> <li>Automatically create the object if it does not exist. Default: <code>false</code></li> </ul> ","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"getMetadata","name":"getMetadata","type":"instance","description":"<p>Get the instance&#39;s metadata.</p>","source":"packages/compute/src/vm.js#L212","resources":[{"title":"Instance Resource","link":"https://cloud.google.com/compute/docs/reference/v1/instances"},{"title":"Instance: get API Documentation","link":"https://cloud.google.com/compute/docs/reference/v1/instances/get"}],"examples":[{"code":"vm.getMetadata(function(err, metadata, apiResponse) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"vm.getMetadata().then(function(data) {\n  var metadata = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.metadata","description":"<ul> <li>The instance&#39;s metadata.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"attachDisk","name":"attachDisk","type":"instance","description":"<p>Attach a disk to the instance.</p>","source":"packages/compute/src/vm.js#L275","resources":[{"title":"Disks Overview","link":"https://cloud.google.com/compute/docs/disks"},{"title":"Disk Resource","link":"https://cloud.google.com/compute/docs/reference/v1/disks"},{"title":"Instance: attachDisk API Documentation","link":"https://cloud.google.com/compute/docs/reference/v1/instances/attachDisk"}],"examples":[{"code":"var disk = zone.disk('my-disk');\n\nfunction callback(err, operation, apiResponse) {\n  // `operation` is an Operation object that can be used to check the status\n  // of the request.\n}\n\nvm.attachDisk(disk, callback);"},{"caption":"<p>Provide an options object to customize the request.</p>","code":"var options = {\n  autoDelete: true,\n  readOnly: true\n};\n\nvm.attachDisk(disk, options, callback);"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"vm.attachDisk(disk, options).then(function(data) {\n  var operation = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"disk","description":"<ul> <li>The disk to attach.</li> </ul> ","types":["<a data-custom-type=\"compute/disk\" data-method=\"\">compute/disk</a>"],"optional":false,"nullable":false},{"name":"options","description":"<ul> <li>See the <a href=\"https://cloud.google.com/compute/docs/reference/v1/instances/attachDisk\">Instances: attachDisk</a>  request body.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.readOnly","description":"<ul> <li>Attach the disk in read-only mode. (Alias for <code>options.mode = READ_ONLY</code>)</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.operation","description":"<ul> <li>An operation object that can be used to check the status of the request.</li> </ul> ","types":["<a data-custom-type=\"compute/operation\" data-method=\"\">compute/operation</a>"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[{"type":"Error","description":"<p>if a <a data-custom-type=\"compute/disk\" data-method=\"\">compute/disk</a> is not provided.</p>"}],"returns":[]},{"id":"delete","name":"delete","type":"instance","description":"<p>Delete the instance.</p>","source":"packages/compute/src/vm.js#L329","resources":[{"title":"Instance: delete API Documentation","link":"https://cloud.google.com/compute/docs/reference/v1/instances/delete"}],"examples":[{"code":"vm.delete(function(err, operation, apiResponse) {\n  // `operation` is an Operation object that can be used to check the status\n  // of the request.\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"vm.delete().then(function(data) {\n  var operation = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.operation","description":"<ul> <li>An operation object that can be used to check the status of the request.</li> </ul> ","types":["<a data-custom-type=\"compute/operation\" data-method=\"\">compute/operation</a>"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"detachDisk","name":"detachDisk","type":"instance","description":"<p>Detach a disk from the instance.</p>","source":"packages/compute/src/vm.js#L366","resources":[{"title":"Instance: detachDisk API Documentation","link":"https://cloud.google.com/compute/docs/reference/v1/instances/detachDisk"}],"examples":[{"code":"var disk = zone.disk('my-disk');\n\nvm.detachDisk(disk, function(err, operation, apiResponse) {\n  // `operation` is an Operation object that can be used to check the status\n  // of the request.\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"vm.detachDisk(disk).then(function(data) {\n  var operation = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"deviceName","description":"<ul> <li>The device name of the disk to detach. If a Disk object is provided, we try to find the device name  automatically by searching through the attached disks on the instance.</li> </ul> ","types":["<a data-custom-type=\"compute/disk\" data-method=\"\">compute/disk</a>","string"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.operation","description":"<ul> <li>An operation object that can be used to check the status of the request.</li> </ul> ","types":["<a data-custom-type=\"compute/operation\" data-method=\"\">compute/operation</a>"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"getSerialPortOutput","name":"getSerialPortOutput","type":"instance","description":"<p>Returns the serial port output for the instance.</p>","source":"packages/compute/src/vm.js#L437","resources":[{"title":"Instances: getSerialPortOutput API Documentation","link":"https://cloud.google.com/compute/docs/reference/v1/instances/getSerialPortOutput"}],"examples":[{"code":"vm.getSerialPortOutput(function(err, output, apiResponse) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"vm.getSerialPortOutput().then(function(data) {\n  var output = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"port","description":"<ul> <li>The port from which the output is retrieved (1-4). Default: <code>1</code>.</li> </ul> ","types":["number"],"optional":true,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.output","description":"<ul> <li>The output from the port.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"getTags","name":"getTags","type":"instance","description":"<p>Get the instance&#39;s tags and their fingerprint.</p><p>This method wraps <a data-custom-type=\"compute/vm\" data-method=\"getMetadata\">compute/vm#getMetadata</a>, returning only the <code>tags</code> property.</p>","source":"packages/compute/src/vm.js#L486","resources":[],"examples":[{"code":"vm.getTags(function(err, tags, fingerprint, apiResponse) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"vm.getTags().then(function(data) {\n  var tags = data[0];\n  var fingerprint = data[1];\n  var apiResponse = data[2];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.tags","description":"<ul> <li>Tag objects from this VM.</li> </ul> ","types":["object[]"],"optional":false,"nullable":false},{"name":"callback.fingerprint","description":"<ul> <li>The current tag fingerprint.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"reset","name":"reset","type":"instance","description":"<p>Reset the instance.</p>","source":"packages/compute/src/vm.js#L522","resources":[{"title":"Instances: reset API Documentation","link":"https://cloud.google.com/compute/docs/reference/v1/instances/reset"}],"examples":[{"code":"vm.reset(function(err, operation, apiResponse) {\n  // `operation` is an Operation object that can be used to check the status\n  // of the request.\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"vm.reset().then(function(data) {\n  var operation = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.operation","description":"<ul> <li>An operation object that can be used to check the status of the request.</li> </ul> ","types":["<a data-custom-type=\"compute/operation\" data-method=\"\">compute/operation</a>"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"resize","name":"resize","type":"instance","description":"<p>Set the machine type for this instance, <strong>stopping and restarting the VM as necessary</strong>.</p><p>For a list of the standard, high-memory, and high-CPU machines you may choose from, see <a href=\"<a href=\"https://cloud.google.com/compute/docs/machine-types#predefined_machine_types\">Predefined machine types</a>\">https://cloud.google.com/compute/docs/machine-types#predefined_machine_types}</a>.</p><p>In order to change the machine type, the VM must not be running. This method will automatically stop the VM if it is running before changing the machine type. After it is sucessfully changed, the VM will be started.</p>","source":"packages/compute/src/vm.js#L583","resources":[{"title":"Instances: setMachineType API Documentation","link":"https://cloud.google.com/compute/docs/reference/v1/instances/setMachineType"},{"title":"Predefined machine types","link":"https://cloud.google.com/compute/docs/machine-types#predefined_machine_types"}],"examples":[{"code":"vm.resize('n1-standard-1', function(err, apiResponse) {\n  if (!err) {\n    // The VM is running and its machine type was changed successfully.\n  }\n});"},{"caption":"<p>By default, calling <code>resize</code> will start your server after updating its \nmachine type. If you want to leave it stopped, set <code>options.start</code> to \n<code>false</code>.</p>","code":"var options = {\n  start: false\n};\n\nvm.resize('ns-standard-1', options, function(err, apiResponse) {\n  if (!err) {\n    // The VM is stopped and its machine type was changed successfully.\n  }\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"vm.resize('ns-standard-1', options).then(function(data) {\n  var apiResponse = data[0];\n});"}],"params":[{"name":"machineType","description":"<ul> <li>Full or partial machine type. See a list of predefined machine types  <a href=\"https://cloud.google.com/compute/docs/machine-types#predefined_machine_types\">here</a>.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.start","description":"<ul> <li>Start the VM after successfully updating the machine type. Default: <code>false</code>.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"setMetadata","name":"setMetadata","type":"instance","description":"<p>Set the metadata for this instance.</p>","source":"packages/compute/src/vm.js#L667","resources":[{"title":"Instances: setMetadata API Documentation","link":"https://cloud.google.com/compute/docs/reference/v1/instances/setMetadata"}],"examples":[{"code":"var metadata = {\n  'startup-script': '...'\n};\n\nvm.setMetadata(metadata, function(err, operation, apiResponse) {\n  // `operation` is an Operation object that can be used to check the status\n  // of the request.\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"vm.setMetadata(metadata).then(function(data) {\n  var operation = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"metadata","description":"<ul> <li>New metadata.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.operation","description":"<ul> <li>An operation object that can be used to check the status of the request.</li> </ul> ","types":["<a data-custom-type=\"compute/operation\" data-method=\"\">compute/operation</a>"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"setTags","name":"setTags","type":"instance","description":"<p>Set the instance&#39;s tags.</p>","source":"packages/compute/src/vm.js#L739","resources":[{"title":"Instances: setTags API Documentation","link":"https://cloud.google.com/compute/docs/reference/v1/instances/setTags"}],"examples":[{"code":"vm.getTags(function(err, tags, fingerprint) {\n  tags.push('new-tag');\n\n vm.setTags(tags, fingerprint, function(err, operation, apiResponse) {\n    // `operation` is an Operation object that can be used to check the\n    //  status of the request.\n  });\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"vm.getTags().then(function(data) {\n  var tags = data[0];\n  var fingerprint = data[1];\n\n  tags.push('new-tag');\n\n  return vm.setTags(tags, fingerprint);\n}).then(function(data) {\n  var operation = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"tags","description":"<ul> <li>The new tags for the instance.</li> </ul> ","types":["string[]"],"optional":false,"nullable":false},{"name":"fingerprint","description":"<ul> <li>The current tags fingerprint. An up-to-date fingerprint must be provided.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.operation","description":"<ul> <li>An operation object that can be used to check the status of the request.</li> </ul> ","types":["<a data-custom-type=\"compute/operation\" data-method=\"\">compute/operation</a>"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"start","name":"start","type":"instance","description":"<p>Start the instance.</p>","source":"packages/compute/src/vm.js#L777","resources":[{"title":"Instances: start API Documentation","link":"https://cloud.google.com/compute/docs/reference/v1/instances/start"}],"examples":[{"code":"vm.start(function(err, operation, apiResponse) {\n  // `operation` is an Operation object that can be used to check the status\n  // of the request.\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"vm.start().then(function(data) {\n  var operation = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.operation","description":"<ul> <li>An operation object that can be used to check the status of the request.</li> </ul> ","types":["<a data-custom-type=\"compute/operation\" data-method=\"\">compute/operation</a>"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"stop","name":"stop","type":"instance","description":"<p>Stop the instance.</p>","source":"packages/compute/src/vm.js#L809","resources":[{"title":"Instances: stop API Documentation","link":"https://cloud.google.com/compute/docs/reference/v1/instances/stop"}],"examples":[{"code":"vm.stop(function(err, operation, apiResponse) {\n  // `operation` is an Operation object that can be used to check the status\n  // of the request.\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"vm.stop().then(function(data) {\n  var operation = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.operation","description":"<ul> <li>An operation object that can be used to check the status of the request.</li> </ul> ","types":["<a data-custom-type=\"compute/operation\" data-method=\"\">compute/operation</a>"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"waitFor","name":"waitFor","type":"instance","description":"<p>This function will callback when the VM is in the specified state.</p><p>Will time out after the specified time (default: 300 seconds).</p>","source":"packages/compute/src/vm.js#L867","resources":[],"examples":[{"code":"vm.waitFor('RUNNING', function(err, metadata) {\n  if (!err) {\n    // The VM is running.\n  }\n});"},{"caption":"<p>By default, <code>waitFor</code> will timeout after 300 seconds while waiting for the \ndesired state to occur. This can be changed to any number between 0 and \n600. If the timeout is set to 0, it will poll once for status and then \ntimeout if the desired state is not reached.</p>","code":"var options = {\n  timeout: 600\n};\n\nvm.waitFor('TERMINATED', options, function(err, metadata) {\n  if (!err) {\n    // The VM is terminated.\n  }\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"vm.waitFor('RUNNING', options).then(function(data) {\n  var metadata = data[0];\n});"}],"params":[{"name":"status","description":"<ul> <li>The status to wait for. This can be: - &quot;PROVISIONING&quot;<ul> <li>&quot;STAGING&quot;</li> <li>&quot;RUNNING&quot;</li> <li>&quot;STOPPING&quot;</li> <li>&quot;SUSPENDING&quot;</li> <li>&quot;SUSPENDED&quot;</li> <li>&quot;TERMINATED&quot;</li> </ul> </li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.timeout","description":"<ul> <li>The number of seconds to wait until timing out, between <code>0</code> and <code>600</code>. Default: <code>300</code></li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while waiting for the status.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.metadata","description":"<ul> <li>The instance&#39;s metadata.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]}],"path":"vm.json"}