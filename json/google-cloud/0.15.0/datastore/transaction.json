{"id":"datastore/transaction","type":"class","name":"Transaction","description":null,"source":"/lib/datastore/transaction.js#L71","parent":"datastore","children":[],"methods":[{"id":"Transaction","name":"Transaction","type":"constructor","description":"<p>Build a Transaction object. Transactions will be created for you by <a data-custom-type=\"datastore/dataset\">datastore/dataset</a>. When you need to run a transactional operation, use <a data-custom-type=\"datastore/dataset\" data-method=\"runInTransaction\">datastore/dataset#runInTransaction</a>.</p><p><em><a href=\"http://goo.gl/n4oSjt\">Reference</a>.</em></p>","source":"/lib/datastore/transaction.js#L71","resources":[],"examples":[{"code":"dataset.runInTransaction(function(transaction, done) {\n  // `transaction` is a Transaction object.\n}, function(err) {});"}],"params":[],"exceptions":[],"returns":[]},{"id":"rollback","name":"rollback","type":"instance","description":"<p>Reverse a transaction remotely and finalize the current transaction instance.</p>","source":"/lib/datastore/transaction.js#L132","resources":[],"examples":[{"code":"transaction.rollback(function(err) {\n  if (err) {\n    // Transaction could not be rolled back.\n  }\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"delete","name":"delete","type":"instance","description":"<p>Delete all entities identified with the specified key(s) in the current transaction.</p>","source":"/lib/datastore/transaction.js#L275","resources":[],"examples":[{"code":"// Delete a single entity.\ntransaction.delete(dataset.key(['Company', 123]));\n\n// Delete multiple entities at once.\ntransaction.delete([\n  dataset.key(['Company', 123]),\n  dataset.key(['Product', 'Computer'])\n]);"}],"params":[{"name":"key","description":"<ul> <li>Datastore key object(s).</li> </ul> ","types":["Key","Key[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"save","name":"save","type":"instance","description":"<p>Insert or update the specified object(s) in the current transaction. If a key is incomplete, its associated object is inserted and the original Key object is updated to contain the generated ID.</p><p>This method will determine the correct Datastore method to execute (<code>upsert</code>, <code>insert</code>, <code>update</code>, and <code>insertAutoId</code>) by using the key(s) provided. For example, if you provide an incomplete key (one without an ID), the request will create a new entity and have its ID automatically assigned. If you provide a complete key, the entity will be updated with the data specified.</p><p>By default, all properties are indexed. To prevent a property from being included in <em>all</em> indexes, you must supply an entity&#39;s <code>data</code> property as an array. See below for an example.</p>","source":"/lib/datastore/transaction.js#L363","resources":[],"examples":[{"caption":"<p>Save a single entity. \nNotice that we are providing an incomplete key. After the transaction is \ncommitted, the Key object held by the <code>key</code> variable will be populated \nwith a path containing its generated ID.</p>","code":"var key = dataset.key('Company');\n\ntransaction.save({\n  key: key,\n  data: {\n    rating: '10'\n  }\n});"},{"caption":"<p>To specify an <code>excludeFromIndexes</code> value for a Datastore entity, pass in \nan array for the key's data. The above example would then look like:</p>","code":"transaction.save({\n  key: key,\n  data: [\n    {\n      name: 'rating',\n      value: '10',\n      excludeFromIndexes: false\n    }\n  ]\n});"},{"caption":"<p>Save multiple entities at once.</p>","code":"var companyKey = dataset.key(['Company', 123]);\nvar productKey = dataset.key(['Product', 'Computer']);\ntransaction.save([\n  {\n    key: companyKey,\n    data: {\n      HQ: 'Dallas, TX'\n    }\n  },\n  {\n    key: productKey,\n    data: {\n      vendor: 'Dell'\n    }\n  }\n]);"}],"params":[{"name":"entities","description":"<ul> <li>Datastore key object(s).</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false},{"name":"entities.key","description":"<ul> <li>Datastore key object.</li> </ul> ","types":["Key"],"optional":false,"nullable":false},{"name":"entities.data","description":"<ul> <li>Data to save with the provided key. If you provide an array of objects, you must use the explicit syntax:  <code>name</code> for the name of the property and <code>value</code> for its value. You may  also specify an <code>excludeFromIndexes</code> property, set to <code>true</code> or <code>false</code>.</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"get","name":"get","type":"instance","description":"<p>Retrieve the entities identified with the specified key(s) in the current transaction. Get operations require a valid key to retrieve the key-identified entity from Datastore.</p>","source":"gcloud-node/lib/datastore/request.js#L110","resources":[],"examples":[{"caption":"<p>Where you see <code>transaction</code>, assume this is the context that's relevant to \nyour use, whether that be a Dataset or Transaction object.</p>","code":"// Get a single entity.\nvar key = dataset.key(['Company', 123]);\ntransaction.get(key, function(err, entity, apiResponse) {});\n\n// Get multiple entities at once.\ntransaction.get([\n  dataset.key(['Company', 123]),\n  dataset.key(['Product', 'Computer'])\n], function(err, entities, apiResponse) {});"}],"params":[{"name":"keys","description":"<ul> <li>Datastore key object(s).</li> </ul> ","types":["Key","Key[]"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"insert","name":"insert","type":"instance","description":"<p>Maps to <a data-custom-type=\"datastore/dataset\" data-method=\"save\">datastore/dataset#save</a>, forcing the method to be <code>insert</code>.</p>","source":"gcloud-node/lib/datastore/request.js#L156","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"runQuery","name":"runQuery","type":"instance","description":"<p>Datastore allows you to query entities by kind, filter them by property filters, and sort them by a property name. Projection and pagination are also supported.</p><p>If you provide a callback, the query is run, and the results are returned as the second argument to your callback. A third argument will also exist, which is the <code>endCursor</code> of the previously-run query. You can use this to extend the query you just ran to see if more results exist.</p><p>You may also omit the callback to this function to trigger streaming mode.</p><p>See below for examples of both approaches.</p>","source":"gcloud-node/lib/datastore/request.js#L499","resources":[],"examples":[{"caption":"<p>Where you see <code>transaction</code>, assume this is the context that's relevant to \nyour use, whether that be a Dataset or a Transaction object.</p>","code":"var query = dataset.createQuery('Lion');\n\n// Retrieve 5 companies.\ntransaction.runQuery(query, function(err, entities, endCursor, apiResponse) {\n  // Use `endCursor` as the starting cursor for your next query.\n  var nextQuery = query.start(endCursor);\n  var callback = function(err, entities, endCursor, apiResponse) {};\n  transaction.runQuery(nextQuery, callback);\n});"},{"caption":"<p>If you omit the callback, runQuery will automatically call subsequent \nqueries until no results remain. Entity objects will be pushed as they are \nfound.</p>","code":"transaction.runQuery(query)\n  .on('data', function (entity) {});"}],"params":[{"name":"q","description":"<ul> <li>Query object.</li> </ul> ","types":["<a data-custom-type=\"datastore/query\">datastore/query</a>"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function. If omitted, a readable stream instance is returned.</li> </ul> ","types":["function"],"optional":true,"nullable":false}],"exceptions":[],"returns":[]},{"id":"allocateIds","name":"allocateIds","type":"instance","description":"<p>Generate IDs without creating entities.</p>","source":"gcloud-node/lib/datastore/request.js#L599","resources":[],"examples":[{"caption":"<p>Where you see <code>transaction</code>, assume this is the context that's relevant to \nyour use, whether that be a Dataset or a Transaction object.</p>","code":"var incompleteKey = dataset.key(['Company']);\n\n// The following call will create 100 new IDs from the Company kind, which\n// exists under the default namespace.\ntransaction.allocateIds(incompleteKey, 100, function(err, keys) {});\n\n// You may prefer to create IDs from a non-default namespace by providing an\n// incomplete key with a namespace. Similar to the previous example, the call\n// below will create 100 new IDs, but from the Company kind that exists under\n// the \"ns-test\" namespace.\nvar incompleteKey = dataset.key({\n  namespace: 'ns-test',\n  path: ['Company']\n});\nvar callback = function(err, keys, apiResponse) {};\ntransaction.allocateIds(incompleteKey, 100, callback);"}],"params":[{"name":"incompleteKey","description":"<ul> <li>The key object to complete.</li> </ul> ","types":["Key"],"optional":false,"nullable":false},{"name":"n","description":"<ul> <li>How many IDs to generate.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"update","name":"update","type":"instance","description":"<p>Maps to <a data-custom-type=\"datastore/dataset\" data-method=\"save\">datastore/dataset#save</a>, forcing the method to be <code>update</code>.</p>","source":"gcloud-node/lib/datastore/request.js#L628","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"upsert","name":"upsert","type":"instance","description":"<p>Maps to <a data-custom-type=\"datastore/dataset\" data-method=\"save\">datastore/dataset#save</a>, forcing the method to be <code>upsert</code>.</p>","source":"gcloud-node/lib/datastore/request.js#L636","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]}]}