{"id":"storage/bucket","type":"class","name":"Bucket","description":null,"source":"/lib/storage/bucket.js#L87","parent":"storage","children":[],"methods":[{"id":"Bucket","name":"Bucket","type":"constructor","description":"<p>Create a Bucket object to interact with a Google Cloud Storage bucket.</p>","source":"/lib/storage/bucket.js#L87","resources":[],"examples":[{"code":"var gcloud = require('gcloud');\n\nvar storage = gcloud.storage({\n  projectId: 'grape-spaceship-123'\n});\n\nvar albums = storage.bucket('albums');"}],"params":[{"name":"options","description":"<ul> <li>Configuration options.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"options.bucketName","description":"<ul> <li>Name of the bucket.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.keyFilename","description":"<ul> <li>Full path to the JSON key downloaded from the Google Developers Console. Alternatively, you may provide a  <code>credentials</code> object.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"options.credentials","description":"<ul> <li>Credentials object, used in place of a <code>keyFilename</code>.</li> </ul> ","types":["object"],"optional":true,"nullable":false}],"exceptions":[{"type":"Error","description":"<p>if a bucket name isn&#39;t provided.</p>"}],"returns":[]},{"id":"acl","name":"acl","type":"instance","description":"<p>Google Cloud Storage uses access control lists (ACLs) to manage object and bucket access. ACLs are the mechanism you use to share objects with other users and allow other users to access your buckets and objects.</p><p>An ACL consists of one or more entries, where each entry grants permissions to a scope. Permissions define the actions that can be performed against an object or bucket (for example, <code>READ</code> or <code>WRITE</code>); the scope defines who the permission applies to (for example, a specific user or group of users).</p><p>For more detailed information, see <a href=\"http://goo.gl/6qBBPO\">About Access Control Lists</a>.</p><p>The <code>acl</code> object on a Bucket instance provides methods to get you a list of the ACLs defined on your bucket, as well as set, update, and delete them.</p><p>Buckets also have <a href=\"https://cloud.google.com/storage/docs/accesscontrol#default\">default ACLs</a> for all created files. Default ACLs specify permissions that all new objects added to the bucket will inherit by default. You can add, delete, get, and update scopes and permissions for these as well with <a data-custom-type=\"storage/bucket\" data-method=\"acl.default\">storage/bucket#acl.default</a>.</p>","source":"/lib/storage/bucket.js#L131","resources":[],"examples":[{"caption":"<p>Make a bucket's contents publicly readable.</p>","code":"var myBucket = storage.bucket('my-bucket');\nmyBucket.acl.add({\n  scope: 'allUsers',\n  role: storage.acl.READER_ROLE\n}, function(err, aclObject) {});"}],"params":[],"exceptions":[],"returns":[]},{"id":"acl.default","name":"acl.default","type":"instance","description":"<p>Google Cloud Storage Buckets have <a href=\"http://goo.gl/YpGdyv\">default ACLs</a> for all created files. You can add, delete, get, and update scopes and permissions for these as well. The method signatures and examples are all the same, after only prefixing the method call with <code>default</code>.</p>","source":"/lib/storage/bucket.js#L157","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"acl.default.add","name":"acl.default.add","type":"instance","description":"<p>Maps to <a data-custom-type=\"storage/bucket\" data-method=\"acl.add\">storage/bucket#acl.add</a>.</p>","source":"/lib/storage/bucket.js#L163","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"acl.default.delete","name":"acl.default.delete","type":"instance","description":"<p>Maps to <a data-custom-type=\"storage/bucket\" data-method=\"acl.delete\">storage/bucket#acl.delete</a>.</p>","source":"/lib/storage/bucket.js#L169","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"acl.default.get","name":"acl.default.get","type":"instance","description":"<p>Maps to <a data-custom-type=\"storage/bucket\" data-method=\"acl.get\">storage/bucket#acl.get</a>.</p>","source":"/lib/storage/bucket.js#L175","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"acl.default.update","name":"acl.default.update","type":"instance","description":"<p>Maps to <a data-custom-type=\"storage/bucket\" data-method=\"acl.update\">storage/bucket#acl.update</a>.</p>","source":"/lib/storage/bucket.js#L181","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"acl.default.owners","name":"acl.default.owners","type":"instance","description":"<p>Maps to <a data-custom-type=\"storage/bucket\" data-method=\"acl.owners\">storage/bucket#acl.owners</a>.</p>","source":"/lib/storage/bucket.js#L187","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"acl.default.readers","name":"acl.default.readers","type":"instance","description":"<p>Maps to <a data-custom-type=\"storage/bucket\" data-method=\"acl.readers\">storage/bucket#acl.readers</a>.</p>","source":"/lib/storage/bucket.js#L193","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"combine","name":"combine","type":"instance","description":"<p>Combine mutliple files into one new file.</p>","source":"/lib/storage/bucket.js#L232","resources":[],"examples":[{"code":"var logBucket = storage.bucket('log-bucket');\n\nvar logs2013 = logBucket.file('2013-logs.txt');\nvar logs2014 = logBucket.file('2014-logs.txt');\n\nvar allLogs = logBucket.file('all-logs.txt');\n\nlogBucket.combine([\n  logs2013,\n  logs2014\n], allLogs, function(err, newFile, apiResponse) {\n  // newFile === allLogs\n});"}],"params":[{"name":"sources","description":"<ul> <li>The source files that will be combined.</li> </ul> ","types":["string[]","<a data-custom-type=\"storage/file\">storage/file</a>"],"optional":false,"nullable":false},{"name":"destination","description":"<ul> <li>The file you would like the source files combined into.</li> </ul> ","types":["string","<a data-custom-type=\"storage/file\">storage/file</a>"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false}],"exceptions":[{"type":"Error","description":"<p>if a non-array is provided as sources argument.</p>"},{"type":"Error","description":"<p>if less than two sources are provided.</p>"},{"type":"Error","description":"<p>if no destination is provided.</p>"},{"type":"Error","description":"<p>if content type can&#39;t be determined for the destination file.</p>"}],"returns":[]},{"id":"delete","name":"delete","type":"instance","description":"<p>Delete the bucket.</p>","source":"/lib/storage/bucket.js#L308","resources":[],"examples":[{"code":"var bucket = storage.bucket('delete-me');\nbucket.delete(function(err, apiResponse) {});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false}],"exceptions":[],"returns":[]},{"id":"file","name":"file","type":"instance","description":"<p>Create a File object. See <a data-custom-type=\"storage/file\">storage/file</a> to see how to handle the different use cases you may have.</p>","source":"/lib/storage/bucket.js#L326","resources":[],"examples":[{"code":"var file = bucket.file('my-existing-file.png');"}],"params":[{"name":"name","description":"<ul> <li>The name of the file in this bucket.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options","description":"<ul> <li>Configuration options.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.generation","description":"<ul> <li>Only use a specific revision of this file.</li> </ul> ","types":["string","number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"getFiles","name":"getFiles","type":"instance","description":"<p>Get File objects for the files currently in the bucket.</p>","source":"/lib/storage/bucket.js#L382","resources":[],"examples":[{"code":"bucket.getFiles(function(err, files, nextQuery, apiResponse) {\n  if (nextQuery) {\n    // nextQuery will be non-null if there are more results.\n    bucket.getFiles(nextQuery, function(err, files, nextQ, apiResponse) {});\n  }\n\n  // The `metadata` property is populated for you with the metadata at the\n  // time of fetching.\n  files[0].metadata;\n\n  // However, in cases where you are concerned the metadata could have\n  // changed, use the `getMetadata` method.\n  files[0].getMetadata(function(err, metadata) {});\n});"},{"caption":"<p>Fetch using a query.</p>","code":"bucket.getFiles({\n  maxResults: 5\n}, function(err, files, nextQuery, apiResponse) {});"},{"caption":"<p>If your bucket has versioning enabled, you can get all of your files \nscoped to their generation.</p>","code":"bucket.getFiles({\n  versions: true\n}, function(err, files, nextQuery, apiResponse) {\n  // Each file is scoped to its generation.\n});"}],"params":[{"name":"query","description":"<ul> <li>Query object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"query.delimiter","description":"<ul> <li>Results will contain only objects whose names, aside from the prefix, do not contain delimiter. Objects whose  names, aside from the prefix, contain delimiter will have their name  truncated after the delimiter, returned in <code>apiResponse.prefixes</code>.  Duplicate prefixes are omitted.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"query.prefix","description":"<ul> <li>Filter results to objects whose names begin with this prefix.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"query.maxResults","description":"<ul> <li>Maximum number of items plus prefixes to return.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"query.pageToken","description":"<ul> <li>A previously-returned page token representing part of the larger set of results to view.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"query.versions","description":"<ul> <li>If true, returns File objects scoped to their versions.</li> </ul> ","types":["bool"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"getMetadata","name":"getMetadata","type":"instance","description":"<p>Get the bucket&#39;s metadata.</p><p>To set metadata, see <a data-custom-type=\"storage/bucket\" data-method=\"setMetadata\">storage/bucket#setMetadata</a>.</p>","source":"/lib/storage/bucket.js#L429","resources":[],"examples":[{"code":"bucket.getMetadata(function(err, metadata, apiResponse) {});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false}],"exceptions":[],"returns":[]},{"id":"makePrivate","name":"makePrivate","type":"instance","description":"<p>Make the bucket listing private.</p><p>You may also choose to make the contents of the bucket private by specifying <code>includeFiles: true</code>. This will automatically run <a data-custom-type=\"storage/file\" data-method=\"makePrivate\">storage/file#makePrivate</a> for every file in the bucket.</p><p>When specifying <code>includeFiles: true</code>, use <code>force: true</code> to delay execution of your callback until all files have been processed. By default, the callback is executed after the first error. Use <code>force</code> to queue such errors until all files have been procssed, after which they will be returned as an array as the first argument to your callback.</p><p>NOTE: This may cause the process to be long-running and use a high number of requests. Use with caution.</p>","source":"/lib/storage/bucket.js#L502","resources":[],"examples":[{"caption":"<p>Make the bucket private.</p>","code":"bucket.makePrivate(function(err) {});"},{"caption":"<p>Make the bucket and its contents private.</p>","code":"var opts = {\n  includeFiles: true\n};\n\nbucket.makePrivate(opts, function(err, files) {\n  // `err`:\n  //    The first error to occur, otherwise null.\n  //\n  // `files`:\n  //    Array of files successfully made private in the bucket.\n});"},{"caption":"<p>Make the bucket and its contents private, using force to suppress errors \nuntil all files have been processed.</p>","code":"var opts = {\n  includeFiles: true,\n  force: true\n};\n\nbucket.makePrivate(opts, function(errors, files) {\n  // `errors`:\n  //    Array of errors if any occurred, otherwise null.\n  //\n  // `files`:\n  //    Array of files successfully made private in the bucket.\n});"}],"params":[{"name":"options","description":"<ul> <li>The configuration object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.includeFiles","description":"<ul> <li>Make each file in the bucket private. Default: <code>false</code>.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"options.force","description":"<ul> <li>Queue errors occurred while making files private until all files have been processed.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"makePublic","name":"makePublic","type":"instance","description":"<p>Make the bucket publicly readable.</p><p>You may also choose to make the contents of the bucket publicly readable by specifying <code>includeFiles: true</code>. This will automatically run <a data-custom-type=\"storage/file\" data-method=\"makePublic\">storage/file#makePublic</a> for every file in the bucket.</p><p>When specifying <code>includeFiles: true</code>, use <code>force: true</code> to delay execution of your callback until all files have been processed. By default, the callback is executed after the first error. Use <code>force</code> to queue such errors until all files have been procssed, after which they will be returned as an array as the first argument to your callback.</p><p>NOTE: This may cause the process to be long-running and use a high number of requests. Use with caution.</p>","source":"/lib/storage/bucket.js#L607","resources":[],"examples":[{"caption":"<p>Make the bucket publicly readable.</p>","code":"bucket.makePublic(function(err) {});"},{"caption":"<p>Make the bucket and its contents publicly readable.</p>","code":"var opts = {\n  includeFiles: true\n};\n\nbucket.makePublic(opts, function(err, files) {\n  // `err`:\n  //    The first error to occur, otherwise null.\n  //\n  // `files`:\n  //    Array of files successfully made public in the bucket.\n});"},{"caption":"<p>Make the bucket and its contents publicly readable, using force to \nsuppress errors until all files have been processed.</p>","code":"var opts = {\n  includeFiles: true,\n  force: true\n};\n\nbucket.makePublic(opts, function(errors, files) {\n  // `errors`:\n  //    Array of errors if any occurred, otherwise null.\n  //\n  // `files`:\n  //    Array of files successfully made public in the bucket.\n});"}],"params":[{"name":"options","description":"<ul> <li>The configuration object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.includeFiles","description":"<ul> <li>Make each file in the bucket publicly readable. Default: <code>false</code>.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"options.force","description":"<ul> <li>Queue errors occurred while making files public until all files have been processed.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"setMetadata","name":"setMetadata","type":"instance","description":"<p>Set the bucket&#39;s metadata.</p>","source":"/lib/storage/bucket.js#L675","resources":[],"examples":[{"caption":"<p>Set website metadata field on the bucket.</p>","code":"bucket.setMetadata({\n  website: {\n    mainPageSuffix: 'http://example.com',\n    notFoundPage: 'http://example.com/404.html'\n  }\n}, function(err, metadata, apiResponse) {});"},{"caption":"<p>Enable versioning for your bucket.</p>","code":"bucket.setMetadata({\n  versioning: {\n    enabled: true\n  }\n}, function(err, metadata, apiResponse) {});"}],"params":[{"name":"metadata","description":"<ul> <li>The metadata you wish to set.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false}],"exceptions":[],"returns":[]},{"id":"upload","name":"upload","type":"instance","description":"<p>Upload a file to the bucket. This is a convenience method that wraps the functionality provided by a File object, <a data-custom-type=\"storage/file\">storage/file</a>.</p>","source":"/lib/storage/bucket.js#L769","resources":[],"examples":[{"caption":"<p>The easiest way to upload a file.</p>","code":"bucket.upload('/local/path/image.png', function(err, file, apiResponse) {\n  // Your bucket now contains:\n  // - \"image.png\" (with the contents of `/local/path/image.png')\n\n  // `file` is an instance of a File object that refers to your new file.\n});"},{"caption":"<p>It's not always that easy. You will likely want to specify the filename \nused when your new file lands in your bucket. \nYou may also want to set metadata or customize other options.</p>","code":"var options = {\n  destination: 'new-image.png',\n  resumable: true,\n  validation: 'crc32c',\n  metadata: {\n    event: 'Fall trip to the zoo'\n  }\n};\n\nbucket.upload('local-image.png', options, function(err, file) {\n  // Your bucket now contains:\n  // - \"new-image.png\" (with the contents of `local-image.png')\n\n  // `file` is an instance of a File object that refers to your new file.\n});"},{"caption":"<p>You may also re-use a File object, <a data-custom-type=\"storage/file\">storage/file</a>, that references \nthe file you wish to create or overwrite.</p>","code":"var options = {\n  destination: bucket.file('existing-file.png'),\n  resumable: false\n};\n\nbucket.upload('local-img.png', options, function(err, newFile) {\n  // Your bucket now contains:\n  // - \"existing-file.png\" (with the contents of `local-img.png')\n\n  // Note:\n  // The `newFile` parameter is equal to `file`.\n});"}],"params":[{"name":"localPath","description":"<ul> <li>The fully qualified path to the file you wish to upload to your bucket.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options","description":"<ul> <li>Configuration options.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.destination","description":"<ul> <li>The place to save your file. If given a string, the file will be uploaded to the bucket  using the string as a filename. When given a File object, your local file  will be uploaded to the File object&#39;s bucket and under the File object&#39;s  name. Lastly, when this argument is omitted, the file is uploaded to your  bucket using the name of the local file.</li> </ul> ","types":["string","<a data-custom-type=\"storage/file\">storage/file</a>"],"optional":false,"nullable":false},{"name":"options.metadata","description":"<ul> <li>Metadata to set for your file.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.resumable","description":"<ul> <li>Force a resumable upload. (default: true for files larger than 5MB). Read more about resumable uploads  <a href=\"http://goo.gl/1JWqCF\">here</a>. NOTE: This behavior is only possible with  this method, and not <a data-custom-type=\"storage/file\" data-method=\"createWriteStream\">storage/file#createWriteStream</a>. When  working with streams, the file format and size is unknown until it&#39;s  completely consumed. Because of this, it&#39;s best for you to be explicit  for what makes sense given your input.</li> </ul> ","types":["boolean"],"optional":true,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"options.validation","description":"<ul> <li>Possible values: <code>&quot;md5&quot;</code>, <code>&quot;crc32c&quot;</code>, or <code>false</code>. By default, data integrity is validated with an  MD5 checksum for maximum reliability. CRC32c will provide better  performance with less reliability. You may also choose to skip validation  completely, however this is <strong>not recommended</strong>.</li> </ul> ","types":["string","boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"acl.owners","name":"acl.owners","type":"instance","description":"<p>An object of convenience methods to add or delete owner ACL permissions for a given entity.</p><p>The supported methods include:</p><ul> <li><code>myFile.acl.owners.addAllAuthenticatedUsers</code></li> <li><code>myFile.acl.owners.deleteAllAuthenticatedUsers</code></li> <li><code>myFile.acl.owners.addAllUsers</code></li> <li><code>myFile.acl.owners.deleteAllUsers</code></li> <li><code>myFile.acl.owners.addDomain</code></li> <li><code>myFile.acl.owners.deleteDomain</code></li> <li><code>myFile.acl.owners.addGroup</code></li> <li><code>myFile.acl.owners.deleteGroup</code></li> <li><code>myFile.acl.owners.addProject</code></li> <li><code>myFile.acl.owners.deleteProject</code></li> <li><code>myFile.acl.owners.addUser</code></li> <li><code>myFile.acl.owners.deleteUser</code></li> </ul> ","source":"gcloud-node/lib/storage/acl.js#L121","resources":[],"examples":[{"code":"var storage = gcloud.storage({\n  projectId: 'grape-spaceship-123'\n});"},{"caption":"<p>Add a user as an owner of a file.</p>","code":"var myBucket = storage.bucket('my-bucket');\nvar myFile = myBucket.file('my-file');\nmyFile.acl.owners.addUser('email@example.com', function(err, aclObject) {});"},{"caption":"<p>For reference, the above command is the same as running the following.</p>","code":"myFile.acl.add({\n  entity: 'user-email@example.com',\n  role: storage.acl.OWNER_ROLE\n}, function(err, aclObject) {});"}],"params":[],"exceptions":[],"returns":[]},{"id":"acl.readers","name":"acl.readers","type":"instance","description":"<p>An object of convenience methods to add or delete reader ACL permissions for a given entity.</p><p>The supported methods include:</p><ul> <li><code>myFile.acl.readers.addAllAuthenticatedUsers</code></li> <li><code>myFile.acl.readers.deleteAllAuthenticatedUsers</code></li> <li><code>myFile.acl.readers.addAllUsers</code></li> <li><code>myFile.acl.readers.deleteAllUsers</code></li> <li><code>myFile.acl.readers.addDomain</code></li> <li><code>myFile.acl.readers.deleteDomain</code></li> <li><code>myFile.acl.readers.addGroup</code></li> <li><code>myFile.acl.readers.deleteGroup</code></li> <li><code>myFile.acl.readers.addProject</code></li> <li><code>myFile.acl.readers.deleteProject</code></li> <li><code>myFile.acl.readers.addUser</code></li> <li><code>myFile.acl.readers.deleteUser</code></li> </ul> ","source":"gcloud-node/lib/storage/acl.js#L160","resources":[],"examples":[{"caption":"<p>Add a user as a reader of a file.</p>","code":"myFile.acl.readers.addUser('email@example.com', function(err, aclObject) {});"},{"caption":"<p>For reference, the above command is the same as running the following.</p>","code":"myFile.acl.add({\n  entity: 'user-email@example.com',\n  role: storage.acl.READER_ROLE\n}, function(err, aclObject) {});"}],"params":[],"exceptions":[],"returns":[]},{"id":"acl.writers","name":"acl.writers","type":"instance","description":"<p>An object of convenience methods to add or delete writer ACL permissions for a given entity.</p><p>The supported methods include:</p><ul> <li><code>myFile.acl.writers.addAllAuthenticatedUsers</code></li> <li><code>myFile.acl.writers.deleteAllAuthenticatedUsers</code></li> <li><code>myFile.acl.writers.addAllUsers</code></li> <li><code>myFile.acl.writers.deleteAllUsers</code></li> <li><code>myFile.acl.writers.addDomain</code></li> <li><code>myFile.acl.writers.deleteDomain</code></li> <li><code>myFile.acl.writers.addGroup</code></li> <li><code>myFile.acl.writers.deleteGroup</code></li> <li><code>myFile.acl.writers.addProject</code></li> <li><code>myFile.acl.writers.deleteProject</code></li> <li><code>myFile.acl.writers.addUser</code></li> <li><code>myFile.acl.writers.deleteUser</code></li> </ul> ","source":"gcloud-node/lib/storage/acl.js#L199","resources":[],"examples":[{"caption":"<p>Add a user as a writer of a file.</p>","code":"myFile.acl.writers.addUser('email@example.com', function(err, aclObject) {});"},{"caption":"<p>For reference, the above command is the same as running the following.</p>","code":"myFile.acl.add({\n  entity: 'user-email@example.com',\n  role: storage.acl.WRITER_ROLE\n}, function(err, aclObject) {});"}],"params":[],"exceptions":[],"returns":[]},{"id":"acl.add","name":"acl.add","type":"instance","description":"<p>Add access controls on a <a data-custom-type=\"storage/bucket\">storage/bucket</a> or <a data-custom-type=\"storage/file\">storage/file</a>.</p>","source":"gcloud-node/lib/storage/acl.js#L233","resources":[],"examples":[{"code":"myBucket.acl.add({\n  entity: 'user-useremail@example.com',\n  role: storage.acl.OWNER_ROLE\n}, function(err, aclObject, apiResponse) {});"},{"caption":"<p>For file ACL operations, you can also specify a <code>generation</code> property. \nHere is how you would grant ownership permissions to a user on a specific \nrevision of a file.</p>","code":"myFile.acl.add({\n  entity: 'user-useremail@example.com',\n  role: storage.acl.OWNER_ROLE,\n  generation: 1\n}, function(err, aclObject, apiResponse) {});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"options.entity","description":"<ul> <li>Whose permissions will be added.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.role","description":"<ul> <li>Permissions allowed for the defined entity. See <a data-custom-type=\"storage\" data-method=\"acl\">storage#acl</a>.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.generation","description":"<ul> <li><strong>File Objects Only</strong> Select a specific revision of this file (as opposed to the latest version, the default).</li> </ul> ","types":["int"],"optional":true,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"acl.delete","name":"acl.delete","type":"instance","description":"<p>Delete access controls on a <a data-custom-type=\"storage/bucket\">storage/bucket</a> or <a data-custom-type=\"storage/file\">storage/file</a>.</p>","source":"gcloud-node/lib/storage/acl.js#L283","resources":[],"examples":[{"code":"myBucket.acl.delete({\n  entity: 'user-useremail@example.com'\n}, function(err, apiResponse) {});"},{"caption":"<p>For file ACL operations, you can also specify a <code>generation</code> property.</p>","code":"myFile.acl.delete({\n  entity: 'user-useremail@example.com',\n  generation: 1\n}, function(err, apiResponse) {});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.entity","description":"<ul> <li>Whose permissions will be revoked.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.generation","description":"<ul> <li><strong>File Objects Only</strong> Select a specific revision of this file (as opposed to the latest version, the default).</li> </ul> ","types":["int"],"optional":true,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"acl.get","name":"acl.get","type":"instance","description":"<p>Get access controls on a <a data-custom-type=\"storage/bucket\">storage/bucket</a> or <a data-custom-type=\"storage/file\">storage/file</a>. If an entity is omitted, you will receive an array of all applicable access controls.</p>","source":"gcloud-node/lib/storage/acl.js#L336","resources":[],"examples":[{"code":"myBucket.acl.get({\n  entity: 'user-useremail@example.com'\n}, function(err, aclObject, apiResponse) {});"},{"caption":"<p>Get all access controls.</p>","code":"myBucket.acl.get(function(err, aclObjects, apiResponse) {\n  // aclObjects = [\n  //   {\n  //     entity: 'user-useremail@example.com',\n  //     role: 'owner'\n  //   }\n  // ]\n});"},{"caption":"<p>For file ACL operations, you can also specify a <code>generation</code> property.</p>","code":"myFile.acl.get({\n  entity: 'user-useremail@example.com',\n  generation: 1\n}, function(err, aclObject, apiResponse) {});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object. If you want to receive a list of all access controls, pass the callback function as the  only argument.</li> </ul> ","types":["object","function"],"optional":false,"nullable":false},{"name":"options.entity","description":"<ul> <li>Whose permissions will be fetched.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"options.generation","description":"<ul> <li><strong>File Objects Only</strong> Select a specific revision of this file (as opposed to the latest version, the default).</li> </ul> ","types":["int"],"optional":true,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"acl.update","name":"acl.update","type":"instance","description":"<p>Update access controls on a <a data-custom-type=\"storage/bucket\">storage/bucket</a> or <a data-custom-type=\"storage/file\">storage/file</a>.</p>","source":"gcloud-node/lib/storage/acl.js#L404","resources":[],"examples":[{"code":"var storage = gcloud.storage({\n  projectId: 'grape-spaceship-123'\n});\n\nmyBucket.acl.update({\n  entity: 'user-useremail@example.com',\n  role: storage.acl.WRITER_ROLE\n}, function(err, apiResponse) {});"},{"caption":"<p>For file ACL operations, you can also specify a <code>generation</code> property.</p>","code":"myFile.acl.update({\n  entity: 'user-useremail@example.com',\n  role: storage.acl.WRITER_ROLE,\n  generation: 1\n}, function(err, apiResponse) {});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.entity","description":"<ul> <li>Whose permissions will be updated.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.role","description":"<ul> <li>Permissions allowed for the defined entity. See <a data-custom-type=\"storage\" data-method=\"acl\">storage#acl</a>.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.generation","description":"<ul> <li><strong>File Objects Only</strong> Select a specific revision of this file (as opposed to the latest version, the default).</li> </ul> ","types":["int"],"optional":true,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]}]}