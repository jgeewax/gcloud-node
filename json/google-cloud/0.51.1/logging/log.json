{"id":"logging/log","type":"class","name":"Log","overview":"<p>\n  This class allows you interact with Cloud Logging.\n</p>\n\n\n<div class=\"notice\">\n  <strong><code>google-cloud</code> is deprecated</strong>\n  <p>\n    Due to the scope of our API rapidly increasing, you may notice a decrease in performance if you continue to use the bundled module, <code>google-cloud</code>.\n  </p>\n  <p>\n    Going forward, please install only the individual service modules that you need, such as <code>@google-cloud/logging</code>.\n  </p>\n  <p>\n    The instructions below are here for reference, however, we will soon stop releasing updates to the bundled package.\n  </p>\n</div>\n\n\n<p>\n  First, install <code>google-cloud</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save google-cloud</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>google-cloud</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Google Cloud Platform</h4>\n<div hljs language=\"javascript\">\nvar gcloud = require('google-cloud');\nvar logging = gcloud.logging();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar gcloud = require('google-cloud');\nvar logging = gcloud.logging({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>google-cloud</code> are outlined in our <a href=\"#/docs/google-cloud/0.51.1/guides/authentication\">Authentication guide</a>.\n</p>\n","description":"","source":"packages/logging/src/log.js","parent":"logging","children":[],"methods":[{"id":"Log","name":"Log","type":"constructor","description":"<p>A log is a named collection of entries, each entry representing a timestamped event. Logs can be produced by Google Cloud Platform services, by third-party services, or by your applications. For example, the log <code>apache-access</code> is produced by the Apache Web Server, but the log <code>compute.googleapis.com/activity_log</code> is produced by Google Compute Engine.</p>","source":"packages/logging/src/log.js#L65","resources":[{"title":"Introduction to Logs","link":"https://cloud.google.com/logging/docs/basic-concepts#logs"}],"examples":[{"code":"var log = logging.log('syslog');"}],"params":[{"name":"name","description":"<ul> <li>Name of the log.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.removeCircular","description":"<ul> <li>Replace circular references in logged objects with a string value, <code>[Circular]</code>. (Default: false)</li> </ul> ","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"alert","name":"alert","type":"instance","description":"<p>Write a log entry with a severity of &quot;ALERT&quot;.</p><p>This is a simple wrapper around <a data-custom-type=\"logging/log\" data-method=\"write\">logging/log#write</a>. All arguments are the same as documented there.</p>","source":"packages/logging/src/log.js#L136","resources":[],"examples":[{"code":"var entry = log.entry('gce_instance', {\n  instance: 'my_instance'\n});\n\nlog.alert(entry, function(err, apiResponse) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"log.alert(entry).then(function(data) {\n  var apiResponse = data[0];\n});"}],"params":[],"exceptions":[],"returns":[]},{"id":"critical","name":"critical","type":"instance","description":"<p>Write a log entry with a severity of &quot;CRITICAL&quot;.</p><p>This is a simple wrapper around <a data-custom-type=\"logging/log\" data-method=\"write\">logging/log#write</a>. All arguments are the same as documented there.</p>","source":"packages/logging/src/log.js#L160","resources":[],"examples":[{"code":"var entry = log.entry('gce_instance', {\n  instance: 'my_instance'\n});\n\nlog.critical(entry, function(err, apiResponse) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"log.critical(entry).then(function(data) {\n  var apiResponse = data[0];\n});"}],"params":[],"exceptions":[],"returns":[]},{"id":"debug","name":"debug","type":"instance","description":"<p>Write a log entry with a severity of &quot;DEBUG&quot;.</p><p>This is a simple wrapper around <a data-custom-type=\"logging/log\" data-method=\"write\">logging/log#write</a>. All arguments are the same as documented there.</p>","source":"packages/logging/src/log.js#L185","resources":[],"examples":[{"code":"var entry = log.entry('gce_instance', {\n  instance: 'my_instance'\n});\n\nlog.debug(entry, function(err, apiResponse) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"log.debug(entry).then(function(data) {\n  var apiResponse = data[0];\n});"}],"params":[],"exceptions":[],"returns":[]},{"id":"delete","name":"delete","type":"instance","description":"<p>Delete the log.</p>","source":"packages/logging/src/log.js#L215","resources":[{"title":"projects.logs.delete API Documentation","link":"https://cloud.google.com/logging/docs/reference/v2/rest/v2/projects.logs/delete"}],"examples":[{"code":"log.delete(function(err, apiResponse) {\n  if (!err) {\n    // The log was deleted.\n  }\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"log.delete().then(function(data) {\n  var apiResponse = data[0];\n});"}],"params":[{"name":"gaxOptions","description":"<ul> <li>Request configuration options, outlined here: <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">https://googleapis.github.io/gax-nodejs/global.html#CallOptions</a>.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"emergency","name":"emergency","type":"instance","description":"<p>Write a log entry with a severity of &quot;EMERGENCY&quot;.</p><p>This is a simple wrapper around <a data-custom-type=\"logging/log\" data-method=\"write\">logging/log#write</a>. All arguments are the same as documented there.</p>","source":"packages/logging/src/log.js#L253","resources":[],"examples":[{"code":"var entry = log.entry('gce_instance', {\n  instance: 'my_instance'\n});\n\nlog.emergency(entry, function(err, apiResponse) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"log.emergency(entry).then(function(data) {\n  var apiResponse = data[0];\n});"}],"params":[],"exceptions":[],"returns":[]},{"id":"entry","name":"entry","type":"instance","description":"<p>Create an entry object for this log.</p><p>Note that using this method will not itself make any API requests. You will use the object returned in other API calls, such as <a data-custom-type=\"logging/log\" data-method=\"write\">logging/log#write</a>.</p>","source":"packages/logging/src/log.js#L303","resources":[{"title":"LogEntry JSON representation","link":"https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry"}],"examples":[{"code":"var metadata = {\n  resource: {\n    type: 'gce_instance',\n    labels: {\n      zone: 'global',\n      instance_id: '3'\n    }\n  }\n};\n\nvar entry = log.entry(metadata, {\n  delegate: 'my_username'\n});\n\nentry.toJSON();\n// {\n//   logName: 'projects/grape-spaceship-123/logs/syslog',\n//   resource: {\n//     type: 'gce_instance',\n//     labels: {\n//       zone: 'global',\n//       instance_id: '3'\n//     }\n//   },\n//   jsonPayload: {\n//     delegate: 'my_username'\n//   }\n// }"}],"params":[{"name":"metadata","description":"<ul> <li>See a <a href=\"https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry\">LogEntry Resource</a>.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"data","description":"<ul> <li>The data to use as the value for this log entry.</li> </ul> ","types":["object","string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"logging/entry\" data-method=\"\">logging/entry</a>"],"description":""}]},{"id":"error","name":"error","type":"instance","description":"<p>Write a log entry with a severity of &quot;ERROR&quot;.</p><p>This is a simple wrapper around <a data-custom-type=\"logging/log\" data-method=\"write\">logging/log#write</a>. All arguments are the same as documented there.</p>","source":"packages/logging/src/log.js#L336","resources":[],"examples":[{"code":"var entry = log.entry('gce_instance', {\n  instance: 'my_instance'\n});\n\nlog.error(entry, function(err, apiResponse) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"log.error(entry).then(function(data) {\n  var apiResponse = data[0];\n});"}],"params":[],"exceptions":[],"returns":[]},{"id":"getEntries","name":"getEntries","type":"instance","description":"<p>This method is a wrapper around <a data-custom-type=\"logging\" data-method=\"getEntries\">logging#getEntries</a>, but with a filter specified to only return entries from this log.</p>","source":"packages/logging/src/log.js#L393","resources":[{"title":"entries.list API Documentation","link":"https://cloud.google.com/logging/docs/reference/v2/rest/v2/entries/list"}],"examples":[{"code":"log.getEntries(function(err, entries) {\n  // `entries` is an array of Stackdriver Logging entry objects.\n  // See the `data` property to read the data from the entry.\n});"},{"caption":"<p>To control how many API requests are made and page through the results \nmanually, set <code>autoPaginate</code> to <code>false</code>.</p>","code":"function callback(err, entries, nextQuery, apiResponse) {\n  if (nextQuery) {\n    // More results exist.\n    log.getEntries(nextQuery, callback);\n  }\n}\n\nlog.getEntries({\n  autoPaginate: false\n}, callback);"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"log.getEntries().then(function(data) {\n  var entries = data[0];\n});"}],"params":[{"name":"options","description":"<ul> <li>Filtering options.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.autoPaginate","description":"<ul> <li>Have pagination handled automatically. Default: true.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"options.filter","description":"<ul> <li>An <a href=\"https://cloud.google.com/logging/docs/view/advanced_filters\">advanced logs filter</a>.  An empty filter matches all log entries.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.maxApiCalls","description":"<ul> <li>Maximum number of API calls to make.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"options.maxResults","description":"<ul> <li>Maximum number of results to return.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"options.orderBy","description":"<ul> <li>How the results should be sorted, <code>timestamp</code> (oldest first) and <code>timestamp desc</code> (newest first,  <strong>default</strong>).</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.pageSize","description":"<ul> <li>Maximum number of logs to return.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"options.pageToken","description":"<ul> <li>A previously-returned page token representing part of the larger set of results to view.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.entries","description":"<ul> <li>Entries from this log.</li> </ul> ","types":["<a data-custom-type=\"logging/entry[]\" data-method=\"\">logging/entry[]</a>"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"getEntriesStream","name":"getEntriesStream","type":"instance","description":"<p>This method is a wrapper around <a data-custom-type=\"logging\" data-method=\"getEntriesStream\">logging#getEntriesStream</a>, but with a filter specified to only return <a data-custom-type=\"logging/entry\" data-method=\"\">logging/entry</a> objects from this log.</p>","source":"packages/logging/src/log.js#L434","resources":[],"examples":[{"code":"log.getEntriesStream()\n  .on('error', console.error)\n  .on('data', function(entry) {\n    // `entry` is a Stackdriver Logging entry object.\n    // See the `data` property to read the data from the entry.\n  })\n  .on('end', function() {\n    // All entries retrieved.\n  });"},{"caption":"<p>If you anticipate many results, you can end a stream early to prevent \nunnecessary processing and API requests.</p>","code":"log.getEntriesStream()\n  .on('data', function(entry) {\n    this.end();\n  });"}],"params":[{"name":"options","description":"<ul> <li>Configuration object. See <a data-custom-type=\"logging/log\" data-method=\"getEntries\">logging/log#getEntries</a> for a complete list of options.</li> </ul> ","types":["object"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["stream"],"description":""}]},{"id":"info","name":"info","type":"instance","description":"<p>Write a log entry with a severity of &quot;INFO&quot;.</p><p>This is a simple wrapper around <a data-custom-type=\"logging/log\" data-method=\"write\">logging/log#write</a>. All arguments are the same as documented there.</p>","source":"packages/logging/src/log.js#L462","resources":[],"examples":[{"code":"var entry = log.entry('gce_instance', {\n  instance: 'my_instance'\n});\n\nlog.info(entry, function(err, apiResponse) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"log.info(entry).then(function(data) {\n  var apiResponse = data[0];\n});"}],"params":[],"exceptions":[],"returns":[]},{"id":"notice","name":"notice","type":"instance","description":"<p>Write a log entry with a severity of &quot;NOTICE&quot;.</p><p>This is a simple wrapper around <a data-custom-type=\"logging/log\" data-method=\"write\">logging/log#write</a>. All arguments are the same as documented there.</p>","source":"packages/logging/src/log.js#L486","resources":[],"examples":[{"code":"var entry = log.entry('gce_instance', {\n  instance: 'my_instance'\n});\n\nlog.notice(entry, function(err, apiResponse) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"log.notice(entry).then(function(data) {\n  var apiResponse = data[0];\n});"}],"params":[],"exceptions":[],"returns":[]},{"id":"warning","name":"warning","type":"instance","description":"<p>Write a log entry with a severity of &quot;WARNING&quot;.</p><p>This is a simple wrapper around <a data-custom-type=\"logging/log\" data-method=\"write\">logging/log#write</a>. All arguments are the same as documented there.</p>","source":"packages/logging/src/log.js#L510","resources":[],"examples":[{"code":"var entry = log.entry('gce_instance', {\n  instance: 'my_instance'\n});\n\nlog.warning(entry, function(err, apiResponse) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"log.warning(entry).then(function(data) {\n  var apiResponse = data[0];\n});"}],"params":[],"exceptions":[],"returns":[]},{"id":"write","name":"write","type":"instance","description":"<p>Write log entries to Stackdriver Logging.</p><p>While you may write a single entry at a time, batching multiple entries together is preferred to avoid reaching the queries per second limit.</p>","source":"packages/logging/src/log.js#L588","resources":[{"title":"entries.write API Documentation","link":"https://cloud.google.com/logging/docs/reference/v2/rest/v2/entries/write"}],"examples":[{"code":"var entry = log.entry('gce_instance', {\n  instance: 'my_instance'\n});\n\nlog.write(entry, function(err, apiResponse) {\n  if (!err) {\n    // The log entry was written.\n  }\n});"},{"caption":"<p>You may also pass multiple log entries to write.</p>","code":"var secondEntry = log.entry('compute.googleapis.com', {\n  user: 'my_username'\n});\n\nlog.write([\n  entry,\n  secondEntry\n], function(err, apiResponse) {\n  if (!err) {\n    // The log entries were written.\n  }\n});"},{"caption":"<p>To save some steps, you can also pass in plain values as your entries. \nNote, however, that you must provide a configuration object to specify the \nresource.</p>","code":"var entries = [\n  {\n    user: 'my_username'\n  },\n  {\n    home: process.env.HOME\n  }\n];\n\nvar options = {\n  resource: 'compute.googleapis.com'\n};\n\nlog.write(entries, options, function(err, apiResponse) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"log.write(entries).then(function(data) {\n  var apiResponse = data[0];\n});"}],"params":[{"name":"entry","description":"<ul> <li>A log entry, or array of entries, to write.</li> </ul> ","types":["<a data-custom-type=\"logging/entry\" data-method=\"\">logging/entry</a>","<a data-custom-type=\"logging/entry[]\" data-method=\"\">logging/entry[]</a>"],"optional":false,"nullable":false},{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.gaxOptions","description":"<ul> <li>Request configuration options, outlined here: <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">https://googleapis.github.io/gax-nodejs/global.html#CallOptions</a>.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"options.labels","description":"<ul> <li>Labels to set on the log.</li> </ul> ","types":["object[]"],"optional":false,"nullable":false},{"name":"options.resource","description":"<ul> <li>A default monitored resource for entries where one isn&#39;t specified.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]}],"path":"log.json"}