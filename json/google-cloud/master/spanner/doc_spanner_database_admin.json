{"id":"spanner/admin/database/v1/doc/doc_spanner_database_admin","type":"class","overview":"<p>\n  This class allows you interact with Cloud Spanner.\n</p>\n\n\n<div class=\"notice\">\n  <strong><code>google-cloud</code> is deprecated</strong>\n  <p>\n    Due to the scope of our API rapidly increasing, you may notice a decrease in performance if you continue to use the bundled module, <code>google-cloud</code>.\n  </p>\n  <p>\n    Going forward, please install only the individual service modules that you need, such as <code>@google-cloud/spanner</code>.\n  </p>\n</div>\n\n\n<p>\n  First, install <code>google-cloud</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save google-cloud</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>google-cloud</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Google Cloud Platform</h4>\n<div hljs language=\"javascript\">\nvar gcloud = require('google-cloud');\nvar spanner = gcloud.spanner();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar gcloud = require('google-cloud');\nvar spanner = gcloud.spanner({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>google-cloud</code> are outlined in our <a href=\"#/docs/google-cloud/v0.56.0/guides/authentication\">Authentication guide</a>.\n</p>\n","source":"packages\\spanner\\src\\admin\\database\\v1\\doc\\doc_spanner_database_admin.js","parent":"spanner","children":[],"methods":[{"id":"Database","name":"Database","type":"instance","description":"<p>A Cloud Spanner database.</p>","source":"packages\\spanner\\src\\admin\\database\\v1\\doc\\doc_spanner_database_admin.js#L40","resources":[],"examples":[],"params":[{"name":"name","description":"<p> Required. The name of the database. Values are of the form  <code>projects/&lt;project&gt;/instances/&lt;instance&gt;/databases/&lt;database&gt;</code>,  where <code>&lt;database&gt;</code> is as specified in the <code>CREATE DATABASE</code>  statement. This name can be passed to other API methods to  identify the database.</p>","types":["string"],"optional":false,"nullable":false},{"name":"state","description":"<p> Output only. The current database state.</p><p> The number should be among the values of <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'State'\n        })\">State</a></p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"State","name":"State","type":"instance","description":"<p>Indicates the current state of the database.</p>","source":"packages\\spanner\\src\\admin\\database\\v1\\doc\\doc_spanner_database_admin.js#L48","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"ListDatabasesRequest","name":"ListDatabasesRequest","type":"instance","description":"","source":"packages\\spanner\\src\\admin\\database\\v1\\doc\\doc_spanner_database_admin.js#L87","resources":[],"examples":[],"params":[{"name":"parent","description":"<p> Required. The instance whose databases should be listed.  Values are of the form <code>projects/&lt;project&gt;/instances/&lt;instance&gt;</code>.</p>","types":["string"],"optional":false,"nullable":false},{"name":"pageSize","description":"<p> Number of databases to be returned in the response. If 0 or less,  defaults to the server&#39;s maximum allowed page size.</p>","types":["number"],"optional":false,"nullable":false},{"name":"pageToken","description":"<p> If non-empty, <code>page_token</code> should contain a  {@link next_page_token} from a  previous {@link ListDatabasesResponse}.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ListDatabasesResponse","name":"ListDatabasesResponse","type":"instance","description":"","source":"packages\\spanner\\src\\admin\\database\\v1\\doc\\doc_spanner_database_admin.js#L107","resources":[],"examples":[],"params":[{"name":"databases","description":"<p> Databases that matched the request.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Database'\n        })\">Database</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"nextPageToken","description":"<p> <code>next_page_token</code> can be sent in a subsequent  {@link ListDatabases} call to fetch more  of the matching databases.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"CreateDatabaseRequest","name":"CreateDatabaseRequest","type":"instance","description":"","source":"packages\\spanner\\src\\admin\\database\\v1\\doc\\doc_spanner_database_admin.js#L132","resources":[],"examples":[],"params":[{"name":"parent","description":"<p> Required. The name of the instance that will serve the new database.  Values are of the form <code>projects/&lt;project&gt;/instances/&lt;instance&gt;</code>.</p>","types":["string"],"optional":false,"nullable":false},{"name":"createStatement","description":"<p> Required. A <code>CREATE DATABASE</code> statement, which specifies the ID of the  new database. The database ID must conform to the regular expression  <code>[a-z][a-z0-9_\\-]*[a-z0-9]</code> and be between 2 and 30 characters in length.</p>","types":["string"],"optional":false,"nullable":false},{"name":"extraStatements","description":"<p> An optional list of DDL statements to run inside the newly created  database. Statements can create tables, indexes, etc. These  statements execute atomically with the creation of the database:  if there is an error in any statement, the database is not created.</p>","types":["string[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"CreateDatabaseMetadata","name":"CreateDatabaseMetadata","type":"instance","description":"<p>Metadata type for the operation returned by {@link CreateDatabase}.</p>","source":"packages\\spanner\\src\\admin\\database\\v1\\doc\\doc_spanner_database_admin.js#L146","resources":[],"examples":[],"params":[{"name":"database","description":"<p> The database being created.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"GetDatabaseRequest","name":"GetDatabaseRequest","type":"instance","description":"","source":"packages\\spanner\\src\\admin\\database\\v1\\doc\\doc_spanner_database_admin.js#L160","resources":[],"examples":[],"params":[{"name":"name","description":"<p> Required. The name of the requested database. Values are of the form  <code>projects/&lt;project&gt;/instances/&lt;instance&gt;/databases/&lt;database&gt;</code>.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"UpdateDatabaseDdlRequest","name":"UpdateDatabaseDdlRequest","type":"instance","description":"","source":"packages\\spanner\\src\\admin\\database\\v1\\doc\\doc_spanner_database_admin.js#L212","resources":[],"examples":[],"params":[{"name":"database","description":"<p> Required. The database to update.</p>","types":["string"],"optional":false,"nullable":false},{"name":"statements","description":"<p> DDL statements to be applied to the database.</p>","types":["string[]"],"optional":false,"nullable":false},{"name":"operationId","description":"<p> If empty, the new update request is assigned an  automatically-generated operation ID. Otherwise, <code>operation_id</code>  is used to construct the name of the resulting  {@link Operation}.</p><p> Specifying an explicit operation ID simplifies determining  whether the statements were executed in the event that the  {@link UpdateDatabaseDdl} call is replayed,  or the return value is otherwise lost: the {@link database} and  <code>operation_id</code> fields can be combined to form the  {@link name} of the resulting  {@link longrunning.Operation}: <code>&lt;database&gt;/operations/&lt;operation_id&gt;</code>.</p><p> <code>operation_id</code> should be unique within the database, and must be  a valid identifier: <code>[a-z][a-z0-9_]*</code>. Note that  automatically-generated operation IDs always begin with an  underscore. If the named operation already exists,  {@link UpdateDatabaseDdl} returns  <code>ALREADY_EXISTS</code>.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"UpdateDatabaseDdlMetadata","name":"UpdateDatabaseDdlMetadata","type":"instance","description":"<p>Metadata type for the operation returned by {@link UpdateDatabaseDdl}.</p>","source":"packages\\spanner\\src\\admin\\database\\v1\\doc\\doc_spanner_database_admin.js#L237","resources":[],"examples":[],"params":[{"name":"database","description":"<p> The database being modified.</p>","types":["string"],"optional":false,"nullable":false},{"name":"statements","description":"<p> For an update this list contains all the statements. For an  individual statement, this list contains only that statement.</p>","types":["string[]"],"optional":false,"nullable":false},{"name":"commitTimestamps","description":"<p> Reports the commit timestamps of all statements that have  succeeded so far, where <code>commit_timestamps[i]</code> is the commit  timestamp for the statement <code>statements[i]</code>.</p><p> This object should have the same structure as google.protobuf.Timestamp</p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"DropDatabaseRequest","name":"DropDatabaseRequest","type":"instance","description":"","source":"packages\\spanner\\src\\admin\\database\\v1\\doc\\doc_spanner_database_admin.js#L250","resources":[],"examples":[],"params":[{"name":"database","description":"<p> Required. The database to be dropped.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"GetDatabaseDdlRequest","name":"GetDatabaseDdlRequest","type":"instance","description":"","source":"packages\\spanner\\src\\admin\\database\\v1\\doc\\doc_spanner_database_admin.js#L263","resources":[],"examples":[],"params":[{"name":"database","description":"<p> Required. The database whose schema we wish to get.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"GetDatabaseDdlResponse","name":"GetDatabaseDdlResponse","type":"instance","description":"","source":"packages\\spanner\\src\\admin\\database\\v1\\doc\\doc_spanner_database_admin.js#L277","resources":[],"examples":[],"params":[{"name":"statements","description":"<p> A list of formatted DDL statements defining the schema of the database  specified in the request.</p>","types":["string[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]}],"path":"doc_spanner_database_admin.json"}