{"id":"datastore/v1/doc/doc_entity","type":"class","overview":"<p>\n  This class allows you interact with Cloud Datastore.\n</p>\n\n\n<div class=\"notice\">\n  <strong><code>google-cloud</code> is deprecated</strong>\n  <p>\n    Due to the scope of our API rapidly increasing, you may notice a decrease in performance if you continue to use the bundled module, <code>google-cloud</code>.\n  </p>\n  <p>\n    Going forward, please install only the individual service modules that you need, such as <code>@google-cloud/datastore</code>.\n  </p>\n</div>\n\n\n<p>\n  First, install <code>google-cloud</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save google-cloud</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>google-cloud</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Google Cloud Platform</h4>\n<div hljs language=\"javascript\">\nvar gcloud = require('google-cloud');\nvar datastore = gcloud.datastore();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar gcloud = require('google-cloud');\nvar datastore = gcloud.datastore({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>google-cloud</code> are outlined in our <a href=\"#/docs/google-cloud/v0.56.0/guides/authentication\">Authentication guide</a>.\n</p>\n","source":"packages\\datastore\\src\\v1\\doc\\doc_entity.js","parent":"datastore","children":[],"methods":[{"id":"PartitionId","name":"PartitionId","type":"instance","description":"<p>A partition ID identifies a grouping of entities. The grouping is always by project and namespace, however the namespace ID may be empty.</p><p>A partition ID contains several dimensions: project ID and namespace ID.</p><p>Partition dimensions:</p><ul> <li>May be <code>&quot;&quot;</code>.</li> <li>Must be valid UTF-8 bytes.</li> <li>Must have values that match regex <code>[A-Za-z\\d\\.\\-_]{1,100}</code> If the value of any dimension matches regex <code>__.*__</code>, the partition is reserved/read-only. A reserved/read-only partition ID is forbidden in certain documented contexts.</li> </ul> <p>Foreign partition IDs (in which the project ID does not match the context project ID ) are discouraged. Reads and writes of foreign partition IDs may fail if the project is not in an active state.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_entity.js#L52","resources":[],"examples":[],"params":[{"name":"projectId","description":"<p> The ID of the project to which the entities belong.</p>","types":["string"],"optional":false,"nullable":false},{"name":"namespaceId","description":"<p> If not empty, the ID of the namespace to which the entities belong.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Key","name":"Key","type":"instance","description":"<p>A unique identifier for an entity. If a key&#39;s partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_entity.js#L92","resources":[],"examples":[],"params":[{"name":"partitionId","description":"<p> Entities are partitioned into subsets, currently identified by a project  ID and namespace ID.  Queries are scoped to a single partition.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'PartitionId'\n        })\">PartitionId</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"path","description":"<p> The entity path.  An entity path consists of one or more elements composed of a kind and a  string or numerical identifier, which identify entities. The first  element identifies a <em>root entity</em>, the second element identifies  a <em>child</em> of the root entity, the third element identifies a child of the  second entity, and so forth. The entities identified by all prefixes of  the path are called the element&#39;s <em>ancestors</em>.</p><p> An entity path is always fully complete: <em>all</em> of the entity&#39;s ancestors  are required to be in the path along with the entity identifier itself.  The only exception is that in some documented cases, the identifier in the  last path element (for the entity) itself may be omitted. For example,  the last path element of the key of <code>Mutation.insert</code> may have no  identifier.</p><p> A path can never be empty, and a path can have at most 100 elements.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'PathElement'\n        })\">PathElement</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"PathElement","name":"PathElement","type":"instance","description":"<p>A (kind, ID/name) pair used to construct a key path.</p><p>If either name or ID is set, the element is complete. If neither is set, the element is incomplete.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_entity.js#L121","resources":[],"examples":[],"params":[{"name":"kind","description":"<p> The kind of the entity.  A kind matching regex <code>__.*__</code> is reserved/read-only.  A kind must not contain more than 1500 bytes when UTF-8 encoded.  Cannot be <code>&quot;&quot;</code>.</p>","types":["string"],"optional":false,"nullable":false},{"name":"id","description":"<p> The auto-allocated ID of the entity.  Never equal to zero. Values less than zero are discouraged and may not  be supported in the future.</p>","types":["number"],"optional":false,"nullable":false},{"name":"name","description":"<p> The name of the entity.  A name matching regex <code>__.*__</code> is reserved/read-only.  A name must not be more than 1500 bytes when UTF-8 encoded.  Cannot be <code>&quot;&quot;</code>.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ArrayValue","name":"ArrayValue","type":"instance","description":"<p>An array value.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_entity.js#L139","resources":[],"examples":[],"params":[{"name":"values","description":"<p> Values in the array.  The order of this array may not be preserved if it contains a mix of  indexed and unindexed values.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Value'\n        })\">Value</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Value","name":"Value","type":"instance","description":"<p>A message that can hold any of the supported value types and associated metadata.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_entity.js#L216","resources":[],"examples":[],"params":[{"name":"nullValue","description":"<p> A null value.</p><p> The number should be among the values of google.protobuf.NullValue</p>","types":["number"],"optional":false,"nullable":false},{"name":"booleanValue","description":"<p> A boolean value.</p>","types":["boolean"],"optional":false,"nullable":false},{"name":"integerValue","description":"<p> An integer value.</p>","types":["number"],"optional":false,"nullable":false},{"name":"doubleValue","description":"<p> A double value.</p>","types":["number"],"optional":false,"nullable":false},{"name":"timestampValue","description":"<p> A timestamp value.  When stored in the Datastore, precise only to microseconds;  any additional precision is rounded down.</p><p> This object should have the same structure as google.protobuf.Timestamp</p>","types":["Object"],"optional":false,"nullable":false},{"name":"keyValue","description":"<p> A key value.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Key'\n        })\">Key</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"stringValue","description":"<p> A UTF-8 encoded string value.  When <code>exclude_from_indexes</code> is false (it is indexed) , may have at most 1500 bytes.  Otherwise, may be set to at least 1,000,000 bytes.</p>","types":["string"],"optional":false,"nullable":false},{"name":"blobValue","description":"<p> A blob value.  May have at most 1,000,000 bytes.  When <code>exclude_from_indexes</code> is false, may have at most 1500 bytes.  In JSON requests, must be base64-encoded.</p>","types":["string"],"optional":false,"nullable":false},{"name":"geoPointValue","description":"<p> A geo point value representing a point on the surface of Earth.</p><p> This object should have the same structure as google.type.LatLng</p>","types":["Object"],"optional":false,"nullable":false},{"name":"entityValue","description":"<p> An entity value.</p><ul> <li>May have no key.</li> <li>May have a key with an incomplete key path.</li> <li><p>May have a reserved/read-only key.</p><p>This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Entity'\n        })\">Entity</a></p></li> </ul> ","types":["Object"],"optional":false,"nullable":false},{"name":"arrayValue","description":"<p> An array value.  Cannot contain another array value.  A <code>Value</code> instance that sets field <code>array_value</code> must not set fields  <code>meaning</code> or <code>exclude_from_indexes</code>.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ArrayValue'\n        })\">ArrayValue</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"meaning","description":"<p> The <code>meaning</code> field should only be populated for backwards compatibility.</p>","types":["number"],"optional":false,"nullable":false},{"name":"excludeFromIndexes","description":"<p> If the value should be excluded from all indexes including those defined  explicitly.</p>","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Entity","name":"Entity","type":"instance","description":"<p>A Datastore data object.</p><p>An entity is limited to 1 megabyte when stored. That <em>roughly</em> corresponds to a limit of 1 megabyte for the serialized form of this message.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_entity.js#L248","resources":[],"examples":[],"params":[{"name":"key","description":"<p> The entity&#39;s key.</p><p> An entity must have a key, unless otherwise documented (for example,  an entity in <code>Value.entity_value</code> may have no key).  An entity&#39;s kind is its key path&#39;s last element&#39;s kind,  or null if it has no key.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Key'\n        })\">Key</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"properties","description":"<p> The entity&#39;s properties.  The map&#39;s keys are property names.  A property name matching regex <code>__.*__</code> is reserved.  A reserved property name is forbidden in certain documented contexts.  The name must not contain more than 500 characters.  The name cannot be <code>&quot;&quot;</code>.</p>","types":["Object.<string, Object>"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]}],"path":"doc_entity.json"}