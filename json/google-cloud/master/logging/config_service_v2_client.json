{"id":"logging/v2/config_service_v2_client","type":"class","overview":"<p>\n  This class allows you interact with Stackdriver Logging.\n</p>\n\n\n<div class=\"notice\">\n  <strong><code>google-cloud</code> is deprecated</strong>\n  <p>\n    Due to the scope of our API rapidly increasing, you may notice a decrease in performance if you continue to use the bundled module, <code>google-cloud</code>.\n  </p>\n  <p>\n    Going forward, please install only the individual service modules that you need, such as <code>@google-cloud/logging</code>.\n  </p>\n</div>\n\n\n<p>\n  First, install <code>google-cloud</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save google-cloud</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>google-cloud</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Google Cloud Platform</h4>\n<div hljs language=\"javascript\">\nvar gcloud = require('google-cloud');\nvar logging = gcloud.logging();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar gcloud = require('google-cloud');\nvar logging = gcloud.logging({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>google-cloud</code> are outlined in our <a href=\"#/docs/google-cloud/v0.56.0/guides/authentication\">Authentication guide</a>.\n</p>\n","source":"packages\\logging\\src\\v2\\config_service_v2_client.js","parent":"logging","children":[],"methods":[{"id":"ConfigServiceV2Client","name":"ConfigServiceV2Client","type":"constructor","description":"<p>Service for configuring sinks used to export log entries outside of Stackdriver Logging.</p><p>This will be created through a builder function which can be obtained by the module. See the following example of how to initialize the module and how to access to the builder.</p>","source":"packages\\logging\\src\\v2\\config_service_v2_client.js#L75","resources":[],"examples":[{"code":"var loggingV2 = require('@google-cloud/logging').v2({\n  // optional auth parameters.\n});\nvar client = loggingV2.configServiceV2Client();"}],"params":[],"exceptions":[],"returns":[]},{"id":"projectPath","name":"projectPath","type":"instance","description":"<p>Returns a fully-qualified project resource name string.</p>","source":"packages\\logging\\src\\v2\\config_service_v2_client.js#L139","resources":[],"examples":[],"params":[{"name":"project","description":"","types":["String"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"matchProjectFromProjectName","name":"matchProjectFromProjectName","type":"instance","description":"<p>Parses the projectName from a project resource.</p>","source":"packages\\logging\\src\\v2\\config_service_v2_client.js#L151","resources":[],"examples":[],"params":[{"name":"projectName","description":"<p> A fully-qualified path representing a project resources.</p>","types":["String"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"sinkPath","name":"sinkPath","type":"instance","description":"<p>Returns a fully-qualified sink resource name string.</p>","source":"packages\\logging\\src\\v2\\config_service_v2_client.js#L161","resources":[],"examples":[],"params":[{"name":"project","description":"","types":["String"],"optional":false,"nullable":false},{"name":"sink","description":"","types":["String"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"matchProjectFromSinkName","name":"matchProjectFromSinkName","type":"instance","description":"<p>Parses the sinkName from a sink resource.</p>","source":"packages\\logging\\src\\v2\\config_service_v2_client.js#L174","resources":[],"examples":[],"params":[{"name":"sinkName","description":"<p> A fully-qualified path representing a sink resources.</p>","types":["String"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"matchSinkFromSinkName","name":"matchSinkFromSinkName","type":"instance","description":"<p>Parses the sinkName from a sink resource.</p>","source":"packages\\logging\\src\\v2\\config_service_v2_client.js#L184","resources":[],"examples":[],"params":[{"name":"sinkName","description":"<p> A fully-qualified path representing a sink resources.</p>","types":["String"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"getProjectId","name":"getProjectId","type":"instance","description":"<p>Get the project ID used by this class.</p>","source":"packages\\logging\\src\\v2\\config_service_v2_client.js#L193","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"listSinks","name":"listSinks","type":"instance","description":"<p>Lists sinks.</p>","source":"packages\\logging\\src\\v2\\config_service_v2_client.js#L273","resources":[],"examples":[{"code":"\nvar client = loggingV2.configServiceV2Client();\nvar formattedParent = client.projectPath(\"[PROJECT]\");\n// Iterate over all elements.\nclient.listSinks({parent: formattedParent}).then(function(responses) {\n    var resources = responses[0];\n    for (var i = 0; i < resources.length; ++i) {\n        // doThingsWith(resources[i])\n    }\n}).catch(function(err) {\n    console.error(err);\n});\n\n// Or obtain the paged response.\nvar options = {autoPaginate: false};\nfunction callback(responses) {\n    // The actual resources in a response.\n    var resources = responses[0];\n    // The next request if the response shows there's more responses.\n    var nextRequest = responses[1];\n    // The actual response object, if necessary.\n    // var rawResponse = responses[2];\n    for (var i = 0; i < resources.length; ++i) {\n        // doThingsWith(resources[i]);\n    }\n    if (nextRequest) {\n        // Fetch the next page.\n        return client.listSinks(nextRequest, options).then(callback);\n    }\n}\nclient.listSinks({parent: formattedParent}, options)\n    .then(callback)\n    .catch(function(err) {\n        console.error(err);\n    });"}],"params":[{"name":"request","description":"<p> The request object that will be sent.</p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.parent","description":"<p> Required. The parent resource whose sinks are to be listed.  Examples: <code>&quot;projects/my-logging-project&quot;</code>, <code>&quot;organizations/123456789&quot;</code>.</p>","types":["string"],"optional":false,"nullable":false},{"name":"request.pageSize","description":"<p> The maximum number of resources contained in the underlying API  response. If page streaming is performed per-resource, this  parameter does not affect the return value. If page streaming is  performed per-page, this determines the maximum number of  resources in a page.</p>","types":["number"],"optional":true,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this call, e.g, timeout,  retries, paginations, etc. See <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a> for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is Array of <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'LogSink'\n        })\">LogSink</a>.</p><p> When autoPaginate: false is specified through options, it contains the result  in a single response. If the response indicates the next page exists, the third  parameter is set to be used for the next request object. The fourth parameter keeps  the raw response object of an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ListSinksResponse'\n        })\">ListSinksResponse</a>.</p>","types":["function(Error|null, Array|null, Object|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li><p>The promise which resolves to an array. The first element of the array is Array of <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'LogSink'\n        })\">LogSink</a>.</p><p>When autoPaginate: false is specified through options, the array has three elements. The first element is Array of <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'LogSink'\n        })\">LogSink</a> in a single response. The second element is the next request object if the response indicates the next page exists, or null. The third element is an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ListSinksResponse'\n        })\">ListSinksResponse</a>.</p><p>The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</p></li> </ul> "}]},{"id":"listSinksStream","name":"listSinksStream","type":"instance","description":"<p>Equivalent to {@link listSinks}, but returns a NodeJS Stream object.</p><p>This fetches the paged responses for {@link listSinks} continuously and invokes the callback registered for &#39;data&#39; event for each element in the responses.</p><p>The returned object has &#39;end&#39; method when no more elements are required.</p><p>autoPaginate option will be ignored.</p>","source":"packages\\logging\\src\\v2\\config_service_v2_client.js#L325","resources":[],"examples":[{"code":"\nvar client = loggingV2.configServiceV2Client();\nvar formattedParent = client.projectPath(\"[PROJECT]\");\nclient.listSinksStream({parent: formattedParent}).on('data', function(element) {\n    // doThingsWith(element)\n}).on('error', function(err) {\n    console.error(err);\n});"}],"params":[{"name":"request","description":"<p> The request object that will be sent.</p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.parent","description":"<p> Required. The parent resource whose sinks are to be listed.  Examples: <code>&quot;projects/my-logging-project&quot;</code>, <code>&quot;organizations/123456789&quot;</code>.</p>","types":["string"],"optional":false,"nullable":false},{"name":"request.pageSize","description":"<p> The maximum number of resources contained in the underlying API  response. If page streaming is performed per-resource, this  parameter does not affect the return value. If page streaming is  performed per-page, this determines the maximum number of  resources in a page.</p>","types":["number"],"optional":true,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this call, e.g, timeout,  retries, paginations, etc. See <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a> for the details.</p>","types":["Object"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Stream"],"description":"<p> An object stream which emits an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'LogSink'\n        })\">LogSink</a> on &#39;data&#39; event.</p>"}]},{"id":"getSink","name":"getSink","type":"instance","description":"<p>Gets a sink.</p>","source":"packages\\logging\\src\\v2\\config_service_v2_client.js#L367","resources":[],"examples":[{"code":"\nvar client = loggingV2.configServiceV2Client();\nvar formattedSinkName = client.sinkPath(\"[PROJECT]\", \"[SINK]\");\nclient.getSink({sinkName: formattedSinkName}).then(function(responses) {\n    var response = responses[0];\n    // doThingsWith(response)\n}).catch(function(err) {\n    console.error(err);\n});"}],"params":[{"name":"request","description":"<p> The request object that will be sent.</p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.sinkName","description":"<p> Required. The parent resource name of the sink:</p><pre><code> &quot;projects/[PROJECT_ID]/sinks/[SINK_ID]&quot; &quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]&quot; </code></pre><p> Example: <code>&quot;projects/my-project-id/sinks/my-sink-id&quot;</code>.</p>","types":["string"],"optional":false,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this call, e.g, timeout,  retries, paginations, etc. See <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a> for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'LogSink'\n        })\">LogSink</a>.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'LogSink'\n        })\">LogSink</a>. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"createSink","name":"createSink","type":"instance","description":"<p>Creates a sink that exports specified log entries to a destination. The export of newly-ingested log entries begins immediately, unless the current time is outside the sink&#39;s start and end times or the sink&#39;s <code>writer_identity</code> is not permitted to write to the destination. A sink can export log entries only from the resource owning the sink.</p>","source":"packages\\logging\\src\\v2\\config_service_v2_client.js#L439","resources":[],"examples":[{"code":"\nvar client = loggingV2.configServiceV2Client();\nvar formattedParent = client.projectPath(\"[PROJECT]\");\nvar sink = {};\nvar request = {\n    parent: formattedParent,\n    sink: sink\n};\nclient.createSink(request).then(function(responses) {\n    var response = responses[0];\n    // doThingsWith(response)\n}).catch(function(err) {\n    console.error(err);\n});"}],"params":[{"name":"request","description":"<p> The request object that will be sent.</p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.parent","description":"<p> Required. The resource in which to create the sink:</p><pre><code> &quot;projects/[PROJECT_ID]&quot; &quot;organizations/[ORGANIZATION_ID]&quot; </code></pre><p> Examples: <code>&quot;projects/my-logging-project&quot;</code>, <code>&quot;organizations/123456789&quot;</code>.</p>","types":["string"],"optional":false,"nullable":false},{"name":"request.sink","description":"<p> Required. The new sink, whose <code>name</code> parameter is a sink identifier that  is not already in use.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'LogSink'\n        })\">LogSink</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.uniqueWriterIdentity","description":"<p> Optional. Determines the kind of IAM identity returned as <code>writer_identity</code>  in the new sink. If this value is omitted or set to false, and if the  sink&#39;s parent is a project, then the value returned as <code>writer_identity</code> is  <code>cloud-logs@google.com</code>, the same identity used before the addition of  writer identities to this API. The sink&#39;s destination must be in the same  project as the sink itself.</p><p> If this field is set to true, or if the sink is owned by a non-project  resource such as an organization, then the value of <code>writer_identity</code> will  be a unique service account used only for exports from the new sink. For  more information, see <code>writer_identity</code> in {@link LogSink}.</p>","types":["boolean"],"optional":true,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this call, e.g, timeout,  retries, paginations, etc. See <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a> for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'LogSink'\n        })\">LogSink</a>.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'LogSink'\n        })\">LogSink</a>. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"updateSink","name":"updateSink","type":"instance","description":"<p>Updates a sink. If the named sink doesn&#39;t exist, then this method is identical to <a href=\"https://cloud.google.com/logging/docs/api/reference/rest/v2/projects.sinks/create\">sinks.create</a>. If the named sink does exist, then this method replaces the following fields in the existing sink with values from the new sink: <code>destination</code>, <code>filter</code>, <code>output_version_format</code>, <code>start_time</code>, and <code>end_time</code>. The updated filter might also have a new <code>writer_identity</code>; see the <code>unique_writer_identity</code> field.</p>","source":"packages\\logging\\src\\v2\\config_service_v2_client.js#L516","resources":[],"examples":[{"code":"\nvar client = loggingV2.configServiceV2Client();\nvar formattedSinkName = client.sinkPath(\"[PROJECT]\", \"[SINK]\");\nvar sink = {};\nvar request = {\n    sinkName: formattedSinkName,\n    sink: sink\n};\nclient.updateSink(request).then(function(responses) {\n    var response = responses[0];\n    // doThingsWith(response)\n}).catch(function(err) {\n    console.error(err);\n});"}],"params":[{"name":"request","description":"<p> The request object that will be sent.</p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.sinkName","description":"<p> Required. The full resource name of the sink to update, including the  parent resource and the sink identifier:</p><pre><code> &quot;projects/[PROJECT_ID]/sinks/[SINK_ID]&quot; &quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]&quot; </code></pre><p> Example: <code>&quot;projects/my-project-id/sinks/my-sink-id&quot;</code>.</p>","types":["string"],"optional":false,"nullable":false},{"name":"request.sink","description":"<p> Required. The updated sink, whose name is the same identifier that appears  as part of <code>sink_name</code>. If <code>sink_name</code> does not exist, then  this method creates a new sink.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'LogSink'\n        })\">LogSink</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.uniqueWriterIdentity","description":"<p> Optional. See  <a href=\"https://cloud.google.com/logging/docs/api/reference/rest/v2/projects.sinks/create\">sinks.create</a>  for a description of this field. When updating a sink, the effect of this  field on the value of <code>writer_identity</code> in the updated sink depends on both  the old and new values of this field:</p><ul> <li>If the old and new values of this field are both false or both true, then there is no change to the sink&#39;s <code>writer_identity</code>.</li> <li>If the old value was false and the new value is true, then <code>writer_identity</code> is changed to a unique service account.</li> <li>It is an error if the old value was true and the new value is false.</li> </ul> ","types":["boolean"],"optional":true,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this call, e.g, timeout,  retries, paginations, etc. See <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a> for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'LogSink'\n        })\">LogSink</a>.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'LogSink'\n        })\">LogSink</a>. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"deleteSink","name":"deleteSink","type":"instance","description":"<p>Deletes a sink. If the sink has a unique <code>writer_identity</code>, then that service account is also deleted.</p>","source":"packages\\logging\\src\\v2\\config_service_v2_client.js#L560","resources":[],"examples":[{"code":"\nvar client = loggingV2.configServiceV2Client();\nvar formattedSinkName = client.sinkPath(\"[PROJECT]\", \"[SINK]\");\nclient.deleteSink({sinkName: formattedSinkName}).catch(function(err) {\n    console.error(err);\n});"}],"params":[{"name":"request","description":"<p> The request object that will be sent.</p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.sinkName","description":"<p> Required. The full resource name of the sink to delete, including the  parent resource and the sink identifier:</p><pre><code> &quot;projects/[PROJECT_ID]/sinks/[SINK_ID]&quot; &quot;organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]&quot; </code></pre><p> It is an error if the sink does not exist. Example:  <code>&quot;projects/my-project-id/sinks/my-sink-id&quot;</code>. It is an error if  the sink does not exist.</p>","types":["string"],"optional":false,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this call, e.g, timeout,  retries, paginations, etc. See <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a> for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p>","types":["function(Error|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves when API call finishes. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"configServiceV2Client","name":"configServiceV2Client","type":"instance","description":"<p>Build a new instance of {@link ConfigServiceV2Client}.</p>","source":"packages\\logging\\src\\v2\\config_service_v2_client.js#L598","resources":[],"examples":[],"params":[{"name":"opts","description":"<ul> <li>The optional parameters.</li> </ul> ","types":["Object"],"optional":true,"nullable":false},{"name":"opts.servicePath","description":"<p> The domain name of the API remote host.</p>","types":["String"],"optional":true,"nullable":false},{"name":"opts.port","description":"<p> The port on which to connect to the remote host.</p>","types":["number"],"optional":true,"nullable":false},{"name":"opts.sslCreds","description":"<p> A ClientCredentials for use with an SSL-enabled channel.</p>","types":["grpc.ClientCredentials"],"optional":true,"nullable":false},{"name":"opts.clientConfig","description":"<p> The customized config to build the call settings. See  {@link gax.constructSettings} for the format.</p>","types":["Object"],"optional":true,"nullable":false}],"exceptions":[],"returns":[]}],"path":"config_service_v2_client.json"}