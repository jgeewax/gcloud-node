{"id":"datastore/transaction","type":"class","name":"entity","description":null,"source":"/lib/datastore/transaction.js#L27","parent":"datastore","children":[],"methods":[{"id":"entity","name":"entity","type":"instance","description":"<p>@type <a data-custom-type=\"datastore/entity</p\">datastore/entity</p</a>>","source":"/lib/datastore/transaction.js#L27","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"pb","name":"pb","type":"instance","description":"<p>@type <a data-custom-type=\"datastore/pb</p\">datastore/pb</p</a>>","source":"/lib/datastore/transaction.js#L30","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"util","name":"util","type":"instance","description":"<p>@type <a data-custom-type=\"common/util</p\">common/util</p</a>>","source":"/lib/datastore/transaction.js#L33","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"GOOGLE_APIS_HOST","name":"GOOGLE_APIS_HOST","type":"instance","description":"<p>@const {string} Host to send with API requests.</p>","source":"/lib/datastore/transaction.js#L36","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"MODE_NON_TRANSACTIONAL","name":"MODE_NON_TRANSACTIONAL","type":"instance","description":"<p>@const {string} Non-transaction mode key.</p>","source":"/lib/datastore/transaction.js#L39","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"MODE_TRANSACTIONAL","name":"MODE_TRANSACTIONAL","type":"instance","description":"<p>@const {string} Transaction mode key.</p>","source":"/lib/datastore/transaction.js#L42","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"Transaction","name":"Transaction","type":"instance","description":"<p>Build a Transaction object. Transactions will generally be built for you by <a data-custom-type=\"datastore/dataset\">datastore/dataset</a>. When you need to run a transactional operation, you use <a data-custom-type=\"datastore/dataset\" data-method=\"runInTransaction\">datastore/dataset#runInTransaction</a>.</p><p><em>Reference: {@link <a href=\"http://goo.gl/n4oSjt}\">http://goo.gl/n4oSjt}</a></em></p>","source":"/lib/datastore/transaction.js#L64","resources":[],"examples":[{"code":"var Connection = require('lib/common/connection.js').Connection;\nvar myConnection = new Connection({});\nvar transaction = new Transaction(myConnection, 'my-project-id');"}],"params":[{"name":"conn","description":"- An authorized connection to Google Cloud Datastore.","types":["<a data-custom-type=\"common\">common</a>","connection.Connection"]},{"name":"datasetId","description":"- Dataset ID. This is your project ID from the Google Developers Console. ","types":["string"]}],"exceptions":[],"returns":[]},{"id":"begin","name":"begin","type":"instance","description":"<p>Begin a remote transaction and identify the current transaction instance with the remote transaction&#39;s ID.</p>","source":"/lib/datastore/transaction.js#L92","resources":[],"examples":[{"code":"transaction.begin(function(err) {\n  // Perform Datastore operations as usual.\n  transaction.get(dataset.key(['Company', 123]), function(err, entity) {\n    // Commit the transaction.\n    transaction.finalize(function(err) {});\n\n    // Rollback the transaction.\n    transaction.rollback(function(err) {});\n  });\n});"}],"params":[{"name":"callback","description":"- The function to execute within the context of a transaction. ","types":["function"]}],"exceptions":[],"returns":[]},{"id":"rollback","name":"rollback","type":"instance","description":"<p>Reverse a transaction remotely and finalize the current transaction instance.</p>","source":"/lib/datastore/transaction.js#L121","resources":[],"examples":[{"code":"transaction.begin(function(err) {\n  transaction.rollback(function(err) {\n    if (err) {\n      // Transaction could not be rolled back.\n    }\n  });\n});"}],"params":[{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]},{"id":"commit","name":"commit","type":"instance","description":"<p>Commit the remote transaction and finalize the current transaction instance.</p>","source":"/lib/datastore/transaction.js#L150","resources":[],"examples":[{"code":"transaction.begin(function(err) {\n  transaction.commit(function(err) {\n    if (err) {\n      // Transaction could not be committed.\n    }\n  });\n});"}],"params":[{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]},{"id":"finalize","name":"finalize","type":"instance","description":"<p>Commit a transaction if it&#39;s not finalized yet.</p>","source":"/lib/datastore/transaction.js#L179","resources":[],"examples":[{"code":"transaction.begin(function(err) {\n  transaction.finalize(function(err) {\n    if (err) {\n      // Transaction could not be finalized.\n    }\n  });\n});"}],"params":[{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]},{"id":"get","name":"get","type":"instance","description":"<p>Retrieve the entities identified with the specified key(s) in the current transaction. Get operations require a valid key to retrieve the key-identified entity from Datastore.</p>","source":"/lib/datastore/transaction.js#L207","resources":[],"examples":[{"code":"// These examples work with both a Transaction object and a Dataset object.\n\n// Get a single entity.\ntransaction.get(dataset.key(['Company', 123]), function(err, entity) {});\n\n// Get multiple entities at once.\ntransaction.get([\n  dataset.key(['Company', 123]),\n  dataset.key(['Product', 'Computer'])\n], function(err, entities) {});"}],"params":[{"name":"key","description":"- Datastore key object(s).","types":["Key","Key[]"]},{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]},{"id":"save","name":"save","type":"instance","description":"<p>Insert or update the specified object(s) in the current transaction. If a key is incomplete, its associated object is inserted and its generated identifier is returned to the callback.</p>","source":"/lib/datastore/transaction.js#L283","resources":[],"examples":[{"code":"// These examples work with both a Transaction object and a Dataset object.\n\n// Save a single entity.\ntransaction.save({\n  key: dataset.key('Company'),\n  data: {\n    rating: '10'\n  }\n}, function(err, key) {\n  // Because we gave an incomplete key as an argument, `key` will be\n  // populated with the complete, generated key.\n});\n\n// Save multiple entities at once.\ntransaction.save([\n  {\n    key: dataset.key(['Company', 123]),\n    data: {\n      HQ: 'Dallas, TX'\n    }\n  },\n  {\n    key: dataset.key(['Product', 'Computer']),\n    data: {\n      vendor: 'Dell'\n    }\n  }\n], function(err, keys) {});"}],"params":[{"name":"entities","description":"- Datastore key object(s).","types":["object","object[]"]},{"name":"entities.key","description":"- Datastore key object.","types":["Key"]},{"name":"entities.data","description":"- Data to save with the provided key.","types":["object"]},{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]},{"id":"delete","name":"delete","type":"instance","description":"<p>Delete all entities identified with the specified key(s) in the current transaction.</p>","source":"/lib/datastore/transaction.js#L345","resources":[],"examples":[{"code":"// These examples work with both a Transaction object and a Dataset object.\n\n// Delete a single entity.\ntransaction.delete(dataset.key(['Company', 123]), function(err) {});\n\n// Delete multiple entities at once.\ntransaction.delete([\n  dataset.key(['Company', 123]),\n  dataset.key(['Product', 'Computer'])\n], function(err) {});"}],"params":[{"name":"key","description":"- Datastore key object(s).","types":["Key","Key[]"]},{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]},{"id":"runQuery","name":"runQuery","type":"instance","description":"<p>Datastore allows you to query entities by kind, filter them by property filters, and sort them by a property name. Projection and pagination are also supported. If more results are available, a query to retrieve the next page is provided to the callback function.</p>","source":"/lib/datastore/transaction.js#L388","resources":[],"examples":[{"code":"// Retrieve 5 companies.\ntransaction.runQuery(queryObject, function(err, entities, nextQuery) {\n  // `nextQuery` is not null if there are more results.\n  if (nextQuery) {\n    transaction.runQuery(nextQuery, function(err, entities, nextQuery) {});\n  }\n});"}],"params":[{"name":"query","description":"- Query object.","types":["<a data-custom-type=\"datastore\">datastore</a>","query"]},{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]},{"id":"mapQuery","name":"mapQuery","type":"instance","description":"<p>mapQuery</p>","source":"/lib/datastore/transaction.js#L424","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"makeReq","name":"makeReq","type":"instance","description":"<p>Make a request to the API endpoint.</p>","source":"/lib/datastore/transaction.js#L444","resources":[],"examples":[{"code":"var deleteRequest = {\n  MODE: 'NON_TRANSACTIONAL',\n  mutation: {\n    delete: [] // datastore key objects.\n  }\n};\ntransaction.makeReq('commit', deleteRequest, function(err) {});"}],"params":[{"name":"method","description":"- Transaction action (allocateIds, commit, etc.).","types":["string"]},{"name":"req","description":"- Request configuration object.","types":["object"]},{"name":"callbcak","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]}]}