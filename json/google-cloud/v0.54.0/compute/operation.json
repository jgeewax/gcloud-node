{"id":"compute/operation","type":"class","name":"Operation","overview":"<p>\n  This class allows you interact with Compute Engine.\n</p>\n\n\n<div class=\"notice\">\n  <strong><code>google-cloud</code> is deprecated</strong>\n  <p>\n    Due to the scope of our API rapidly increasing, you may notice a decrease in performance if you continue to use the bundled module, <code>google-cloud</code>.\n  </p>\n  <p>\n    Going forward, please install only the individual service modules that you need, such as <code>@google-cloud/compute</code>.\n  </p>\n</div>\n\n\n<p>\n  First, install <code>google-cloud</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save google-cloud</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>google-cloud</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Google Cloud Platform</h4>\n<div hljs language=\"javascript\">\nvar gcloud = require('google-cloud');\nvar gce = gcloud.compute();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar gcloud = require('google-cloud');\nvar gce = gcloud.compute({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>google-cloud</code> are outlined in our <a href=\"#/docs/google-cloud/v0.54.0/guides/authentication\">Authentication guide</a>.\n</p>\n","description":"","source":"packages/compute/src/operation.js","parent":"compute","children":[],"methods":[{"id":"Operation","name":"Operation","type":"constructor","description":"<p>An Operation object allows you to interact with a Google Compute Engine operation.</p><p>An operation can be a <a href=\"https://cloud.google.com/compute/docs/reference/v1/globalOperations\">GlobalOperation</a>, <a href=\"https://cloud.google.com/compute/docs/reference/v1/regionOperations\">RegionOperation</a>, or <a href=\"https://cloud.google.com/compute/docs/reference/v1/zoneOperations\">ZoneOperation</a>.</p>","source":"packages/compute/src/operation.js#L94","resources":[],"examples":[{"caption":"<p>Reference a global operation.</p>","code":"var operation = gce.operation('operation-id');"},{"caption":"<p>Reference a region operation.</p>","code":"var region = gce.region('us-central1');\nvar operation = region.operation('operation-id');"},{"caption":"<p>Reference a zone operation.</p>","code":"var zone = gce.zone('us-central1-a');\nvar operation = zone.operation('operation-id');"},{"caption":"<p>All operations are event emitters. The status of each operation is polled \ncontinuously, starting only after you register a \"complete\" listener.</p>","code":"operation.on('complete', function(metadata) {\n  // The operation is complete.\n});"},{"caption":"<p>You can register a listener to monitor when the operation begins running.</p>","code":"operation.on('running', function(metadata) {\n  // The operation is running.\n});"},{"caption":"<p>Be sure to register an error handler as well to catch any issues which \nimpeded the operation.</p>","code":"operation.on('error', function(err) {\n  // An error occurred during the operation.\n});"},{"caption":"<p>To force the Operation object to stop polling for updates, simply remove \nany \"complete\" listeners you've registered. \nThe easiest way to do this is with <code>removeAllListeners()</code>.</p>","code":"operation.removeAllListeners();"}],"params":[],"exceptions":[],"returns":[]},{"id":"delete","name":"delete","type":"instance","description":"<p>Delete the operation.</p>","source":"packages/compute/src/operation.js#L120","resources":[{"title":"GlobalOperations: delete API Documentation","link":"https://cloud.google.com/compute/docs/reference/v1/globalOperations/delete"},{"title":"RegionOperations: delete API Documentation","link":"https://cloud.google.com/compute/docs/reference/v1/regionOperations/delete"},{"title":"ZoneOperations: delete API Documentation","link":"https://cloud.google.com/compute/docs/reference/v1/zoneOperations/delete"}],"examples":[{"code":"operation.delete(function(err, apiResponse) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"operation.delete().then(function(data) {\n  var apiResponse = data[0];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"exists","name":"exists","type":"instance","description":"<p>Check if the operation exists.</p>","source":"packages/compute/src/operation.js#L140","resources":[],"examples":[{"code":"operation.exists(function(err, exists) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"operation.exists().then(function(data) {\n  var exists = data[0];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.exists","description":"<ul> <li>Whether the operation exists or not.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"get","name":"get","type":"instance","description":"<p>Get an operation if it exists.</p>","source":"packages/compute/src/operation.js#L158","resources":[],"examples":[{"code":"operation.get(function(err, operation, apiResponse) {\n  // `operation` is an Operation object.\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"operation.get().then(function(data) {\n  var operation = data[0];\n  var apiResponse = data[1];\n});"}],"params":[],"exceptions":[],"returns":[]},{"id":"getMetadata","name":"getMetadata","type":"instance","description":"<p>Get the operation&#39;s metadata. For a detailed description of metadata see <a href=\"https://goo.gl/sWm1rt\">Operation resource</a>.</p>","source":"packages/compute/src/operation.js#L200","resources":[{"title":"GlobalOperations: get API Documentation","link":"https://cloud.google.com/compute/docs/reference/v1/globalOperations/get"},{"title":"RegionOperations: get API Documentation","link":"https://cloud.google.com/compute/docs/reference/v1/regionOperations/get"},{"title":"ZoneOperations: get API Documentation","link":"https://cloud.google.com/compute/docs/reference/v1/zoneOperations/get"}],"examples":[{"code":"operation.getMetadata(function(err, metadata, apiResponse) {\n  // `metadata.error`: Contains errors if the operation failed.\n  // `metadata.warnings`: Contains warnings.\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"operation.getMetadata().then(function(data) {\n  var metadata = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.metadata","description":"<ul> <li>The disk&#39;s metadata.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]}],"path":"operation.json"}