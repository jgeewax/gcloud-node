{"id":"storage","type":"class","name":"Storage","description":null,"source":"/lib/storage/index.js#L79","parent":null,"children":["./json/v0.14.0/storage/bucketon","./json/v0.14.0/storage/fileon","./json/v0.14.0/storageon"],"methods":[{"id":"Storage","name":"Storage","type":"constructor","description":"<p>To access your Cloud Storage buckets, you will use the <code>bucket</code> function returned from this <code>storage</code> object.</p><p>The examples below will demonstrate the different usage patterns your app may need to connect to <code>gcloud</code> and access your bucket.</p>","source":"/lib/storage/index.js#L79","resources":[],"examples":[{"code":"var gcloud = require('gcloud')({\n  keyFilename: '/path/to/keyfile.json',\n  projectId: 'my-project'\n});\n\nvar storage = myProject.storage();"}],"params":[{"name":"options","description":"<ul> <li><a href=\"#/docs\">Configuration object</a>.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"acl","name":"acl","type":"instance","description":"<p>Google Cloud Storage uses access control lists (ACLs) to manage object and bucket access. ACLs are the mechanism you use to share objects with other users and allow other users to access your buckets and objects.</p><p>This object provides constants to refer to the three permission levels that can be granted to a scope:</p><ul> <li><code>storage.acl.OWNER_ROLE</code> - (&quot;OWNER&quot;)</li> <li><code>storage.acl.READER_ROLE</code> - (&quot;READER&quot;)</li> <li><code>storage.acl.WRITER_ROLE</code> - (&quot;WRITER&quot;)</li> </ul> <p>For more detailed information, see <a href=\"http://goo.gl/6qBBPO\">About Access Control Lists</a>.</p>","source":"/lib/storage/index.js#L142","resources":[],"examples":[{"code":"var storage = gcloud.storage();\nvar albums = storage.bucket('albums');"},{"caption":"<p>Make all of the files currently in a bucket publicly readable.</p>","code":"albums.acl.add({\n  scope: 'allUsers',\n  permission: storage.acl.READER_ROLE\n}, function(err, aclObject) {});"},{"caption":"<p>Make any new objects added to a bucket publicly readable.</p>","code":"albums.acl.default.add({\n  scope: 'allUsers',\n  permission: storage.acl.READER_ROLE\n}, function(err, aclObject) {});"},{"caption":"<p>Grant a user ownership permissions to a bucket.</p>","code":"albums.acl.add({\n  scope: 'user-useremail@example.com',\n  permission: storage.acl.OWNER_ROLE\n}, function(err, aclObject) {});"}],"params":[],"exceptions":[],"returns":[]},{"id":"bucket","name":"bucket","type":"instance","description":"<p>Get a reference to a Google Cloud Storage bucket.</p>","source":"/lib/storage/index.js#L166","resources":[],"examples":[{"code":"var gcloud = require('gcloud')({\n  keyFilename: '/path/to/keyfile.json'\n});\n\nvar storage = gcloud.storage();\n\nvar albums = storage.bucket('albums');\nvar photos = storage.bucket('photos');"}],"params":[{"name":"name","description":"<ul> <li>Name of the existing bucket.</li> </ul> ","types":["object","string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"createBucket","name":"createBucket","type":"instance","description":"<p>Create a bucket.</p>","source":"/lib/storage/index.js#L207","resources":[],"examples":[{"code":"var callback = function(err, bucket, apiResponse) {\n  // `bucket` is a Bucket object.\n};\n\nstorage.createBucket('new-bucket', callback);"},{"caption":"<p>Specify metadata.</p>","code":"var metadata = {\n  mainPageSuffix: '/unknown/',\n  maxAgeSeconds: 90\n};\n\nstorage.createBucket('new-bucket', metadata, callback);"},{"caption":"<p>Enable versioning on a new bucket.</p>","code":"var metadata = {\n  versioning: {\n    enabled: true\n  }\n};\n\nstorage.createBucket('new-bucket', metadata, callback);"}],"params":[{"name":"name","description":"<ul> <li>Name of the bucket to create.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"metadata","description":"<ul> <li>Metadata to set for the bucket.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false}],"exceptions":[{"type":"Error","description":"<p>If a name is not provided.</p>"}],"returns":[]},{"id":"getBuckets","name":"getBuckets","type":"instance","description":"<p>Get Bucket objects for all of the buckets in your project.</p>","source":"/lib/storage/index.js#L268","resources":[],"examples":[{"code":"storage.getBuckets(function(err, buckets, nextQuery) {\n  if (nextQuery) {\n    // nextQuery will be non-null if there are more results.\n    var callback = function(err, buckets, nextQuery, apiResponse){};\n    storage.getBuckets(nextQuery, callback);\n  }\n\n  // The `metadata` property is populated for you with the metadata at the\n  // time of fetching.\n  buckets[0].metadata;\n\n  // However, in cases where you are concerned the metadata could have\n  // changed, use the `getMetadata` method.\n  buckets[0].getMetadata(function(err, metadata, apiResponse) {});\n});"},{"caption":"<p>Fetch using a query.</p>","code":"storage.getBuckets({\n  maxResults: 5\n}, function(err, buckets, nextQuery, apiResponse) {});"}],"params":[{"name":"query","description":"<ul> <li>Query object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"query.maxResults","description":"<ul> <li>Maximum number of items plus prefixes to return.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"query.pageToken","description":"<ul> <li>A previously-returned page token representing part of the larger set of results to view.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]}]}