{"id":"pubsub/subscription","type":"class","name":"pubsub/subscription","description":null,"source":"/lib/pubsub/subscription.js#L114","parent":"pubsub","children":[],"methods":[{"id":"pubsub/subscription","name":"pubsub/subscription","type":"constructor","description":"<p>A Subscription object will give you access to your Google Cloud Pub/Sub subscription.</p><p>Subscriptions are sometimes retrieved when using various methods:</p><ul> <li><a data-custom-type=\"pubsub\" data-method=\"getSubscriptions\">pubsub#getSubscriptions</a></li> <li><a data-custom-type=\"pubsub/topic\" data-method=\"getSubscriptions\">pubsub/topic#getSubscriptions</a></li> <li><a data-custom-type=\"pubsub/topic\" data-method=\"subscribe\">pubsub/topic#subscribe</a></li> </ul> <p>Subscription objects may be created directly with:</p><ul> <li><a data-custom-type=\"pubsub/topic\" data-method=\"subscription\">pubsub/topic#subscription</a></li> </ul> <p>All Subscription objects are instances of an <a href=\"http://nodejs.org/api/events.html\">EventEmitter</a>. The subscription will pull for messages automatically as long as there is at least one listener assigned for the <code>message</code> event.</p>","source":"/lib/pubsub/subscription.js#L114","resources":[],"examples":[{"caption":"<p>From <a data-custom-type=\"pubsub\" data-method=\"getSubscriptions\">pubsub#getSubscriptions</a>:</p>","code":"pubsub.getSubscriptions(function(err, subscriptions) {\n  // `subscriptions` is an array of Subscription objects.\n});"},{"caption":"<p>From <a data-custom-type=\"pubsub/topic\" data-method=\"getSubscriptions\">pubsub/topic#getSubscriptions</a>:</p>","code":"var topic = pubsub.topic('my-existing-topic');\ntopic.getSubscriptions(function(err, subscriptions) {\n  // `subscriptions` is an array of Subscription objects.\n});"},{"caption":"<p>From <a data-custom-type=\"pubsub/topic\" data-method=\"subscribe\">pubsub/topic#subscribe</a>:</p>","code":"var topic = pubsub.topic('my-existing-topic');\ntopic.subscribe('new-subscription', function(err, subscription) {\n  // `subscription` is a Subscription object.\n});"},{"caption":"<p>From <a data-custom-type=\"pubsub/topic\" data-method=\"subscription\">pubsub/topic#subscription</a>:</p>","code":"var topic = pubsub.topic('my-existing-topic');\nvar subscription = topic.subscription('my-existing-subscription');\n// `subscription` is a Subscription object."},{"caption":"<p>Once you have obtained a subscription object, you may begin to register listeners. This will automatically trigger pulling for messages.</p>","code":"// Register an error handler.\nsubscription.on('error', function(err) {});\n\n// Register a listener for `message` events.\nfunction onMessage(message) {\n  // Called every time a message is received.\n  // message.id = ID of the message.\n  // message.ackId = ID used to acknowledge the message receival.\n  // message.data = Contents of the message.\n}\nsubscription.on('message', onMessage);\n\n// Remove the listener from receiving `message` events.\nsubscription.removeListener('message', onMessage);"}],"params":[],"exceptions":[],"returns":[]},{"id":"ack","name":"ack","type":"instance","description":"<p>Acknowledge to the backend that the message was retrieved. You must provide either a single ackId or an array of ackIds.</p>","source":"/lib/pubsub/subscription.js#L257","resources":[],"examples":[{"code":"subscription.ack('ePHEESyhuE8e...', function(err, apiResponse) {});"}],"params":[{"name":"ackIds","description":"<ul> <li>An ackId or array of ackIds.</li> </ul> ","types":["string","string[]"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false}],"exceptions":[{"type":"Error","description":"<p>If at least one ackId is not provided.</p>"}],"returns":[]},{"id":"delete","name":"delete","type":"instance","description":"<p>Delete the subscription. Pull requests from the current subscription will be errored once unsubscription is complete.</p>","source":"/lib/pubsub/subscription.js#L279","resources":[],"examples":[{"code":"subscription.delete(function(err, apiResponse) {});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false}],"exceptions":[],"returns":[]},{"id":"pull","name":"pull","type":"instance","description":"<p>Pull messages from the subscribed topic. If messages were found, your callback is executed with an array of message objects.</p><p>Note that messages are pulled automatically once you register your first event listener to the subscription, thus the call to <code>pull</code> is handled for you. If you don&#39;t want to start pulling, simply don&#39;t register a <code>subscription.on(&#39;message&#39;, function() {})</code> event handler.</p>","source":"/lib/pubsub/subscription.js#L336","resources":[],"examples":[{"caption":"<p>Pull all available messages.</p>","code":"subscription.pull(function(err, messages) {\n  // messages = [\n  //   {\n  //     ackId: '',     // ID used to acknowledge its receival.\n  //     id: '',        // Unique message ID.\n  //     data: '',      // Contents of the message.\n  //     attributes: {} // Attributes of the message.\n  //   },\n  //   // ...\n  // ]\n});"},{"caption":"<p>Pull a single message.</p>","code":"var opts = {\n  maxResults: 1\n};\n\nsubscription.pull(opts, function(err, messages, apiResponse) {});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.returnImmediately","description":"<ul> <li>If set, the system will respond immediately. Otherwise, wait until new messages are available. Returns if  timeout is reached.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"options.maxResults","description":"<ul> <li>Limit the amount of messages pulled.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"setAckDeadline","name":"setAckDeadline","type":"instance","description":"<p>Modify the ack deadline for a specific message. This method is useful to indicate that more time is needed to process a message by the subscriber, or to make the message available for redelivery if the processing was interrupted.</p>","source":"/lib/pubsub/subscription.js#L397","resources":[],"examples":[{"code":"var options = {\n  ackId: 123,\n  seconds: 10 // Expire in 10 seconds from call.\n};\nsubscription.setAckDeadline(options, function(err, apiResponse) {});"}],"params":[{"name":"options","description":"<ul> <li>The configuration object.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"options.ackId","description":"<ul> <li>The ack id to change.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"options.seconds","description":"<ul> <li>Number of seconds after call is made to set the deadline of the ack.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["Function"],"optional":true,"nullable":false}],"exceptions":[],"returns":[]}]}