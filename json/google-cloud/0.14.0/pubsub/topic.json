{"id":"pubsub/topic","type":"class","name":"Topic","description":null,"source":"/lib/pubsub/topic.js#L58","parent":"pubsub","children":[],"methods":[{"id":"Topic","name":"Topic","type":"constructor","description":"<p>A Topic object allows you to interact with a Google Cloud Pub/Sub topic. To get this object, you will use the methods on the <code>pubsub</code> object, <a data-custom-type=\"pubsub\" data-method=\"topic\">pubsub#topic</a> and <a data-custom-type=\"pubsub\" data-method=\"createTopic\">pubsub#createTopic</a>.</p>","source":"/lib/pubsub/topic.js#L58","resources":[],"examples":[{"code":"// From pubsub.topic:\nvar topic = pubsub.topic('my-existing-topic');\n\n// From pubsub.createTopic:\npubsub.createTopic('my-new-topic', function(err, topic) {\n  // `topic` is a Topic object.\n});"}],"params":[],"exceptions":[],"returns":[]},{"id":"publish","name":"publish","type":"instance","description":"<p>Publish the provided message or array of messages. On success, an array of messageIds is returned in the response.</p>","source":"/lib/pubsub/topic.js#L175","resources":[],"examples":[{"code":"var registerMessage = {\n  data: {\n    userId: 3,\n    name: 'Stephen',\n    event: 'new user'\n  },\n  attributes: {\n    key: 'value',\n    hello: 'world'\n  }\n};\ntopic.publish(registerMessage, function(err, messageIds, apiResponse) {});"},{"caption":"<p>You can publish a batch of messages at once by supplying an array.</p>","code":"var purchaseMessage = {\n  data: {\n    userId: 3,\n    product: 'computer',\n    event: 'purchase'\n  }\n};\n\ntopic.publish([\n  registerMessage,\n  purchaseMessage\n], function(err, messageIds, apiResponse) {});"}],"params":[{"name":"message","description":"<ul> <li>The message(s) to publish.</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false},{"name":"message.data","description":"<ul> <li>The contents of the message.</li> </ul> ","types":[],"optional":false,"nullable":false},{"name":"message.attributes","description":"<ul> <li>Key/value pair of attributes to apply to the message. All values must be strings.</li> </ul> ","types":["array"],"optional":true,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false}],"exceptions":[{"type":"Error","description":"<p>If no message is provided.</p>"},{"type":"Error","description":"<p>If a message is missing a data property.</p>"}],"returns":[]},{"id":"delete","name":"delete","type":"instance","description":"<p>Delete the topic. This will also delete any subscriptions to this topic.</p>","source":"/lib/pubsub/topic.js#L210","resources":[],"examples":[{"code":"topic.delete(function(err, apiResponse) {});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false}],"exceptions":[],"returns":[]},{"id":"getSubscriptions","name":"getSubscriptions","type":"instance","description":"<p>Get a list of the subscriptions registered to this topic. You may optionally provide a query object as the first argument to customize the response.</p><p>Your provided callback will either be invoked with an error object, if an API error occurred, or an array of <a data-custom-type=\"pubsub/subscription\">pubsub/subscription</a> objects.</p>","source":"/lib/pubsub/topic.js#L240","resources":[],"examples":[{"code":"// Get all subscriptions for this topic.\ntopic.getSubscriptions(function(err, subscriptions, nextQuery, apiResponse) {\n  // If `nextQuery` is non-null, there may be more results to fetch. To do\n  // so, run `topic.getSubscriptions(nextQuery, callback);`.\n});\n\n// Customize the query.\ntopic.getSubscriptions({\n  pageSize: 3\n}, function(err, subscriptions, nextQuery, apiResponse) {});"}],"params":[{"name":"query","description":"<ul> <li>Query object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"query.pageToken","description":"<ul> <li>Page token.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"query.pageSize","description":"<ul> <li>Maximum number of results to return.</li> </ul> ","types":["number"],"optional":true,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"subscribe","name":"subscribe","type":"instance","description":"<p>Create a subscription to this topic. You may optionally provide an object to customize the subscription.</p><p>Your provided callback will either be invoked with an error object, if an API error occurred, or a <a data-custom-type=\"pubsub/subscription\">pubsub/subscription</a> object.</p>","source":"/lib/pubsub/topic.js#L302","resources":[],"examples":[{"code":"// Without specifying any options.\ntopic.subscribe('my-cool-sub', function(err, subscription, apiResponse) {});\n\n// With options.\ntopic.subscribe('my-cool-sub', {\n  ackDeadlineSeconds: 90,\n  autoAck: true,\n  interval: 30\n}, function(err, subscription, apiResponse) {});"}],"params":[{"name":"name","description":"<ul> <li>The name of the subscription.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.ackDeadlineSeconds","description":"<ul> <li>The maximum time after receiving a message that you must ack a message before it is redelivered.</li> </ul> ","types":["number"],"optional":true,"nullable":false},{"name":"options.autoAck","description":"<ul> <li>Automatically acknowledge the message once it&#39;s pulled. (default: false)</li> </ul> ","types":["boolean"],"optional":true,"nullable":false},{"name":"options.interval","description":"<ul> <li>Interval in milliseconds to check for new messages. (default: 10)</li> </ul> ","types":["number"],"optional":true,"nullable":false},{"name":"options.reuseExisting","description":"<ul> <li>If the subscription already exists, reuse it. The options of the existing subscription are not changed. If  false, attempting to create a subscription that already exists will fail.  (default: false)</li> </ul> ","types":["boolean"],"optional":true,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false}],"exceptions":[{"type":"Error","description":"<p>If a name is not provided.</p>"}],"returns":[]},{"id":"subscription","name":"subscription","type":"instance","description":"<p>Create a Subscription object in reference to an existing subscription. This command by itself will not run any API requests. You will receive a <a data-custom-type=\"pubsub/subscription\">pubsub/subscription</a> object, which will allow you to interact with your subscription.</p>","source":"/lib/pubsub/topic.js#L360","resources":[],"examples":[{"code":"var subscription = topic.subscription('my-existing-subscription');\n\n// Register a listener for `message` events.\nsubscription.on('message', function(message) {\n  // Called every time a message is received.\n  // message.id = ID used to acknowledge its receival.\n  // message.data = Contents of the message.\n  // message.attributes = Attributes of the message.\n});"}],"params":[{"name":"name","description":"<ul> <li>Name of the subscription.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.autoAck","description":"<ul> <li>Automatically acknowledge the message once it&#39;s pulled.</li> </ul> ","types":["boolean"],"optional":true,"nullable":false},{"name":"options.interval","description":"<ul> <li>Interval in milliseconds to check for new messages.</li> </ul> ","types":["number"],"optional":true,"nullable":false}],"exceptions":[{"type":"Error","description":"<p>If a name is not provided.</p>"}],"returns":[]}]}