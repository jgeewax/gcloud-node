{"id":"storage","type":"class","name":"Bucket","description":null,"source":"/lib/storage/index.js","parent":null,"children":["./json/v0.6.0/storageon"],"methods":[{"id":"Bucket","name":"Bucket","type":"instance","description":"<p>Google Cloud Storage allows you to store data on Google infrastructure. See the guide on {@link <a href=\"https://developers.google.com/storage}\">https://developers.google.com/storage}</a> to create a bucket.</p>","source":"/lib/storage/index.js","resources":[],"examples":[{"code":"var gcloud = require('gcloud');\nvar storage = gcloud.storage;\nvar bucket;\n\n// From Google Compute Engine\nbucket = new storage.Bucket({\n  bucketName: YOUR_BUCKET_NAME\n});\n\n// From elsewhere\nbucket = new storage.Bucket({\n  bucketName: YOUR_BUCKET_NAME,\n  keyFilename: '/path/to/the/key.json'\n});"}],"params":[{"name":"options","description":"- Configuration options.","types":["object"]},{"name":"options.bucketName","description":"- Name of the bucket.","types":["string"]},{"name":"options.keyFilename","description":"- Full path to the JSON key downloaded from the Google Developers Console. Alternatively, you may provide a <code>credentials</code> object.","types":["string="]},{"name":"options.credentials","description":"- Credentials object, used in place of a <code>keyFilename</code>. ","types":["object="]}],"exceptions":[{"type":"if","description":"a bucket name isn't provided. "}],"returns":[]},{"id":"list","name":"list","type":"instance","description":"<p>List files from the current bucket.</p>","source":"/lib/storage/index.js","resources":[],"examples":[{"code":"bucket.list(function(err, files, nextQuery) {\n  if (nextQuery) {\n    // nextQuery will be non-null if there are more results.\n    bucket.list(nextQuery, function(err, files, nextQuery) {});\n  }\n});\n\n// Fetch using a query.\nbucket.list({ maxResults: 5 }, function(err, files, nextQuery) {});"}],"params":[{"name":"query","description":"- Query object.","types":["object="]},{"name":"query.delimiter","description":"- Results will contain only objects whose names, aside from the prefix, do not contain delimiter. Objects whose names, aside from the prefix, contain delimiter will have their name truncated after the delimiter, returned in prefixes. Duplicate prefixes are omitted.","types":["string"]},{"name":"query.prefix","description":"- Filters results to objects whose names begin with this prefix.","types":["string"]},{"name":"query.maxResults","description":"- Maximum number of items plus prefixes to return.","types":["number"]},{"name":"query.pageToken","description":"- A previously-returned page token representing part of the larger set of results to view.","types":["string"]},{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]},{"id":"stat","name":"stat","type":"instance","description":"<p>Stat a file.</p>","source":"/lib/storage/index.js","resources":[],"examples":[{"code":"bucket.stat('filename', function(err, metadata) {});"}],"params":[{"name":"name","description":"- Name of the remote file.","types":["string"]},{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]},{"id":"copy","name":"copy","type":"instance","description":"<p>Copy an existing file. If no bucket name is provided for the destination file, the current bucket name will be used.</p>","source":"/lib/storage/index.js","resources":[],"examples":[{"code":"bucket.copy('filename', {\n   bucket: 'destination-bucket',\n   name: 'destination-filename'\n}, function(err) {});"}],"params":[{"name":"name","description":"- Name of the existing file.","types":["string"]},{"name":"metadata","description":"- Destination file metadata object.","types":["object"]},{"name":"metadata.name","description":"- Name of the destination file.","types":["string"]},{"name":"metadata.bucket","description":"- Destination bucket for the file. If none is provided, the source's bucket name is used.","types":["string="]},{"name":"callback","description":"- The callback function. ","types":["function="]}],"exceptions":[{"type":"if","description":"the destination filename is not provided. "}],"returns":[]},{"id":"remove","name":"remove","type":"instance","description":"<p>Remove a file.</p>","source":"/lib/storage/index.js","resources":[],"examples":[{"code":"bucket.remove('filename', function(err) {});"}],"params":[{"name":"name","description":"- Name of the file to remove.","types":["string"]},{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]},{"id":"getSignedUrl","name":"getSignedUrl","type":"instance","description":"<p>Get a signed URL to allow limited time access to a resource.</p><p>{@link <a href=\"https://developers.google.com/storage/docs/accesscontrol#Signed-URLs}\">https://developers.google.com/storage/docs/accesscontrol#Signed-URLs}</a></p>","source":"/lib/storage/index.js","resources":[],"examples":[{"code":"var signedUrl = bucket.getSignedUrl({\n  action: 'read',\n  expires: Math.round(Date.now() / 1000) + (60 * 60 * 24 * 14), // 2 weeks.\n  resource: 'my-dog.jpg'\n}, function(err, url) {});"}],"params":[{"name":"options","description":"- Configuration object.","types":["object"]},{"name":"options.action","description":"- \"read\", \"write\", or \"delete\"","types":["string"]},{"name":"options.contentMd5","description":"- The MD5 digest value in base64. If you provide this, the client must provide this HTTP header with this same value in its request.","types":["string="]},{"name":"options.contentType","description":"- If you provide this value, the client must provide this HTTP header set to the same value.","types":["string="]},{"name":"options.expires","description":"- Timestamp (seconds since epoch) when this link will expire.","types":["number"]},{"name":"options.extensionHeaders","description":"- If these headers are used, the server will check to make sure that the client provides matching values.","types":["string="]},{"name":"options.resource","description":"- Resource to allow access to. ","types":["string"]}],"exceptions":[],"returns":[]},{"id":"createReadStream","name":"createReadStream","type":"instance","description":"<p>Create a readable stream to read contents of the provided remote file. It can be piped to a write stream, or listened to for &#39;data&#39; events to read a file&#39;s contents.</p>","source":"/lib/storage/index.js","resources":[],"examples":[{"code":"// Create a readable stream and write the file contents to \"local-file-path\".\nvar fs = require('fs');\n\nbucket.createReadStream('remote-file-name')\n   .pipe(fs.createWriteStream('local-file-path'))\n   .on('error', function(err) {});"}],"params":[{"name":"name","description":"- Name of the remote file.","types":["string"]}],"exceptions":[],"returns":[]},{"id":"createWriteStream","name":"createWriteStream","type":"instance","description":"<p>Create a duplex stream to handle the upload of a file.</p>","source":"/lib/storage/index.js","resources":[],"examples":[{"code":"// Read from a local file and pipe to your bucket.\nvar fs = require('fs');\n\nfs.createReadStream('local-file-path')\n    .pipe(bucket.createWriteStream('remote-file-name'))\n    .on('error', function(err) {})\n    .on('complete', function(fileObject) {});"}],"params":[{"name":"name","description":"- Name of the remote file to create.","types":["string"]},{"name":"metadata","description":"- Optional metadata.","types":["object="]}],"exceptions":[],"returns":[]},{"id":"write","name":"write","type":"instance","description":"<p>Write the provided data to the destination with optional metadata.</p>","source":"/lib/storage/index.js","resources":[],"examples":[{"code":"// Upload \"Hello World\" as file contents. `data` can be any string or buffer.\nbucket.write('filename', {\n  data: 'Hello World'\n}, function(err) {});\n\n// A shorthand for the above.\nbucket.write('filename', 'Hello World', function(err) {});"}],"params":[{"name":"name","description":"- Name of the remote file to create.","types":["string"]},{"name":"options","description":"- Configuration object or data.","types":["object","string","buffer"]},{"name":"options.metadata","description":"- Optional metadata.","types":["object="]},{"name":"callback","description":"- The callback function. ","types":["function="]}],"exceptions":[],"returns":[]}]}