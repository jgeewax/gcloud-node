{"id":"storage/bucket","type":"class","name":"Bucket","description":null,"source":"/lib/storage/bucket.js","parent":"storage","children":[],"methods":[{"id":"Bucket","name":"Bucket","type":"instance","description":"<p>Create a Bucket object to interact with a Google Cloud Storage bucket.</p>","source":"/lib/storage/bucket.js","resources":[],"examples":[{"code":"var gcloud = require('gcloud');\n\n// From Google Compute Engine\nvar albums = gcloud.storage.bucket('albums');\n\n// From elsewhere\nvar photos = gcloud.storage.bucket({\n  keyFilename: '/path/to/keyfile.json',\n  name: 'bucket'\n});"}],"params":[{"name":"options","description":"- Configuration options.","types":["object"]},{"name":"options.bucketName","description":"- Name of the bucket.","types":["string"]},{"name":"options.keyFilename","description":"- Full path to the JSON key downloaded from the Google Developers Console. Alternatively, you may provide a <code>credentials</code> object.","types":["string="]},{"name":"options.credentials","description":"- Credentials object, used in place of a <code>keyFilename</code>. ","types":["object="]}],"exceptions":[{"type":"if","description":"a bucket name isn't provided. "}],"returns":[]},{"id":"delete","name":"delete","type":"instance","description":"<p>Delete the bucket.</p>","source":"/lib/storage/bucket.js#L91","resources":[],"examples":[{"code":"bucket.delete(function(err) {});"}],"params":[{"name":"callback","description":"- The callback function. ","types":["function="]}],"exceptions":[],"returns":[]},{"id":"file","name":"file","type":"instance","description":"<p>Create a File object. See <a data-custom-type=\"storage/file\">storage/file</a> to see how to handle the different use cases you may have.</p>","source":"/lib/storage/bucket.js#L106","resources":[],"examples":[{"code":"var file = bucket.file('my-existing-file.png');"}],"params":[{"name":"name","description":"- The name of the file in this bucket.","types":["string"]}],"exceptions":[],"returns":[]},{"id":"getFiles","name":"getFiles","type":"instance","description":"<p>Get File objects for the files currently in the bucket.</p>","source":"/lib/storage/bucket.js#L150","resources":[],"examples":[{"code":"bucket.getFiles(function(err, files, nextQuery) {\n  if (nextQuery) {\n    // nextQuery will be non-null if there are more results.\n    bucket.getFiles(nextQuery, function(err, files, nextQuery) {});\n  }\n\n  // The `metadata` property is populated for you with the metadata at the\n  // time of fetching.\n  files[0].metadata;\n\n  // However, in cases where you are concerned the metadata could have\n  // changed, use the `getMetadata` method.\n  files[0].getMetadata(function(err, metadata) {});\n});"},{"caption":"<p>Fetch using a query.</p>","code":"bucket.getFiles({\n  maxResults: 5\n}, function(err, files, nextQuery) {});"}],"params":[{"name":"query","description":"- Query object.","types":["object="]},{"name":"query.delimiter","description":"- Results will contain only objects whose names, aside from the prefix, do not contain delimiter. Objects whose names, aside from the prefix, contain delimiter will have their name truncated after the delimiter, returned in prefixes. Duplicate prefixes are omitted.","types":["string"]},{"name":"query.prefix","description":"- Filter results to objects whose names begin with this prefix.","types":["string"]},{"name":"query.maxResults","description":"- Maximum number of items plus prefixes to return.","types":["number"]},{"name":"query.pageToken","description":"- A previously-returned page token representing part of the larger set of results to view.","types":["string"]},{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]},{"id":"getMetadata","name":"getMetadata","type":"instance","description":"<p>Get the bucket&#39;s metadata.</p><p>To set metadata, see <a data-custom-type=\"storage/bucket\" data-method=\"setMetadata\">storage/bucket#setMetadata</a>.</p>","source":"/lib/storage/bucket.js#L184","resources":[],"examples":[{"code":"bucket.getMetadata(function(err, metadata) {});"}],"params":[{"name":"callback","description":"- The callback function. ","types":["function="]}],"exceptions":[],"returns":[]},{"id":"setMetadata","name":"setMetadata","type":"instance","description":"<p>Set the bucket&#39;s metadata.</p>","source":"/lib/storage/bucket.js#L211","resources":[],"examples":[{"code":"bucket.setMetadata({\n  contentType: 'application/x-font-ttf',\n  metadata: {\n    my: 'custom',\n    properties: 'go here'\n  }\n}, function(err, metadata) {});"}],"params":[{"name":"metadata","description":"- The metadata you wish to set.","types":["object"]},{"name":"callback","description":"- The callback function. ","types":["function="]}],"exceptions":[],"returns":[]},{"id":"upload","name":"upload","type":"instance","description":"<p>Upload a file to the bucket. This is a convenience method that wraps the functionality provided by a File object, <a data-custom-type=\"storage/file\">storage/file</a>.</p>","source":"/lib/storage/bucket.js#L274","resources":[],"examples":[{"caption":"<p>The easiest way to upload a file.</p>","code":"bucket.upload('/local/path/image.png', function(err, file) {\n  // Your bucket now contains:\n  // - \"image.png\" (with the contents of `/local/path/image.png')\n\n  // `file` is an instance of a File object that refers to your new file.\n});"},{"caption":"<p>It's not always that easy. You will likely want to specify the filename \nused when your new file lands in your bucket.</p>","code":"bucket.upload('/local/path/image.png', 'new-image.png', function(err, file) {\n  // Your bucket now contains:\n  // - \"new-image.png\" (with the contents of `/local/path/image.png')\n\n  // `file` is an instance of a File object that refers to your new file.\n});"},{"caption":"<p>You may also re-use a File object, <a data-custom-type=\"storage/file\">storage/file</a>, that references \nthe file you wish to create or overwrite.</p>","code":"var file = bucket.file('existing-file.png');\nbucket.upload('/local/path/image.png', file, function(err, newFile) {\n  // Your bucket now contains:\n  // - \"existing-file.png\" (with the contents of `/local/path/image.png')\n\n  // Note:\n  // The `newFile` parameter is equal to `file`.\n});"}],"params":[{"name":"localPath","description":"- The fully qualified path to the file you wish to upload to your bucket.","types":["string"]},{"name":"destination","description":"- The place to save your file. If given a string, the file will be uploaded to the bucket using the string as a filename. When given a File object, your local file will be uploaded to the File object's bucket and under the File object's name. Lastly, when this argument is omitted, the file is uploaded to your bucket using the name of the local file.","types":["string=","<a data-custom-type=\"storage\">storage</a>","file="]},{"name":"metadata","description":"- Metadata to set for your file.","types":["object="]},{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]}]}