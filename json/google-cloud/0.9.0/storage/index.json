{"id":"storage","type":"class","name":"Storage","description":null,"source":"/lib/storage/index.js#L105","parent":null,"children":["./json/v0.9.0/storage/bucketon","./json/v0.9.0/storage/fileon","./json/v0.9.0/storageon"],"methods":[{"id":"Storage","name":"Storage","type":"instance","description":"<p>To access your Cloud Storage buckets, you will use the <code>bucket</code> function returned from this <code>storage</code> object.</p><p>The example below will demonstrate the different usage patterns your app may need to connect to <code>gcloud</code> and access your bucket.</p>","source":"/lib/storage/index.js#L105","resources":[],"examples":[{"code":"var gcloud = require('gcloud');"},{"caption":"<p>From Google Compute Engine and Google App Engine.</p>","code":"// Access `storage` through the `gcloud` module directly.\nvar musicBucket = gcloud.storage.bucket('music');"},{"caption":"<p>Elsewhere.</p>","code":"// Provide configuration details up-front.\nvar myProject = gcloud({\n  keyFilename: '/path/to/keyfile.json',\n  projectId: 'my-project'\n});\n\nvar albums = myProject.storage.bucket('albums');\nvar photos = myProject.storage.bucket('photos');\n\n\n// Override default configuration details.\nvar storage = myProject.storage({\n  keyFilename: '/path/to/another/keyfile.json'\n});\nvar records = storage.bucket('records');"}],"params":[],"exceptions":[],"returns":[]},{"id":"bucket","name":"bucket","type":"instance","description":"<p>Get a reference to a Google Cloud Storage bucket.</p>","source":"/lib/storage/index.js#L143","resources":[],"examples":[{"code":"var gcloud = require('gcloud')({\n  keyFilename: '/path/to/keyfile.json'\n});\n\nvar albums = gcloud.storage.bucket('albums');\nvar photos = gcloud.storage.bucket('photos');"}],"params":[{"name":"options","description":"- Name of the bucket or configuration object.","types":["object","string"]},{"name":"options.name","description":"- The name of the existing bucket.","types":["string"]}],"exceptions":[],"returns":[]},{"id":"createBucket","name":"createBucket","type":"instance","description":"<p>Create a bucket.</p>","source":"/lib/storage/index.js#L177","resources":[],"examples":[{"code":"storage.createBucket('new-bucket', function(err, bucket) {\n  // `bucket` is a Bucket object.\n});\n\n// Specifying metadata.\nvar metadata = {\n  mainPageSuffix: '/unknown/',\n  maxAgeSeconds: 90\n};\nstorage.createBucket('new-bucket', metadata, function(err, bucket) {\n  // `bucket` is a Bucket object.\n});"}],"params":[{"name":"name","description":"- Name of the bucket to create.","types":["string"]},{"name":"metadata","description":"- Metadata to set for the bucket.","types":["object="]},{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[{"type":"Error","description":"If a name is not provided. "}],"returns":[]},{"id":"getBuckets","name":"getBuckets","type":"instance","description":"<p>Get Bucket objects for all of the buckets in your project.</p>","source":"/lib/storage/index.js#L233","resources":[],"examples":[{"code":"storage.getBuckets(function(err, buckets, nextQuery) {\n  if (nextQuery) {\n    // nextQuery will be non-null if there are more results.\n    storage.getBuckets(nextQuery, function(err, buckets, nextQuery) {});\n  }\n\n  // The `metadata` property is populated for you with the metadata at the\n  // time of fetching.\n  buckets[0].metadata;\n\n  // However, in cases where you are concerned the metadata could have\n  // changed, use the `getMetadata` method.\n  buckets[0].getMetadata(function(err, metadata) {});\n});"},{"caption":"<p>Fetch using a query.</p>","code":"storage.getBuckets({\n  maxResults: 5\n}, function(err, buckets, nextQuery) {});"}],"params":[{"name":"query","description":"- Query object.","types":["object="]},{"name":"query.maxResults","description":"- Maximum number of items plus prefixes to return.","types":["number"]},{"name":"query.pageToken","description":"- A previously-returned page token representing part of the larger set of results to view.","types":["string"]},{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]}]}