{"id":"pubsub/subscription","type":"class","name":"pubsub/subscription","description":null,"source":"/lib/pubsub/subscription.js#L113","parent":"pubsub","children":[],"methods":[{"id":"pubsub/subscription","name":"pubsub/subscription","type":"constructor","description":"<p>A Subscription object will give you access to your Google Cloud Pub/Sub subscription.</p><p>Subscriptions are sometimes retrieved when using various methods:</p><ul> <li><a data-custom-type=\"pubsub\" data-method=\"getSubscriptions\">pubsub#getSubscriptions</a></li> <li><a data-custom-type=\"pubsub/topic\" data-method=\"getSubscriptions\">pubsub/topic#getSubscriptions</a></li> <li><a data-custom-type=\"pubsub/topic\" data-method=\"subscribe\">pubsub/topic#subscribe</a></li> </ul> <p>Subscription objects may be created directly with:</p><ul> <li><a data-custom-type=\"pubsub/topic\" data-method=\"subscription\">pubsub/topic#subscription</a></li> </ul> <p>All Subscription objects are instances of an <a href=\"http://nodejs.org/api/events.html\">EventEmitter</a>. The subscription will pull for messages automatically as long as there is at least one listener assigned for the <code>message</code> event.</p>","source":"/lib/pubsub/subscription.js#L113","resources":[],"examples":[{"caption":"<p>From <a data-custom-type=\"pubsub\" data-method=\"getSubscriptions\">pubsub#getSubscriptions</a>:</p>","code":"pubsub.getSubscriptions(function(err, subscriptions) {\n  // `subscriptions` is an array of Subscription objects.\n});"},{"caption":"<p>From <a data-custom-type=\"pubsub/topic\" data-method=\"getSubscriptions\">pubsub/topic#getSubscriptions</a>:</p>","code":"var topic = pubsub.topic('my-existing-topic');\ntopic.getSubscriptions(function(err, subscriptions) {\n  // `subscriptions` is an array of Subscription objects.\n});"},{"caption":"<p>From <a data-custom-type=\"pubsub/topic\" data-method=\"subscribe\">pubsub/topic#subscribe</a>:</p>","code":"var topic = pubsub.topic('my-existing-topic');\ntopic.subscribe('new-subscription', function(err, subscription) {\n  // `subscription` is a Subscription object.\n});"},{"caption":"<p>From <a data-custom-type=\"pubsub/topic\" data-method=\"subscription\">pubsub/topic#subscription</a>:</p>","code":"var topic = pubsub.topic('my-existing-topic');\nvar subscription = topic.subscription('my-existing-subscription');\n// `subscription` is a Subscription object."},{"caption":"<p>Once you have obtained a subscription object, you may begin to register listeners. This will automatically trigger pulling for messages.</p>","code":"// Register an error handler.\nsubscription.on('error', function(err) {});\n\n// Register a listener for `message` events.\nfunction onMessage(message) {\n  // Called every time a message is received.\n  // message.id = ID of the message.\n  // message.data = Contents of the message.\n}\nsubscription.on('message', onMessage);\n\n// Remove the listener from receiving `message` events.\nsubscription.removeListener('message', onMessage);"}],"params":[],"exceptions":[],"returns":[]},{"id":"ack","name":"ack","type":"instance","description":"<p>Acknowledge to the backend that the message was retrieved. You must provide either a single ID, or an array of IDs.</p>","source":"/lib/pubsub/subscription.js#L243","resources":[],"examples":[{"code":"subscription.ack('ePHEESyhuE8e...', function(err) {});"}],"params":[{"name":"ids","description":"- An ID or array of message IDs.","types":["string","string[]"]},{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[{"type":"Error","description":"If at least one id is not provided. "}],"returns":[]},{"id":"delete","name":"delete","type":"instance","description":"<p>Delete the subscription. Pull requests from the current subscription will be errored once unsubscription is complete.</p>","source":"/lib/pubsub/subscription.js#L265","resources":[],"examples":[{"code":"subscription.delete(function(err) {});"}],"params":[{"name":"callback","description":"- The callback function. ","types":["function="]}],"exceptions":[],"returns":[]},{"id":"pull","name":"pull","type":"instance","description":"<p>Pull messages from the subscribed topic. If messages were found, your callback is executed with the message object.</p><p>Note that messages are pulled automatically once you register your first event listener to the subscription, thus the call to <code>pull</code> is handled for you. If you don&#39;t want to start pulling, simply don&#39;t register a <code>subscription.on(&#39;message&#39;, function() {})</code> event handler.</p>","source":"/lib/pubsub/subscription.js#L300","resources":[],"examples":[{"code":"subscription.pull(function(err, message) {\n  // message.id = ID used to acknowledge its receival.\n  // message.data = Contents of the message.\n});"}],"params":[{"name":"options","description":"- Configuration object.","types":["object="]},{"name":"options.returnImmediately","description":"- If set, the system will respond immediately. Otherwise, wait until new messages are available. Returns if timeout is reached.","types":["boolean="]},{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]}]}