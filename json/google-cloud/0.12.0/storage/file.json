{"id":"storage/file","type":"class","name":"File","description":null,"source":"/lib/storage/file.js","parent":"storage","children":[],"methods":[{"id":"File","name":"File","type":"instance","description":"<p>A File object is created from your Bucket object using <a data-custom-type=\"storage/bucket\" data-method=\"file\">storage/bucket#file</a>.</p>","source":"/lib/storage/file.js","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"acl","name":"acl","type":"instance","description":"<p>Google Cloud Storage uses access control lists (ACLs) to manage object and bucket access. ACLs are the mechanism you use to share objects with other users and allow other users to access your buckets and objects.</p><p>An ACL consists of one or more entries, where each entry grants permissions to a scope. Permissions define the actions that can be performed against an object or bucket (for example, <code>READ</code> or <code>WRITE</code>); the scope defines who the permission applies to (for example, a specific user or group of users).</p><p>For more detailed information, see <a href=\"http://goo.gl/6qBBPO\">About Access Control Lists</a>.</p><p>The <code>acl</code> object on a File instance provides methods to get you a list of the ACLs defined on your bucket, as well as set, update, and delete them.</p>","source":"/lib/storage/file.js","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"copy","name":"copy","type":"instance","description":"<p>Copy this file to another file. By default, this will copy the file to the same bucket, but you can choose to copy it to another Bucket by providing either a Bucket or File object.</p>","source":"/lib/storage/file.js","resources":[],"examples":[{"caption":"<p>You can pass in a variety of types for the destination. \nFor all of the below examples, assume we are working with the following \nBucket and File objects.</p>","code":"var bucket = storage.bucket('my-bucket');\nvar file = bucket.file('my-image.png');"},{"caption":"<p>If you pass in a string for the destination, the file is copied to its \ncurrent bucket, under the new name provided.</p>","code":"file.copy('my-image-copy.png', function(err, copiedFile) {\n  // `my-bucket` now contains:\n  // - \"my-image.png\"\n  // - \"my-image-copy.png\"\n\n  // `copiedFile` is an instance of a File object that refers to your new\n  // file.\n});"},{"caption":"<p>If you pass in a Bucket object, the file will be copied to that bucket \nusing the same name.</p>","code":"var anotherBucket = storage.bucket('another-bucket');\nfile.copy(anotherBucket, function(err, copiedFile) {\n  // `my-bucket` still contains:\n  // - \"my-image.png\"\n  //\n  // `another-bucket` now contains:\n  // - \"my-image.png\"\n\n  // `copiedFile` is an instance of a File object that refers to your new\n  // file.\n});"},{"caption":"<p>If you pass in a File object, you have complete control over the new \nbucket and filename.</p>","code":"var anotherFile = anotherBucket.file('my-awesome-image.png');\nfile.copy(anotherFile, function(err, copiedFile) {\n  // `my-bucket` still contains:\n  // - \"my-image.png\"\n  //\n  // `another-bucket` now contains:\n  // - \"my-awesome-image.png\"\n\n  // Note:\n  // The `copiedFile` parameter is equal to `anotherFile`.\n});"}],"params":[{"name":"destination","description":"- Destination file.","types":["string","<a data-custom-type=\"storage\">storage</a>","bucket","<a data-custom-type=\"storage\">storage</a>","file"]},{"name":"callback","description":"- The callback function. ","types":["function="]}],"exceptions":[{"type":"Error","description":"If the destination file is not provided. "}],"returns":[]},{"id":"createReadStream","name":"createReadStream","type":"instance","description":"<p>Create a readable stream to read the contents of the remote file. It can be piped to a writable stream or listened to for &#39;data&#39; events to read a file&#39;s contents.</p><p>In the unlikely event there is a mismatch between what you downloaded and the version in your Bucket, your error handler will receive an error with code &quot;CONTENT_DOWNLOAD_MISMATCH&quot;. If you receive this error, the best recourse is to try downloading the file again.</p>","source":"/lib/storage/file.js","resources":[],"examples":[{"caption":"<p><h4>Downloading a File</h4> \nThe example below demonstrates how we can reference a remote file, then \npipe its contents to a local file. This is effectively creating a local \nbackup of your remote data.</p>","code":"var fs = require('fs');\nvar image = myBucket.file('image.png');\n\nimage.createReadStream()\n  .pipe(fs.createWriteStream('/Users/stephen/Photos/image.png'))\n  .on('error', function(err) {});"},{"caption":"<p>To limit the downloaded data to only a byte range, pass an options object.</p>","code":"var logFile = myBucket.file('access_log');\nlogFile.createReadStream({\n    start: 10000,\n    end: 20000\n  })\n  .pipe(fs.createWriteStream('/Users/stephen/logfile.txt'))\n  .on('error', function(err) {});"}],"params":[{"name":"options","description":"- Configuration object.","types":["object="]},{"name":"options.validation","description":"- Possible values: <code>\"md5\"</code>, <code>\"crc32c\"</code>, or <code>false</code>. By default, data integrity is validated with an MD5 checksum for maximum reliability, falling back to CRC32c when an MD5 hash wasn't returned from the API. CRC32c will provide better performance with less reliability. You may also choose to skip validation completely, however this is **not recommended**.","types":["string","boolean"]},{"name":"options.start","description":"- A byte offset to begin the file's download from. NOTE: Byte ranges are inclusive; that is, <code>options.start = 0</code> and <code>options.end = 999</code> represent the first 1000 bytes in a file or object. NOTE: when specifying a byte range, data integrity is not available.","types":["number"]},{"name":"options.end","description":"- A byte offset to stop reading the file at. NOTE: Byte ranges are inclusive; that is, <code>options.start = 0</code> and <code>options.end = 999</code> represent the first 1000 bytes in a file or object. NOTE: when specifying a byte range, data integrity is not available. ","types":["number"]}],"exceptions":[],"returns":[]},{"id":"createWriteStream","name":"createWriteStream","type":"instance","description":"<p>Create a writable stream to overwrite the contents of the file in your bucket.</p><p>A File object can also be used to create files for the first time.</p>","source":"/lib/storage/file.js#L460","resources":[],"examples":[{"caption":"<p><h4>Uploading a File</h4> \nNow, consider a case where we want to upload a file to your bucket. You \nhave the option of using <a data-custom-type=\"storage/bucket\" data-method=\"upload\">storage/bucket#upload</a>, but that is just \na convenience method which will do the following.</p>","code":"var fs = require('fs');\nvar image = myBucket.file('image.png');\n\nfs.createReadStream('/Users/stephen/Photos/birthday-at-the-zoo/panda.jpg')\n  .pipe(image.createWriteStream())\n  .on('error', function(err) {});"},{"caption":"<p><h4>Uploading a File with Metadata</h4> \nOne last case you may run into is when you want to upload a file to your \nbucket and set its metadata at the same time. Like above, you can use \n<a data-custom-type=\"storage/bucket\" data-method=\"upload\">storage/bucket#upload</a> to do this, which is just a wrapper around \nthe following.</p>","code":"var fs = require('fs');\nvar image = myBucket.file('image.png');\n\nfs.createReadStream('/Users/stephen/Photos/birthday-at-the-zoo/panda.jpg')\n  .pipe(image.createWriteStream({\n    metadata: contentType: 'image/jpeg'\n  }))\n  .on('error', function(err) {});"}],"params":[{"name":"options","description":"- Configuration object.","types":["object="]},{"name":"options.metadata","description":"- Set the metadata for this file.","types":["object="]},{"name":"options.resumable","description":"- Force a resumable upload. NOTE: When working with streams, the file format and size is unknown until it's completely consumed. Because of this, it's best for you to be explicit for what makes sense given your input. Read more about resumable uploads [here](http://goo.gl/1JWqCF).","types":["boolean="]},{"name":"options.validation","description":"- Possible values: <code>\"md5\"</code>, <code>\"crc32c\"</code>, or <code>false</code>. By default, data integrity is validated with an MD5 checksum for maximum reliability. CRC32c will provide better performance with less reliability. You may also choose to skip validation completely, however this is **not recommended**. ","types":["string","boolean"]}],"exceptions":[],"returns":[]},{"id":"delete","name":"delete","type":"instance","description":"<p>Delete the file.</p>","source":"/lib/storage/file.js#L601","resources":[],"examples":[{"code":"file.delete(function(err) {});"}],"params":[{"name":"callback","description":"- The callback function. ","types":["function="]}],"exceptions":[],"returns":[]},{"id":"getMetadata","name":"getMetadata","type":"instance","description":"<p>Get the file&#39;s metadata.</p>","source":"/lib/storage/file.js#L621","resources":[],"examples":[{"code":"file.getMetadata(function(err, metadata) {});"}],"params":[{"name":"callback","description":"- The callback function. ","types":["function="]}],"exceptions":[],"returns":[]},{"id":"getSignedUrl","name":"getSignedUrl","type":"instance","description":"<p>Get a signed URL to allow limited time access to the file.</p><p><em><a href=\"http://goo.gl/LcqhjU\">Reference</a>.</em></p>","source":"/lib/storage/file.js#L659","resources":[],"examples":[{"code":"file.getSignedUrl({\n  action: 'read',\n  expires: Math.round(Date.now() / 1000) + (60 * 60 * 24 * 14) // 2 weeks.\n}, function(err, url) {});"}],"params":[{"name":"options","description":"- Configuration object.","types":["object"]},{"name":"options.action","description":"- \"read\", \"write\", or \"delete\"","types":["string"]},{"name":"options.contentMd5","description":"- The MD5 digest value in base64. If you provide this, the client must provide this HTTP header with this same value in its request.","types":["string="]},{"name":"options.contentType","description":"- If you provide this value, the client must provide this HTTP header set to the same value.","types":["string="]},{"name":"options.expires","description":"- Timestamp (seconds since epoch) when this link will expire.","types":["number"]},{"name":"options.extensionHeaders","description":"- If these headers are used, the server will check to make sure that the client provides matching values. ","types":["string="]}],"exceptions":[{"type":"Error","description":"if an expiration timestamp from the past is given. "}],"returns":[]},{"id":"setMetadata","name":"setMetadata","type":"instance","description":"<p>Set the file&#39;s metadata.</p>","source":"/lib/storage/file.js","resources":[],"examples":[{"code":"file.setMetadata({\n  contentType: 'application/x-font-ttf',\n  metadata: {\n    my: 'custom',\n    properties: 'go here'\n  }\n}, function(err, metadata) {});"}],"params":[{"name":"metadata","description":"- The metadata you wish to set.","types":["object"]},{"name":"callback","description":"- The callback function. ","types":["function="]}],"exceptions":[],"returns":[]},{"id":"acl.Acl","name":"acl.Acl","type":"instance","description":"<p>Google Cloud Storage uses access control lists (ACLs) to manage object and bucket access. ACLs are the mechanism you use to share objects with other users and allow other users to access your buckets and objects.</p><p>An ACL consists of one or more entries, where each entry grants permissions to a scope. Permissions define the actions that can be performed against an object or bucket (for example, <code>READ</code> or <code>WRITE</code>); the scope defines who the permission applies to (for example, a specific user or group of users).</p><p>Where a <code>scope</code> value is accepted, we follow the format the Cloud Storage API expects.</p><p>Refer to <a href=\"https://cloud.google.com/storage/docs/json_api/v1/defaultObjectAccessControls\">https://cloud.google.com/storage/docs/json_api/v1/defaultObjectAccessControls</a> for the most up-to-date values.</p><ul> <li><code>user-userId</code></li> <li><code>user-email</code></li> <li><code>group-groupId</code></li> <li><code>group-email</code></li> <li><code>domain-domain</code></li> <li><code>project-team-projectId</code></li> <li><code>allUsers</code></li> <li><code>allAuthenticatedUsers</code></li> </ul> <p>Examples:</p><ul> <li>The user &quot;liz@example.com&quot; would be <code>user-liz@example.com</code>.</li> <li>The group &quot;example@googlegroups.com&quot; would be <code>group-example@googlegroups.com</code>.</li> <li>To refer to all members of the Google Apps for Business domain &quot;example.com&quot;, the entity would be <code>domain-example.com</code>.</li> </ul> <p>For more detailed information, see <a href=\"http://goo.gl/6qBBPO\">About Access Control Lists</a>.</p>","source":"gcloud-node/lib/storage/acl.js","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"acl.add ","name":"acl.add ","type":"instance","description":"<p>Add access controls on a <a data-custom-type=\"storage/bucket\">storage/bucket</a> or <a data-custom-type=\"storage/file\">storage/file</a>.</p>","source":"gcloud-node/lib/storage/acl.js","resources":[],"examples":[{"code":"myBucket.acl.add({\n  scope: 'user-useremail@example.com',\n  role: storage.acl.OWNER_ROLE\n}, function(err, aclObject) {});"},{"caption":"<p>For file ACL operations, you can also specify a <code>generation</code> property.</p>","code":"myFile.acl.add({\n  scope: 'user-useremail@example.com',\n  role: storage.acl.OWNER_ROLE,\n  generation: 1\n}, function(err, aclObject) {});"}],"params":[{"name":"options","description":"- Configuration object.","types":["object"]},{"name":"options.scope","description":"- Whose permissions will be added.","types":["string"]},{"name":"options.role","description":"- Permissions allowed for the defined scope. See <a data-custom-type=\"storage\" data-method=\"acl\">storage#acl</a>.","types":["string"]},{"name":"options.generation","description":"- **File Objects Only** Select a specific revision of this file (as opposed to the latest version, the default).","types":["int="]},{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]},{"id":"acl.delete ","name":"acl.delete ","type":"instance","description":"<p>Delete access controls on a <a data-custom-type=\"storage/bucket\">storage/bucket</a> or <a data-custom-type=\"storage/file\">storage/file</a>.</p>","source":"gcloud-node/lib/storage/acl.js","resources":[],"examples":[{"code":"myBucket.acl.delete({\n  scope: 'user-useremail@example.com'\n}, function(err) {});"},{"caption":"<p>For file ACL operations, you can also specify a <code>generation</code> property.</p>","code":"myFile.acl.delete({\n  scope: 'user-useremail@example.com',\n  generation: 1\n}, function(err) {});"}],"params":[{"name":"options","description":"- Configuration object.","types":["object="]},{"name":"options.scope","description":"- Whose permissions will be revoked.","types":["string"]},{"name":"options.generation","description":"- **File Objects Only** Select a specific revision of this file (as opposed to the latest version, the default).","types":["int="]},{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]},{"id":"acl.get ","name":"acl.get ","type":"instance","description":"<p>Get access controls on a <a data-custom-type=\"storage/bucket\">storage/bucket</a> or <a data-custom-type=\"storage/file\">storage/file</a>. If a scope is omitted, you will receive an array of all applicable access controls.</p>","source":"gcloud-node/lib/storage/acl.js","resources":[],"examples":[{"code":"myBucket.acl.get({\n  scope: 'user-useremail@example.com'\n}, function(err, aclObject) {});"},{"caption":"<p>Get all access controls.</p>","code":"myBucket.acl.get(function(err, aclObjects) {\n  // aclObjects = [\n  //   {\n  //     scope: 'user-useremail@example.com',\n  //     role: 'owner'\n  //   }\n  // ]\n});"},{"caption":"<p>For file ACL operations, you can also specify a <code>generation</code> property.</p>","code":"myFile.acl.get({\n  scope: 'user-useremail@example.com',\n  generation: 1\n} function(err, aclObject) {});"}],"params":[{"name":"options","description":"- Configuration object. If you want to receive a list of all access controls, pass the callback function as the only argument.","types":["object","function"]},{"name":"options.scope","description":"- Whose permissions will be fetched.","types":["string="]},{"name":"options.generation","description":"- **File Objects Only** Select a specific revision of this file (as opposed to the latest version, the default). ","types":["int="]}],"exceptions":[],"returns":[]}]}