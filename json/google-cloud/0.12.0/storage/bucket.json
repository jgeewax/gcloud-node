{"id":"storage/bucket","type":"class","name":"Bucket","description":null,"source":"/lib/storage/bucket.js","parent":"storage","children":[],"methods":[{"id":"Bucket","name":"Bucket","type":"instance","description":"<p>Create a Bucket object to interact with a Google Cloud Storage bucket.</p>","source":"/lib/storage/bucket.js","resources":[],"examples":[{"code":"var gcloud = require('gcloud');\n\n// From Google Compute Engine\nvar albums = gcloud.storage.bucket('albums');\n\n// From elsewhere\nvar photos = gcloud.storage.bucket({\n  keyFilename: '/path/to/keyfile.json',\n  name: 'bucket'\n});"}],"params":[{"name":"options","description":"- Configuration options.","types":["object"]},{"name":"options.bucketName","description":"- Name of the bucket.","types":["string"]},{"name":"options.keyFilename","description":"- Full path to the JSON key downloaded from the Google Developers Console. Alternatively, you may provide a <code>credentials</code> object.","types":["string="]},{"name":"options.credentials","description":"- Credentials object, used in place of a <code>keyFilename</code>. ","types":["object="]}],"exceptions":[{"type":"if","description":"a bucket name isn't provided. "}],"returns":[]},{"id":"acl","name":"acl","type":"instance","description":"<p>Google Cloud Storage uses access control lists (ACLs) to manage object and bucket access. ACLs are the mechanism you use to share objects with other users and allow other users to access your buckets and objects.</p><p>An ACL consists of one or more entries, where each entry grants permissions to a scope. Permissions define the actions that can be performed against an object or bucket (for example, <code>READ</code> or <code>WRITE</code>); the scope defines who the permission applies to (for example, a specific user or group of users).</p><p>For more detailed information, see <a href=\"http://goo.gl/6qBBPO\">About Access Control Lists</a>.</p><p>The <code>acl</code> object on a Bucket instance provides methods to get you a list of the ACLs defined on your bucket, as well as set, update, and delete them.</p><p>Buckets also have <a href=\"https://cloud.google.com/storage/docs/accesscontrol#default\">default ACLs</a> for all created files. Default ACLs specify permissions that all new objects added to the bucket will inherit by default. You can add, delete, get, and update scopes and permissions for these as well with <a data-custom-type=\"storage/bucket\" data-method=\"acl.default\">storage/bucket#acl.default</a>.</p>","source":"/lib/storage/bucket.js#L123","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"acl.default","name":"acl.default","type":"instance","description":"<p>Google Cloud Storage Buckets have <a href=\"http://goo.gl/YpGdyv\">default ACLs</a> for all created files. You can add, delete, get, and update scopes and permissions for these as well. The method signatures and examples are all the same, after only prefixing the method call with <code>default</code>.</p>","source":"/lib/storage/bucket.js#L149","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"acl.default.add","name":"acl.default.add","type":"instance","description":"<p>Maps to <a data-custom-type=\"storage/bucket\" data-method=\"acl.add\">storage/bucket#acl.add</a>.</p>","source":"/lib/storage/bucket.js#L155","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"acl.default.delete","name":"acl.default.delete","type":"instance","description":"<p>Maps to <a data-custom-type=\"storage/bucket\" data-method=\"acl.delete\">storage/bucket#acl.delete</a>.</p>","source":"/lib/storage/bucket.js#L161","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"acl.default.get","name":"acl.default.get","type":"instance","description":"<p>Maps to <a data-custom-type=\"storage/bucket\" data-method=\"acl.get\">storage/bucket#acl.get</a>.</p>","source":"/lib/storage/bucket.js#L167","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"acl.default.update","name":"acl.default.update","type":"instance","description":"<p>Maps to <a data-custom-type=\"storage/bucket\" data-method=\"acl.update\">storage/bucket#acl.update</a>.</p>","source":"/lib/storage/bucket.js","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"delete","name":"delete","type":"instance","description":"<p>Delete the bucket.</p>","source":"/lib/storage/bucket.js#L185","resources":[],"examples":[{"code":"bucket.delete(function(err) {});"}],"params":[{"name":"callback","description":"- The callback function. ","types":["function="]}],"exceptions":[],"returns":[]},{"id":"file","name":"file","type":"instance","description":"<p>Create a File object. See <a data-custom-type=\"storage/file\">storage/file</a> to see how to handle the different use cases you may have.</p>","source":"/lib/storage/bucket.js#L200","resources":[],"examples":[{"code":"var file = bucket.file('my-existing-file.png');"}],"params":[{"name":"name","description":"- The name of the file in this bucket.","types":["string"]}],"exceptions":[],"returns":[]},{"id":"getFiles","name":"getFiles","type":"instance","description":"<p>Get File objects for the files currently in the bucket.</p>","source":"/lib/storage/bucket.js#L244","resources":[],"examples":[{"code":"bucket.getFiles(function(err, files, nextQuery) {\n  if (nextQuery) {\n    // nextQuery will be non-null if there are more results.\n    bucket.getFiles(nextQuery, function(err, files, nextQuery) {});\n  }\n\n  // The `metadata` property is populated for you with the metadata at the\n  // time of fetching.\n  files[0].metadata;\n\n  // However, in cases where you are concerned the metadata could have\n  // changed, use the `getMetadata` method.\n  files[0].getMetadata(function(err, metadata) {});\n});"},{"caption":"<p>Fetch using a query.</p>","code":"bucket.getFiles({\n  maxResults: 5\n}, function(err, files, nextQuery) {});"}],"params":[{"name":"query","description":"- Query object.","types":["object="]},{"name":"query.delimiter","description":"- Results will contain only objects whose names, aside from the prefix, do not contain delimiter. Objects whose names, aside from the prefix, contain delimiter will have their name truncated after the delimiter, returned in prefixes. Duplicate prefixes are omitted.","types":["string"]},{"name":"query.prefix","description":"- Filter results to objects whose names begin with this prefix.","types":["string"]},{"name":"query.maxResults","description":"- Maximum number of items plus prefixes to return.","types":["number"]},{"name":"query.pageToken","description":"- A previously-returned page token representing part of the larger set of results to view.","types":["string"]},{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]},{"id":"getMetadata","name":"getMetadata","type":"instance","description":"<p>Get the bucket&#39;s metadata.</p><p>To set metadata, see <a data-custom-type=\"storage/bucket\" data-method=\"setMetadata\">storage/bucket#setMetadata</a>.</p>","source":"/lib/storage/bucket.js#L278","resources":[],"examples":[{"code":"bucket.getMetadata(function(err, metadata) {});"}],"params":[{"name":"callback","description":"- The callback function. ","types":["function="]}],"exceptions":[],"returns":[]},{"id":"setMetadata","name":"setMetadata","type":"instance","description":"<p>Set the bucket&#39;s metadata.</p>","source":"/lib/storage/bucket.js#L305","resources":[],"examples":[{"code":"bucket.setMetadata({\n  contentType: 'application/x-font-ttf',\n  metadata: {\n    my: 'custom',\n    properties: 'go here'\n  }\n}, function(err, metadata) {});"}],"params":[{"name":"metadata","description":"- The metadata you wish to set.","types":["object"]},{"name":"callback","description":"- The callback function. ","types":["function="]}],"exceptions":[],"returns":[]},{"id":"upload","name":"upload","type":"instance","description":"<p>Upload a file to the bucket. This is a convenience method that wraps the functionality provided by a File object, <a data-custom-type=\"storage/file\">storage/file</a>.</p>","source":"/lib/storage/bucket.js#L395","resources":[],"examples":[{"caption":"<p>The easiest way to upload a file.</p>","code":"bucket.upload('/local/path/image.png', function(err, file) {\n  // Your bucket now contains:\n  // - \"image.png\" (with the contents of `/local/path/image.png')\n\n  // `file` is an instance of a File object that refers to your new file.\n});"},{"caption":"<p>It's not always that easy. You will likely want to specify the filename \nused when your new file lands in your bucket. \nYou may also want to set metadata or customize other options.</p>","code":"var options = {\n  destination: 'new-image.png',\n  resumable: true,\n  validation: 'crc32c',\n  metadata: {\n    event: 'Fall trip to the zoo'\n  }\n};\n\nbucket.upload('/local/path/image.png', options, function(err, file) {\n  // Your bucket now contains:\n  // - \"new-image.png\" (with the contents of `/local/path/image.png')\n\n  // `file` is an instance of a File object that refers to your new file.\n});"},{"caption":"<p>You may also re-use a File object, <a data-custom-type=\"storage/file\">storage/file</a>, that references \nthe file you wish to create or overwrite.</p>","code":"var options = {\n  destination: bucket.file('existing-file.png'),\n  resumable: false\n};\n\nbucket.upload('/local/path/image.png', options, function(err, newFile) {\n  // Your bucket now contains:\n  // - \"existing-file.png\" (with the contents of `/local/path/image.png')\n\n  // Note:\n  // The `newFile` parameter is equal to `file`.\n});"}],"params":[{"name":"localPath","description":"- The fully qualified path to the file you wish to upload to your bucket.","types":["string"]},{"name":"options","description":"- Configuration options.","types":["object="]},{"name":"options.destination","description":"- The place to save your file. If given a string, the file will be uploaded to the bucket using the string as a filename. When given a File object, your local file will be uploaded to the File object's bucket and under the File object's name. Lastly, when this argument is omitted, the file is uploaded to your bucket using the name of the local file.","types":["string","<a data-custom-type=\"storage\">storage</a>","file"]},{"name":"options.metadata","description":"- Metadata to set for your file.","types":["object="]},{"name":"options.resumable","description":"- Force a resumable upload. (default: true for files larger than 5MB). Read more about resumable uploads [here](http://goo.gl/1JWqCF). NOTE: This behavior is only possible with this method, and not <a data-custom-type=\"storage/file\" data-method=\"createWriteStream\">storage/file#createWriteStream</a>. When working with streams, the file format and size is unknown until it's completely consumed. Because of this, it's best for you to be explicit for what makes sense given your input.","types":["boolean="]},{"name":"callback","description":"- The callback function.","types":["function"]},{"name":"options.validation","description":"- Possible values: <code>\"md5\"</code>, <code>\"crc32c\"</code>, or <code>false</code>. By default, data integrity is validated with an MD5 checksum for maximum reliability. CRC32c will provide better performance with less reliability. You may also choose to skip validation completely, however this is **not recommended**. ","types":["string","boolean"]}],"exceptions":[],"returns":[]},{"id":"acl.Acl","name":"acl.Acl","type":"instance","description":"<p>Google Cloud Storage uses access control lists (ACLs) to manage object and bucket access. ACLs are the mechanism you use to share objects with other users and allow other users to access your buckets and objects.</p><p>An ACL consists of one or more entries, where each entry grants permissions to a scope. Permissions define the actions that can be performed against an object or bucket (for example, <code>READ</code> or <code>WRITE</code>); the scope defines who the permission applies to (for example, a specific user or group of users).</p><p>Where a <code>scope</code> value is accepted, we follow the format the Cloud Storage API expects.</p><p>Refer to <a href=\"https://cloud.google.com/storage/docs/json_api/v1/defaultObjectAccessControls\">https://cloud.google.com/storage/docs/json_api/v1/defaultObjectAccessControls</a> for the most up-to-date values.</p><ul> <li><code>user-userId</code></li> <li><code>user-email</code></li> <li><code>group-groupId</code></li> <li><code>group-email</code></li> <li><code>domain-domain</code></li> <li><code>project-team-projectId</code></li> <li><code>allUsers</code></li> <li><code>allAuthenticatedUsers</code></li> </ul> <p>Examples:</p><ul> <li>The user &quot;liz@example.com&quot; would be <code>user-liz@example.com</code>.</li> <li>The group &quot;example@googlegroups.com&quot; would be <code>group-example@googlegroups.com</code>.</li> <li>To refer to all members of the Google Apps for Business domain &quot;example.com&quot;, the entity would be <code>domain-example.com</code>.</li> </ul> <p>For more detailed information, see <a href=\"http://goo.gl/6qBBPO\">About Access Control Lists</a>.</p>","source":"gcloud-node/lib/storage/acl.js","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"acl.add ","name":"acl.add ","type":"instance","description":"<p>Add access controls on a <a data-custom-type=\"storage/bucket\">storage/bucket</a> or <a data-custom-type=\"storage/file\">storage/file</a>.</p>","source":"gcloud-node/lib/storage/acl.js","resources":[],"examples":[{"code":"myBucket.acl.add({\n  scope: 'user-useremail@example.com',\n  role: storage.acl.OWNER_ROLE\n}, function(err, aclObject) {});"},{"caption":"<p>For file ACL operations, you can also specify a <code>generation</code> property.</p>","code":"myFile.acl.add({\n  scope: 'user-useremail@example.com',\n  role: storage.acl.OWNER_ROLE,\n  generation: 1\n}, function(err, aclObject) {});"}],"params":[{"name":"options","description":"- Configuration object.","types":["object"]},{"name":"options.scope","description":"- Whose permissions will be added.","types":["string"]},{"name":"options.role","description":"- Permissions allowed for the defined scope. See <a data-custom-type=\"storage\" data-method=\"acl\">storage#acl</a>.","types":["string"]},{"name":"options.generation","description":"- **File Objects Only** Select a specific revision of this file (as opposed to the latest version, the default).","types":["int="]},{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]},{"id":"acl.delete ","name":"acl.delete ","type":"instance","description":"<p>Delete access controls on a <a data-custom-type=\"storage/bucket\">storage/bucket</a> or <a data-custom-type=\"storage/file\">storage/file</a>.</p>","source":"gcloud-node/lib/storage/acl.js","resources":[],"examples":[{"code":"myBucket.acl.delete({\n  scope: 'user-useremail@example.com'\n}, function(err) {});"},{"caption":"<p>For file ACL operations, you can also specify a <code>generation</code> property.</p>","code":"myFile.acl.delete({\n  scope: 'user-useremail@example.com',\n  generation: 1\n}, function(err) {});"}],"params":[{"name":"options","description":"- Configuration object.","types":["object="]},{"name":"options.scope","description":"- Whose permissions will be revoked.","types":["string"]},{"name":"options.generation","description":"- **File Objects Only** Select a specific revision of this file (as opposed to the latest version, the default).","types":["int="]},{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]},{"id":"acl.get ","name":"acl.get ","type":"instance","description":"<p>Get access controls on a <a data-custom-type=\"storage/bucket\">storage/bucket</a> or <a data-custom-type=\"storage/file\">storage/file</a>. If a scope is omitted, you will receive an array of all applicable access controls.</p>","source":"gcloud-node/lib/storage/acl.js","resources":[],"examples":[{"code":"myBucket.acl.get({\n  scope: 'user-useremail@example.com'\n}, function(err, aclObject) {});"},{"caption":"<p>Get all access controls.</p>","code":"myBucket.acl.get(function(err, aclObjects) {\n  // aclObjects = [\n  //   {\n  //     scope: 'user-useremail@example.com',\n  //     role: 'owner'\n  //   }\n  // ]\n});"},{"caption":"<p>For file ACL operations, you can also specify a <code>generation</code> property.</p>","code":"myFile.acl.get({\n  scope: 'user-useremail@example.com',\n  generation: 1\n} function(err, aclObject) {});"}],"params":[{"name":"options","description":"- Configuration object. If you want to receive a list of all access controls, pass the callback function as the only argument.","types":["object","function"]},{"name":"options.scope","description":"- Whose permissions will be fetched.","types":["string="]},{"name":"options.generation","description":"- **File Objects Only** Select a specific revision of this file (as opposed to the latest version, the default). ","types":["int="]}],"exceptions":[],"returns":[]}]}