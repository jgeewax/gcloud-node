{"id":"datastore/dataset","type":"class","name":"Dataset","description":null,"source":"/lib/datastore/dataset.js#L100","parent":"datastore","children":[],"methods":[{"id":"Dataset","name":"Dataset","type":"constructor","description":"<p>Interact with a dataset from the <a href=\"https://developers.google.com/datastore/\">Google Cloud Datastore</a>.</p>","source":"/lib/datastore/dataset.js#L100","resources":[],"examples":[{"code":"var dataset = datastore.dataset({\n  projectId: 'my-project',\n  keyFilename: '/path/to/keyfile.json'\n});"},{"caption":"<p>Connect to your local Datastore server.</p>","code":"var dataset = datastore.dataset({\n  projectId: 'my-project',\n  apiEndpoint: 'http://localhost:8080'\n});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.projectId","description":"<ul> <li>Dataset ID. This is your project ID from the Google Developers Console.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"options.keyFilename","description":"<ul> <li>Full path to the JSON key downloaded from the Google Developers Console. Alternatively, you may provide a  <code>credentials</code> object.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"options.credentials","description":"<ul> <li>Credentials object, used in place of a <code>keyFilename</code>.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.apiEndpoint","description":"<ul> <li>Override the default API endpoint used to reach Datastore. This is useful for connecting to your local Datastore  server (usually &quot;<a href=\"http://localhost:8080\">http://localhost:8080</a>&quot;).</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"options.namespace","description":"<ul> <li>Namespace to isolate transactions to.</li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"key","name":"key","type":"instance","description":"<p>$/, &#39;&#39;);</p><p> this.namespace = options.namespace;  this.projectId = options.projectId; }</p><p>nodeutil.inherits(Dataset, DatastoreRequest);</p><p>/** Helper to create a Key object, scoped to the dataset&#39;s namespace by default.</p><p>You may also specify a configuration object to define a namespace and path.</p>","source":"/lib/datastore/dataset.js#L159","resources":[],"examples":[{"code":"var key;\n\n// Create an incomplete key from the dataset namespace, kind='Company'\nkey = dataset.key('Company');\n\n// A complete key from the dataset namespace, kind='Company', id=123\nkey = dataset.key(['Company', 123]);\n\n// A complete key from the dataset namespace, kind='Company', name='Google'\n// Note: `id` is used for numeric identifiers and `name` is used otherwise\nkey = dataset.key(['Company', 'Google']);\n\n// A complete key from a provided namespace and path.\nkey = dataset.key({\n  namespace: 'My-NS',\n  path: ['Company', 123]\n});"}],"params":[{"name":"options","description":"<ul> <li>Key path. To specify or override a namespace, you must use an object here to explicitly state it.</li> </ul> ","types":[],"optional":true,"nullable":false},{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.path","description":"<ul> <li>Key path.</li> </ul> ","types":[],"optional":true,"nullable":false},{"name":"options.namespace","description":"<ul> <li>Optional namespace.</li> </ul> ","types":["string"],"optional":true,"nullable":false}],"exceptions":[],"returns":[]},{"id":"createQuery","name":"createQuery","type":"instance","description":"<p>Create a query from the current dataset to query the specified kinds, scoped to the namespace provided at the initialization of the dataset.</p><p><em><a href=\"http://goo.gl/Cag0r6\">Reference</a>.</em></p>","source":"/lib/datastore/dataset.js#L181","resources":[],"examples":[],"params":[{"name":"namespace","description":"<ul> <li>Optional namespace.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"kinds","description":"<ul> <li>Kinds to query.</li> </ul> ","types":["string","array"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"runInTransaction","name":"runInTransaction","type":"instance","description":"<p>Run a function in the context of a new transaction. Transactions allow you to perform multiple operations, committing your changes atomically.</p>","source":"/lib/datastore/dataset.js#L213","resources":[],"examples":[{"code":"dataset.runInTransaction(function(transaction, done) {\n  // From the `transaction` object, execute dataset methods as usual.\n  // Call `done` when you're ready to commit all of the changes.\n  transaction.get(dataset.key(['Company', 123]), function(err, entity) {\n    if (err) {\n      transaction.rollback(done);\n      return;\n    }\n\n    done();\n  });\n}, function(err) {});"}],"params":[{"name":"fn","description":"<ul> <li>The function to run in the context of a transaction.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"get","name":"get","type":"instance","description":"<p>Retrieve the entities identified with the specified key(s) in the current transaction. Get operations require a valid key to retrieve the key-identified entity from Datastore.</p>","source":"gcloud-node/lib/datastore/request.js#L101","resources":[],"examples":[{"caption":"<p>Where you see <code>transaction</code>, assume this is the context that's relevant to \nyour use, whether that be a Dataset or Transaction object.</p>","code":"// Get a single entity.\ntransaction.get(dataset.key(['Company', 123]), function(err, entity) {});\n\n// Get multiple entities at once.\ntransaction.get([\n  dataset.key(['Company', 123]),\n  dataset.key(['Product', 'Computer'])\n], function(err, entities) {});"}],"params":[{"name":"keys","description":"<ul> <li>Datastore key object(s).</li> </ul> ","types":["Key","Key[]"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"insert","name":"insert","type":"instance","description":"<p>Maps to <a data-custom-type=\"datastore/dataset\" data-method=\"save\">datastore/dataset#save</a>, forcing the method to be <code>insert</code>.</p>","source":"gcloud-node/lib/datastore/request.js#L147","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"save","name":"save","type":"instance","description":"<p>Insert or update the specified object(s). If a key is incomplete, its associated object is inserted and the original Key object is updated to contain the generated ID.</p><p>This method will determine the correct Datastore method to execute (<code>upsert</code>, <code>insert</code>, <code>update</code>, and <code>insertAutoId</code>) by using the key(s) provided. For example, if you provide an incomplete key (one without an ID), the request will create a new entity and have its ID automatically assigned. If you provide a complete key, the entity will be updated with the data specified.</p><p>By default, all properties are indexed. To prevent a property from being included in <em>all</em> indexes, you must supply an entity&#39;s <code>data</code> property as an array. See below for an example.</p>","source":"gcloud-node/lib/datastore/request.js#L247","resources":[],"examples":[{"caption":"<p>Save a single entity. \nNotice that we are providing an incomplete key. After saving, the original \nKey object used to save will be updated to contain the path with its \ngenerated ID.</p>","code":"var key = dataset.key('Company');\n\ndataset.save({\n  key: key,\n  data: {\n    rating: '10'\n  }\n}, function(err) {});"},{"caption":"<p>To specify an <code>excludeFromIndexes</code> value for a Datastore entity, pass in \nan array for the key's data. The above example would then look like:</p>","code":"dataset.save({\n  key: dataset.key('Company'),\n  data: [\n    {\n      name: 'rating',\n      value: '10',\n      excludeFromIndexes: false\n    }\n  ]\n}, function(err) {});"},{"caption":"<p>Save multiple entities at once.</p>","code":"var companyKey = dataset.key(['Company', 123]);\nvar productKey = dataset.key(['Product', 'Computer']);\n\ndataset.save([\n  {\n    key: companyKey,\n    data: {\n      HQ: 'Dallas, TX'\n    }\n  },\n  {\n    key: productKey,\n    data: {\n      vendor: 'Dell'\n    }\n  }\n], function(err) {});"},{"caption":"<p>Explicitly attempt to 'insert' a specific entity.</p>","code":"var userKey = dataset.key(['User', 'chilts']);\n\ndataset.save([\n  {\n    key: userKey,\n    method: 'insert', // force the method to 'insert'\n    data: {\n      fullName: 'Andrew Chilton'\n    }\n  }\n], function(err) {});"}],"params":[{"name":"entities","description":"<ul> <li>Datastore key object(s).</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false},{"name":"entities.key","description":"<ul> <li>Datastore key object.</li> </ul> ","types":["Key"],"optional":false,"nullable":false},{"name":"entities.method","description":"<ul> <li>Optional method to explicity use for save. The choices include &#39;insert&#39;, &#39;update&#39;, &#39;upsert&#39; and &#39;auto_insert_id&#39;.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"entities.data","description":"<ul> <li>Data to save with the provided key. If you provide an array of objects, you must use the explicit syntax:  <code>name</code> for the name of the property and <code>value</code> for its value. You may  also specify an <code>excludeFromIndexes</code> property, set to <code>true</code> or <code>false</code>.</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"delete","name":"delete","type":"instance","description":"<p>Delete all entities identified with the specified key(s).</p>","source":"gcloud-node/lib/datastore/request.js#L357","resources":[],"examples":[{"code":"// Delete a single entity.\ndataset.delete(dataset.key(['Company', 123]), function(err) {});\n\n// Delete multiple entities at once.\ndataset.delete([\n  dataset.key(['Company', 123]),\n  dataset.key(['Product', 'Computer'])\n], function(err) {});"}],"params":[{"name":"key","description":"<ul> <li>Datastore key object(s).</li> </ul> ","types":["Key","Key[]"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"runQuery","name":"runQuery","type":"instance","description":"<p>Datastore allows you to query entities by kind, filter them by property filters, and sort them by a property name. Projection and pagination are also supported.</p><p>If you provide a callback, the query is run, and the results are returned as the second argument to your callback. A third argument will also exist, which is the <code>endCursor</code> of the previously-run query. You can use this to extend the query you just ran to see if more results exist.</p><p>You may also omit the callback to this function to trigger streaming mode.</p><p>See below for examples of both approaches.</p>","source":"gcloud-node/lib/datastore/request.js#L413","resources":[],"examples":[{"caption":"<p>Where you see <code>transaction</code>, assume this is the context that's relevant to \nyour use, whether that be a Dataset or a Transaction object.</p>","code":"// Retrieve 5 companies.\ntransaction.runQuery(queryObject, function(err, entities, endCursor) {\n  // Use `endCursor` as the starting cursor for your next query.\n  var nextQuery = queryObject.start(endCursor);\n  transaction.runQuery(nextQuery, function(err, entities, endCursor) {});\n});"},{"caption":"<p>If you omit the callback, runQuery will automatically call subsequent \nqueries until no results remain. Entity objects will be pushed as they are \nfound.</p>","code":"transaction.runQuery(queryObject)\n  .on('data', function (entity) {});"}],"params":[{"name":"q","description":"<ul> <li>Query object.</li> </ul> ","types":["<a data-custom-type=\"datastore/query\">datastore/query</a>"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function. If omitted, a readable stream instance is returned.</li> </ul> ","types":["function"],"optional":true,"nullable":false}],"exceptions":[],"returns":[]},{"id":"allocateIds","name":"allocateIds","type":"instance","description":"<p>Generate IDs without creating entities.</p>","source":"gcloud-node/lib/datastore/request.js#L510","resources":[],"examples":[{"caption":"<p>Where you see <code>transaction</code>, assume this is the context that's relevant to \nyour use, whether that be a Dataset or a Transaction object.</p>","code":"// The following call will create 100 new IDs from the Company kind, which\n// exists under the default namespace.\ntransaction.allocateIds(incompleteKey, 100, function(err, keys) {});\n\n// You may prefer to create IDs from a non-default namespace by providing an\n// incomplete key with a namespace. Similar to the previous example, the call\n// below will create 100 new IDs, but from the Company kind that exists under\n// the \"ns-test\" namespace.\nvar incompleteKey = dataset.key({\n  namespace: 'ns-test',\n  path: ['Company']\n});\ntransaction.allocateIds(incompleteKey, 100, function(err, keys) {});"}],"params":[{"name":"incompleteKey","description":"<ul> <li>The key object to complete.</li> </ul> ","types":["Key"],"optional":false,"nullable":false},{"name":"n","description":"<ul> <li>How many IDs to generate.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"update","name":"update","type":"instance","description":"<p>Maps to <a data-custom-type=\"datastore/dataset\" data-method=\"save\">datastore/dataset#save</a>, forcing the method to be <code>update</code>.</p>","source":"gcloud-node/lib/datastore/request.js#L539","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"upsert","name":"upsert","type":"instance","description":"<p>Maps to <a data-custom-type=\"datastore/dataset\" data-method=\"save\">datastore/dataset#save</a>, forcing the method to be <code>upsert</code>.</p>","source":"gcloud-node/lib/datastore/request.js#L547","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]}]}