{"id":"datastore/query","type":"class","name":"Query","description":null,"source":"/lib/datastore/query.js#L57","parent":"datastore","children":[],"methods":[{"id":"Query","name":"Query","type":"instance","description":"<p>Build a Query object.</p><p><strong>Queries should be built with <a data-custom-type=\"datastore/dataset\" data-method=\"createQuery\">datastore/dataset#createQuery</a> and run via <a data-custom-type=\"datastore/dataset\" data-method=\"runQuery\">datastore/dataset#runQuery</a>.</strong></p><p><em>Reference: {@link <a href=\"http://goo.gl/Cag0r6}\">http://goo.gl/Cag0r6}</a></em></p>","source":"/lib/datastore/query.js#L57","resources":[],"examples":[{"code":"// If your dataset was scoped to a namespace at initialization, your query\n// will likewise be scoped to that namespace.\ndataset.createQuery(['Lion', 'Chimp']);\n\n// However, you may override the namespace per query.\ndataset.createQuery('AnimalNamespace', ['Lion', 'Chimp']);\n\n// You may also remove the namespace altogether.\ndataset.createQuery(null, ['Lion', 'Chimp']);"}],"params":[{"name":"namespace","description":"- Namespace to query entities from.","types":["string="]},{"name":"kinds","description":"- Kinds to query. ","types":["string[]"]}],"exceptions":[],"returns":[]},{"id":"filter","name":"filter","type":"instance","description":"<p>Datastore allows querying on properties. Supported comparison operators are <code>=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, and <code>&gt;=</code>. &quot;Not equal&quot; and <code>IN</code> operators are currently not supported.</p><p><em>To filter by ancestors, see <a data-custom-type=\"datastore/query\" data-method=\"hasAncestor\">datastore/query#hasAncestor</a>.</em></p><p><em>Reference: {@link <a href=\"http://goo.gl/ENCx7e}\">http://goo.gl/ENCx7e}</a></em></p>","source":"/lib/datastore/query.js#L101","resources":[],"examples":[{"code":"// List all companies named Google that have less than 400 employees.\nvar companyQuery = query\n  .filter('name =', 'Google');\n  .filter('size <', 400);\n\n// To filter by key, use `__key__` for the property name. Filter on keys\n// stored as properties is not currently supported.\nvar keyQuery = query.filter('__key__ =', dataset.key(['Company', 'Google']));"}],"params":[{"name":"filter","description":"- Property + Operator (=, <, >, <=, >=).","types":["string"]},{"name":"value","description":"- Value to compare property to.","types":["*"]}],"exceptions":[],"returns":[]},{"id":"hasAncestor","name":"hasAncestor","type":"instance","description":"<p>Filter a query by ancestors.</p><p><em>Reference: {@link <a href=\"http://goo.gl/1qfpkZ}\">http://goo.gl/1qfpkZ}</a></em></p>","source":"/lib/datastore/query.js#L127","resources":[],"examples":[{"code":"var ancestoryQuery = query.hasAncestor(dataset.key(['Parent', 123]));"}],"params":[{"name":"key","description":"- Key object to filter by.","types":["Key"]}],"exceptions":[],"returns":[]},{"id":"order","name":"order","type":"instance","description":"<p>Sort the results by a property name in ascending or descending order. By default, an ascending sort order will be used.</p><p><em>Reference: {@link <a href=\"http://goo.gl/mfegFR}\">http://goo.gl/mfegFR}</a></em></p>","source":"/lib/datastore/query.js#L149","resources":[],"examples":[{"code":"// Sort by size ascendingly.\nvar companiesAscending = companyQuery.order('size');\n\n// Sort by size descendingly.\nvar companiesDescending = companyQuery.order('-size');"}],"params":[{"name":"property","description":"- Optional operator (+, -) and property to order by.","types":["string"]}],"exceptions":[],"returns":[]},{"id":"groupBy","name":"groupBy","type":"instance","description":"<p>Group query results by a list of properties.</p>","source":"/lib/datastore/query.js#L170","resources":[],"examples":[{"code":"var groupedQuery = companyQuery.groupBy(['name', 'size']);"}],"params":[{"name":"properties","description":"- Properties to group by.","types":["array"]}],"exceptions":[],"returns":[]},{"id":"select","name":"select","type":"instance","description":"<p>Retrieve only select properties from the matched entities.</p><p><em>Reference: <a href=\"<a href=\"http://goo.gl/EfsrJl\">Projection Queries</a>\">http://goo.gl/EfsrJl}</a></em></p>","source":"/lib/datastore/query.js#L188","resources":[],"examples":[{"code":"// Only retrieve the name and size properties.\nvar selectQuery = companyQuery.select(['name', 'size']);"}],"params":[{"name":"fieldNames","description":"- Properties to return from the matched entities.","types":["array"]}],"exceptions":[],"returns":[]},{"id":"start","name":"start","type":"instance","description":"<p>Set a starting cursor to a query.</p><p><em>Reference: {@link <a href=\"http://goo.gl/WuTGRI}\">http://goo.gl/WuTGRI}</a></em></p>","source":"/lib/datastore/query.js#L208","resources":[],"examples":[{"code":"var cursorToken = 'X';\n\n// Retrieve results starting from cursorToken.\nvar startQuery = companyQuery.start(cursorToken);"}],"params":[{"name":"cursorToken","description":"- The starting cursor token.","types":["string"]}],"exceptions":[],"returns":[]},{"id":"end","name":"end","type":"instance","description":"<p>Set an ending cursor to a query.</p><p><em>Reference: {@link <a href=\"http://goo.gl/WuTGRI}\">http://goo.gl/WuTGRI}</a></em></p>","source":"/lib/datastore/query.js#L228","resources":[],"examples":[{"code":"var cursorToken = 'X';\n\n// Retrieve results limited to the extent of cursorToken.\nvar endQuery = companyQuery.end(cursorToken);"}],"params":[{"name":"cursorToken","description":"- The ending cursor token.","types":["string"]}],"exceptions":[],"returns":[]},{"id":"limit","name":"limit","type":"instance","description":"<p>Set a limit on a query.</p><p><em>Reference: {@link <a href=\"http://goo.gl/f0VZ0n}\">http://goo.gl/f0VZ0n}</a></em></p>","source":"/lib/datastore/query.js#L246","resources":[],"examples":[{"code":"// Limit the results to 10 entities.\nvar limitQuery = companyQuery.limit(10);"}],"params":[{"name":"n","description":"- The number of results to limit the query to.","types":["number"]}],"exceptions":[],"returns":[]},{"id":"offset","name":"offset","type":"instance","description":"<p>Set an offset on a query.</p><p><em>Reference: {@link <a href=\"http://goo.gl/f0VZ0n}\">http://goo.gl/f0VZ0n}</a></em></p>","source":"/lib/datastore/query.js#L264","resources":[],"examples":[{"code":"// Start from the 101st result.\nvar offsetQuery = companyQuery.offset(100);"}],"params":[{"name":"n","description":"- The offset to start from after the start cursor.","types":["number"]}],"exceptions":[],"returns":[]}]}