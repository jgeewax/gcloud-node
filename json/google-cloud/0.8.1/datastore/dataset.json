{"id":"datastore/dataset","type":"class","name":"Dataset","description":null,"source":"/lib/datastore/dataset.js#L95","parent":"datastore","children":[],"methods":[{"id":"Dataset","name":"Dataset","type":"instance","description":"<p>Interact with a dataset from the <a href=\"<a href=\"https://developers.google.com/datastore/\">Google Cloud Datastore</a>\">https://developers.google.com/datastore/}</a>.</p>","source":"/lib/datastore/dataset.js#L95","resources":[],"examples":[{"code":"var dataset = datastore.dataset({\n  projectId: 'my-project',\n  keyFilename: '/path/to/keyfile.json'\n});"}],"params":[{"name":"options","description":"- Configuration object.","types":["object="]},{"name":"options.projectId","description":"- Dataset ID. This is your project ID from the Google Developers Console.","types":["string="]},{"name":"options.keyFilename","description":"- Full path to the JSON key downloaded from the Google Developers Console. Alternatively, you may provide a <code>credentials</code> object.","types":["string="]},{"name":"options.credentials","description":"- Credentials object, used in place of a <code>keyFilename</code>.","types":["object="]},{"name":"options.namespace","description":"- Namespace to isolate transactions to. ","types":["string"]}],"exceptions":[],"returns":[]},{"id":"key","name":"key","type":"instance","description":"<p>Helper to create a Key object, scoped to the dataset&#39;s namespace by default.</p><p>You may also specify a configuration object to define a namespace and path.</p>","source":"/lib/datastore/dataset.js#L146","resources":[],"examples":[{"code":"var key;\n\n// Create an incomplete key from the dataset namespace, kind='Company'\nkey = dataset.key('Company');\n\n// A complete key from the dataset namespace, kind='Company', id=123\nkey = dataset.key(['Company', 123]);\n\n// A complete key from the dataset namespace, kind='Company', name='Google'\n// Note: `id` is used for numeric identifiers and `name` is used otherwise\nkey = dataset.key(['Company', 'Google']);\n\n// A complete key from a provided namespace and path.\nkey = dataset.key({\n  namespace: 'My-NS',\n  path: ['Company', 123]\n});\n"}],"params":[{"name":"options","description":"- Key path. To specify or override a namespace, you must use an object here to explicitly state it.","types":["...*="]},{"name":"options","description":"- Configuration object.","types":["object="]},{"name":"options.path","description":"- Key path.","types":["...*="]},{"name":"options.namespace","description":"- Optional namespace. ","types":["string="]}],"exceptions":[],"returns":[]},{"id":"createQuery","name":"createQuery","type":"instance","description":"<p>Create a query from the current dataset to query the specified kinds, scoped to the namespace provided at the initialization of the dataset.</p><p><em>Dataset query reference: {@link <a href=\"http://goo.gl/Cag0r6}\">http://goo.gl/Cag0r6}</a></em></p>","source":"/lib/datastore/dataset.js#L167","resources":[],"examples":[],"params":[{"name":"namespace","description":"- Optional namespace.","types":["string="]},{"name":"kinds","description":"- Kinds to query.","types":["string","array"]}],"exceptions":[],"returns":[]},{"id":"runInTransaction","name":"runInTransaction","type":"instance","description":"<p>Run a function in the context of a new transaction. Transactions allow you to perform multiple operations, committing your changes atomically.</p>","source":"/lib/datastore/dataset.js#L198","resources":[],"examples":[{"code":"dataset.runInTransaction(function(transaction, done) {\n  // From the `transaction` object, execute dataset methods as usual.\n  // Call `done` when you're ready to commit all of the changes.\n  transaction.get(dataset.key(['Company', 123]), function(err, entity) {\n    if (err) {\n      transaction.rollback(done);\n      return;\n    }\n\n    done();\n  });\n}, function(err) {});"}],"params":[{"name":"fn","description":"- The function to run in the context of a transaction.","types":["function"]},{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]},{"id":"DatastoreRequest","name":"DatastoreRequest","type":"instance","description":"<p>Handle logic for Datastore API operations.</p>","source":"gcloud-node/lib/datastore/request.js","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"get","name":"get","type":"instance","description":"<p>Retrieve the entities identified with the specified key(s) in the current transaction. Get operations require a valid key to retrieve the key-identified entity from Datastore.</p>","source":"gcloud-node/lib/datastore/request.js#L105","resources":[],"examples":[{"caption":"<p>Where you see <code>transaction</code>, assume this is the context that's relevant to \nyour use, whether that be a Dataset or Transaction object.</p>","code":"// Get a single entity.\ntransaction.get(dataset.key(['Company', 123]), function(err, entity) {});\n\n// Get multiple entities at once.\ntransaction.get([\n  dataset.key(['Company', 123]),\n  dataset.key(['Product', 'Computer'])\n], function(err, entities) {});"}],"params":[{"name":"keys","description":"- Datastore key object(s).","types":["Key","Key[]"]},{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]},{"id":"save","name":"save","type":"instance","description":"<p>Insert or update the specified object(s) in the current transaction. If a key is incomplete, its associated object is inserted and its generated identifier is returned to the callback.</p><p>This method will determine the correct Datastore method to execute (<code>upsert</code>, <code>insert</code>, <code>update</code>, and <code>insertAutoId</code>) by using the key(s) provided. For example, if you provide an incomplete key (one without an ID), the request will create a new entity and have its ID automatically assigned. If you provide a complete key, the entity will be updated with the data specified.</p><p>By default, all properties are indexed. To prevent a property from being included in <em>all</em> indexes, you must supply an entity&#39;s <code>data</code> property as an array. See below for an example.</p>","source":"gcloud-node/lib/datastore/request.js#L212","resources":[],"examples":[{"caption":"<p>Where you see <code>transaction</code>, assume this is the context that's relevant to \nyour use, whether that be a Dataset or a Transaction object.</p>","code":"// Save a single entity.\ntransaction.save({\n  key: dataset.key('Company'),\n  data: {\n    rating: '10'\n  }\n}, function(err, key) {\n  // Because we gave an incomplete key as an argument, `key` will be\n  // populated with the complete, generated key.\n});\n\n// To specify an `excludeFromIndexes` value for a Datastore entity, pass in\n// an array for the key's data. The above example would then look like:\ntransaction.save({\n  key: dataset.key('Company'),\n  data: [\n    {\n      name: 'rating',\n      value: '10',\n      excludeFromIndexes: false\n    }\n  ]\n}, function(err, key) {});\n\n// Save multiple entities at once.\ntransaction.save([\n  {\n    key: dataset.key(['Company', 123]),\n    data: {\n      HQ: 'Dallas, TX'\n    }\n  },\n  {\n    key: dataset.key(['Product', 'Computer']),\n    data: {\n      vendor: 'Dell'\n    }\n  }\n], function(err, keys) {});"}],"params":[{"name":"entities","description":"- Datastore key object(s).","types":["object","object[]"]},{"name":"entities.key","description":"- Datastore key object.","types":["Key"]},{"name":"entities.data","description":"- Data to save with the provided key. If you provide an array of objects, you must use the explicit syntax: <code>name</code> for the name of the property and <code>value</code> for its value. You may also specify an <code>excludeFromIndexes</code> property, set to <code>true</code> or <code>false</code>.","types":["object","object[]"]},{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]},{"id":"delete","name":"delete","type":"instance","description":"<p>Delete all entities identified with the specified key(s) in the current transaction.</p>","source":"gcloud-node/lib/datastore/request.js#L289","resources":[],"examples":[{"caption":"<p>Where you see <code>transaction</code>, assume this is the context that's relevant to \nyour use, whether that be a Dataset or a Transaction object.</p>","code":"// Delete a single entity.\ntransaction.delete(dataset.key(['Company', 123]), function(err) {});\n\n// Delete multiple entities at once.\ntransaction.delete([\n  dataset.key(['Company', 123]),\n  dataset.key(['Product', 'Computer'])\n], function(err) {});"}],"params":[{"name":"key","description":"- Datastore key object(s).","types":["Key","Key[]"]},{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]},{"id":"runQuery","name":"runQuery","type":"instance","description":"<p>Datastore allows you to query entities by kind, filter them by property filters, and sort them by a property name. Projection and pagination are also supported. If more results are available, a query to retrieve the next page is provided to the callback function.</p>","source":"gcloud-node/lib/datastore/request.js#L338","resources":[],"examples":[{"caption":"<p>Where you see <code>transaction</code>, assume this is the context that's relevant to \nyour use, whether that be a Dataset or a Transaction object.</p>","code":"// Retrieve 5 companies.\ntransaction.runQuery(queryObject, function(err, entities, nextQuery) {\n  // `nextQuery` is not null if there are more results.\n  if (nextQuery) {\n    transaction.runQuery(nextQuery, function(err, entities, nextQuery) {});\n  }\n});"}],"params":[{"name":"q","description":"- Query object.","types":["<a data-custom-type=\"datastore\">datastore</a>","query"]},{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]}]}