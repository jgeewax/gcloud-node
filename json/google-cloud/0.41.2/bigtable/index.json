{"id":"bigtable","type":"class","name":"Bigtable","overview":"<p>\n  This class allows you interact with Google Cloud Bigtable.\n</p>\n\n<p>\n  First, install <code>google-cloud</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save google-cloud</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>google-cloud</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Compute Engine</h4>\n<div hljs language=\"javascript\">\nvar gcloud = require('google-cloud');\nvar bigtable = gcloud.bigtable();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar gcloud = require('google-cloud');\nvar bigtable = gcloud.bigtable({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>google-cloud</code> are outlined in our <a href=\"#/docs/google-cloud/0.41.2/guides/authentication\">Authentication guide</a>.\n</p>\n\n","description":"","source":"packages/bigtable/src/index.js","parent":null,"children":["bigtable/packageon","bigtable/README.md","bigtable/src","bigtable/system-test","bigtable/test"],"methods":[{"id":"Bigtable","name":"Bigtable","type":"constructor","description":"","source":"packages/bigtable/src/index.js#L284","resources":[{"title":"Creating a Cloud Bigtable Cluster","link":"https://cloud.google.com/bigtable/docs/creating-compute-instance"},{"title":"Google Cloud Bigtable Concepts Overview","link":"https://cloud.google.com/bigtable/docs/concepts"}],"examples":[{"caption":"<p><h3>Creating a Compute Instance</h3> \nBefore you create your table, you first need to create a Compute Instance \nfor the table to be served from.</p>","code":"var callback = function(err, instance, operation) {\n  operation\n    .on('error', console.log)\n    .on('complete', function() {\n      // `instance` is your newly created Instance object.\n    });\n};\n\nvar instance = bigtable.instance('my-instance');\n\ninstance.create({\n  clusters: [\n    {\n      name: 'my-cluster',\n      location: 'us-central1-b',\n      nodes: 3\n    }\n  ]\n}, callback);"},{"caption":"<p>This can also be done from either the Google Cloud Platform Console or the \n<code>gcloud</code> cli tool. Please refer to the \n<a href=\"https://cloud.google.com/bigtable/docs/creating-compute-instance\"> \nofficial Bigtable documentation</a> for more information.</p>"},{"caption":"<p><h3>Creating Tables</h3> \nAfter creating your instance and enabling the Bigtable APIs, you are now \nready to create your table with <a data-custom-type=\"bigtable/instance\" data-method=\"createTable\">bigtable/instance#createTable</a>.</p>","code":"instance.createTable('prezzy', function(err, table) {\n  // `table` is your newly created Table object.\n});"},{"caption":"<p><h3>Creating Column Families</h3> \nColumn families are used to group together various pieces of data within \nyour table. You can think of column families as a mechanism to categorize \nall of your data. \nWe can create a column family with <a data-custom-type=\"bigtable/table\" data-method=\"createFamily\">bigtable/table#createFamily</a>.</p>","code":"var table = instance.table('prezzy');\n\ntable.createFamily('follows', function(err, family) {\n  // `family` is your newly created Family object.\n});"},{"caption":"<p>It is also possible to create your column families when creating a new \ntable.</p>","code":"var options = {\n  families: ['follows']\n};\n\ninstance.createTable('prezzy', options, function(err, table) {});"},{"caption":"<p><h3>Creating Rows</h3> \nNew rows can be created within your table using \n<a data-custom-type=\"bigtable/table\" data-method=\"insert\">bigtable/table#insert</a>. You must provide a unique key for each row \nto be inserted, this key can then be used to retrieve your row at a later \ntime. \nWith Bigtable, all columns have a unique id composed of a column family \nand a column qualifier. In the example below <code>follows</code> is the column \nfamily and <code>tjefferson</code> is the column qualifier. Together they could be \nreferred to as <code>follows:tjefferson</code>.</p>","code":"var rows = [\n  {\n    key: 'wmckinley',\n    data: {\n      follows: {\n        tjefferson: 1\n      }\n    }\n  }\n];\n\ntable.insert(rows, function(err) {\n  if (!err) {\n    // Your rows were successfully inserted.\n  }\n});"},{"caption":"<p><h3>Retrieving Rows</h3> \nIf you're anticipating a large number of rows to be returned, we suggest \nusing the <a data-custom-type=\"bigtable/table\" data-method=\"getRows\">bigtable/table#getRows</a> streaming API.</p>","code":"table.getRows()\n  .on('error', console.error)\n  .on('data', function(row) {\n    // `row` is a Row object.\n  });"},{"caption":"<p>If you're not anticpating a large number of results, a callback mode \nis also available.</p>","code":"var callback = function(err, rows) {\n  // `rows` is an array of Row objects.\n};\n\ntable.getRows(callback);"},{"caption":"<p>A range of rows can be retrieved by providing <code>start</code> and <code>end</code> row keys.</p>","code":"var options = {\n  start: 'gwashington',\n  end: 'wmckinley'\n};\n\ntable.getRows(options, callback);"},{"caption":"<p>Retrieve an individual row with <a data-custom-type=\"bigtable/row\" data-method=\"get\">bigtable/row#get</a>.</p>","code":"var row = table.row('alincoln');\n\nrow.get(function(err) {\n  // `row.data` is now populated.\n});"},{"caption":"<p><h3>Accessing Row Data</h3> \nWhen retrieving rows, upon success the <code>row.data</code> property will be \npopulated by an object. That object will contain additional objects \nfor each family in your table that the row has data for. \nBy default, when retrieving rows, each column qualifier will provide you \nwith all previous versions of the data. So your <code>row.data</code> object could \nresemble the following. \n{ \nfollows: { \nwmckinley: [ \n{ \nvalue: 1, \ntimestamp: 1466017315951 \n}, { \nvalue: 2, \ntimestamp: 1458619200000 \n} \n] \n} \n}</p>"},{"caption":"<p>The <code>timestamp</code> field can be used to order cells from newest to oldest. \nIf you only wish to retrieve the most recent version of the data, you \ncan specify the number of cells with a <a data-custom-type=\"bigtable/filter\" data-method=\"\">bigtable/filter</a> object.</p>","code":"var filter = [\n  {\n    column: {\n      cellLimit: 1\n    }\n  }\n];\n\ntable.getRows({\n  filter: filter\n}, callback);"},{"caption":"<p><h3>Deleting Row Data</h3> \nWe can delete all of an individual row's cells using \n<a data-custom-type=\"bigtable/row\" data-method=\"delete\">bigtable/row#delete</a>.</p>","code":"var callback = function(err) {\n  if (!err) {\n    // All cells for this row were deleted successfully.\n  }\n};\n\nrow.delete(callback);"},{"caption":"<p>To delete a specific set of cells, we can provide an array of \ncolumn families and qualifiers.</p>","code":"var cells = [\n  'follows:gwashington',\n  'traits'\n];\n\nrow.delete(cells, callback);"},{"caption":"<p><h3>Deleting Rows</h3> \nIf you wish to delete multiple rows entirely, we can do so with \n<a data-custom-type=\"bigtable/table\" data-method=\"deleteRows\">bigtable/table#deleteRows</a>. You can provide this method with a \nrow key prefix.</p>","code":"var options = {\n  prefix: 'gwash'\n};\n\ntable.deleteRows(options, function(err) {\n  if (!err) {\n    // Rows were deleted successfully.\n  }\n});"},{"caption":"<p>If you omit the prefix, you can delete all rows in your table.</p>","code":"table.deleteRows(function(err) {\n  if (!err) {\n    // All rows were deleted successfully.\n  }\n});"}],"params":[{"name":"options","description":"<ul> <li><a href=\"#/docs\">Configuration object</a>.</li> </ul> ","types":["object"],"optional":true,"nullable":false}],"exceptions":[],"returns":[]},{"id":"createInstance","name":"createInstance","type":"instance","description":"<p>Create a Compute instance.</p>","source":"packages/bigtable/src/index.js#L376","resources":[{"title":"Creating a Compute Instance","link":"https://cloud.google.com/bigtable/docs/creating-compute-instance"}],"examples":[{"code":"var callback = function(err, instance, operation, apiResponse) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  operation\n    .on('error', console.log)\n    .on('complete', function() {\n      // The instance was created successfully.\n    });\n};\n\nvar options = {\n  displayName: 'my-sweet-instance',\n  clusters: [\n    {\n      name: 'my-sweet-cluster',\n      nodes: 3,\n      location: 'us-central1-b',\n      storage: 'ssd'\n    }\n  ]\n};\n\nbigtable.createInstance('my-instance', options, callback);"}],"params":[{"name":"name","description":"<ul> <li>The unique name of the instance.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options","description":"<ul> <li>Instance creation options.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.clusters","description":"<ul> <li>The clusters to be created within the instance.</li> </ul> ","types":["object[]"],"optional":false,"nullable":false},{"name":"options.displayName","description":"<ul> <li>The descriptive name for this instance as it appears in UIs.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.instance","description":"<ul> <li>The newly created instance.</li> </ul> ","types":["<a data-custom-type=\"bigtable/instance\" data-method=\"\">bigtable/instance</a>"],"optional":false,"nullable":false},{"name":"callback.operation","description":"<ul> <li>An operation object that can be used to check the status of the request.</li> </ul> ","types":["Operation"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"getInstances","name":"getInstances","type":"instance","description":"<p>Get Instance objects for all of your Compute instances.</p>","source":"packages/bigtable/src/index.js#L481","resources":[],"examples":[{"code":"bigtable.getInstances(function(err, instances) {\n  if (!err) {\n    // `instances` is an array of Instance objects.\n  }\n});"},{"caption":"<p>To control how many API requests are made and page through the results \nmanually, set <code>autoPaginate</code> to false.</p>","code":"var callback = function(err, instances, nextQuery, apiResponse) {\n  if (nextQuery) {\n    // More results exist.\n    bigtable.getInstances(nextQuery, calback);\n  }\n};\n\nbigtable.getInstances({\n  autoPaginate: false\n}, callback);"},{"caption":"<p>Get the instances from your project as a readable object stream.</p>","code":"bigtable.getInstances()\n  .on('error', console.error)\n  .on('data', function(instance) {\n    // `instance` is an Instance object.\n  })\n  .on('end', function() {\n    // All instances retrieved.\n  });"},{"caption":"<p>If you anticipate many results, you can end a stream early to prevent \nunnecessary processing and API requests.</p>","code":"bigtable.getInstances()\n  .on('data', function(instance) {\n    this.end();\n  });"}],"params":[{"name":"query","description":"<ul> <li>Query object.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"query.autoPaginate","description":"<ul> <li>Have pagination handled automatically. Default: true.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"query.maxApiCalls","description":"<ul> <li>Maximum number of API calls to make.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"query.maxResults","description":"<ul> <li>Maximum number of results to return.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"query.pageToken","description":"<ul> <li>Token returned from a previous call, to request the next page of results.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.error","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.instances","description":"<ul> <li>List of all instances.</li> </ul> ","types":["<a data-custom-type=\"bigtable/instance[]\" data-method=\"\">bigtable/instance[]</a>"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"instance","name":"instance","type":"instance","description":"<p>Get a reference to a Compute instance.</p>","source":"packages/bigtable/src/index.js#L525","resources":[],"examples":[],"params":[{"name":"name","description":"<ul> <li>The name of the instance.</li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"bigtable/instance\" data-method=\"\">bigtable/instance</a>"],"description":""}]},{"id":"operation","name":"operation","type":"instance","description":"<p>Get a reference to an Operation.</p>","source":"packages/bigtable/src/index.js#L535","resources":[],"examples":[],"params":[{"name":"name","description":"<ul> <li>The name of the instance.</li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["Operation"],"description":""}]}]}