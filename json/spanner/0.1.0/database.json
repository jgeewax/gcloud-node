{"id":"spanner/database","type":"class","name":"Database","overview":"<p>\n  This class allows you interact with Cloud Spanner.\n</p>\n\n<p>\n  First, install <code>@google-cloud/spanner</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save @google-cloud/spanner</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>@google-cloud/spanner</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Compute Engine</h4>\n<div hljs language=\"javascript\">\nvar spanner = require('@google-cloud/spanner')();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar spanner = require('@google-cloud/spanner')({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>@google-cloud/spanner</code> are outlined in our <a href=\"#/docs/spanner/0.1.0/guides/authentication\">Authentication guide</a>.\n</p>\n\n","description":"","source":"packages/spanner/src/database.js","parent":"spanner","children":[],"methods":[{"id":"Database","name":"Database","type":"constructor","description":"<p>Create a Database object to interact with a Cloud Spanner database.</p>","source":"packages/spanner/src/database.js#L91","resources":[],"examples":[{"code":"var instance = spanner.instance('my-instance');\nvar database = instance.database('my-database');"}],"params":[{"name":"name","description":"<ul> <li>Name of the database.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options","description":"<ul> <li>Session pool configuration options.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.fail","description":"<ul> <li>If set to true, an error will be thrown when there are no available sessions for a request. (Default: <code>false</code>)</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"options.max","description":"<ul> <li>Maximum number of resources to create at any given time. (Default: <code>1</code>)</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"options.maxIdle","description":"<ul> <li>Maximum number of idle resources to keep in the pool at any given time.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"options.min","description":"<ul> <li>Minimum number of resources to keep in the pool at any given time. (Default: <code>0</code>)</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"options.keepAlive","description":"<ul> <li>How often to ping idle sessions, in minutes. Must be less than 1 hour.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"options.writes","description":"<ul> <li>Pre-allocate transactions for the number of sessions specified.</li> </ul> ","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"create","name":"create","type":"instance","description":"<p>Create a database.</p>","source":"packages/spanner/src/database.js#L131","resources":[],"examples":[{"code":"database.create(function(err, database, operation, apiResponse) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  operation\n    .on('error', function(err) {})\n    .on('complete', function() {\n      // Database created successfully.\n    });\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"database.create()\n  .then(function(data) {\n    var operation = data[0];\n    var apiResponse = data[1];\n\n    return operation.promise();\n  })\n  .then(function() {\n    // Database created successfully.\n  });"}],"params":[{"name":"options","description":"<ul> <li>See <a data-custom-type=\"spanner/instance\" data-method=\"createDatabase\">spanner/instance#createDatabase</a>.</li> </ul> ","types":["object"],"optional":true,"nullable":false}],"exceptions":[],"returns":[]},{"id":"exists","name":"exists","type":"instance","description":"<p>Check if a database exists.</p>","source":"packages/spanner/src/database.js#L151","resources":[],"examples":[{"code":"database.exists(function(err, exists) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"database.exists().then(function(data) {\n  var exists = data[0];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.exists","description":"<ul> <li>Whether the database exists or not.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"get","name":"get","type":"instance","description":"<p>Get a database if it exists.</p><p>You may optionally use this to &quot;get or create&quot; an object by providing an object with <code>autoCreate</code> set to <code>true</code>. Any extra configuration that is normally required for the <code>create</code> method must be contained within this object as well.</p>","source":"packages/spanner/src/database.js#L178","resources":[],"examples":[{"code":"database.get(function(err, database, apiResponse) {\n  // `database.metadata` has been populated.\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"database.get().then(function(data) {\n  var database = data[0];\n  var apiResponse = data[0];\n});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["options"],"optional":true,"nullable":false},{"name":"options.autoCreate","description":"<ul> <li>Automatically create the object if it does not exist. Default: <code>false</code></li> </ul> ","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"close","name":"close","type":"instance","description":"<p>Close the database connection and destroy all sessions associated with it.</p>","source":"packages/spanner/src/database.js#L231","resources":[],"examples":[{"code":"database.close(function(err) {\n  if (err) {\n    // Error handling omitted.\n  }\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true}],"exceptions":[],"returns":[]},{"id":"createTable","name":"createTable","type":"instance","description":"<p>Create a table.</p>","source":"packages/spanner/src/database.js#L285","resources":[],"examples":[{"code":"var schema =\n  'CREATE TABLE Singers (' +\n  '  SingerId INT64 NOT NULL,' +\n  '  FirstName STRING(1024),' +\n  '  LastName STRING(1024),' +\n  '  SingerInfo BYTES(MAX),' +\n  ') PRIMARY KEY(SingerId)';\n\ndatabase.createTable(schema, function(err, table, operation, apiResponse) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  operation\n    .on('error', function(err) {})\n    .on('complete', function() {\n      // Table created successfully.\n    });\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"database.createTable(schema)\n  .then(function(data) {\n    var table = data[0];\n    var operation = data[1];\n\n    return operation.promise();\n  })\n  .then(function() {\n    // Table created successfully.\n  });"}],"params":[{"name":"schema","description":"<ul> <li>A DDL CREATE statement describing the table.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.table","description":"<ul> <li>The Table object.</li> </ul> ","types":["<a data-custom-type=\"spanner/table\" data-method=\"\">spanner/table</a>"],"optional":false,"nullable":false},{"name":"callback.operation","description":"<ul> <li>An operation object that can be used to check the status of the request.</li> </ul> ","types":["Operation"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"delete","name":"delete","type":"instance","description":"<p>Delete the database.</p>","source":"packages/spanner/src/database.js#L326","resources":[{}],"examples":[{"code":"database.delete(function(err, apiResponse) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  // Database was deleted successfully.\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"database.delete().then(function(data) {\n  var apiResponse = data[0];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"getMetadata","name":"getMetadata","type":"instance","description":"<p>Get the database&#39;s metadata.</p>","source":"packages/spanner/src/database.js#L359","resources":[{}],"examples":[{"code":"database.getMetadata(function(err, metadata, apiResponse) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  // Database was deleted successfully.\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"database.getMetadata().then(function(data) {\n  var metadata = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.metadata","description":"<ul> <li>The database&#39;s metadata.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"getSchema","name":"getSchema","type":"instance","description":"<p>Get this database&#39;s schema as a list of formatted DDL statements.</p>","source":"packages/spanner/src/database.js#L387","resources":[{},{}],"examples":[{"code":"database.getSchema(function(err, statements, apiResponse) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"database.getSchema().then(function(data) {\n  var statements = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.statements","description":"<ul> <li>An array of database DDL statements.</li> </ul> ","types":["string[]"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"run","name":"run","type":"instance","description":"<p>Execute a SQL statement on this database.</p>","source":"packages/spanner/src/database.js#L482","resources":[{},{}],"examples":[{"code":"var query = 'SELECT * FROM Singers';\n\ndatabase.run(query, function(err, rows) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  var row1 = rows[0];\n\n  // row1 = [\n  //   {\n  //     name: 'SingerId',\n  //     value: '1'\n  //   },\n  //   {\n  //     name: 'Name',\n  //     value: 'Eddie Wilson'\n  //   }\n  // ]\n});"},{"caption":"<p>Rows are returned as an array of object arrays. Each object has a <code>name</code> \nand <code>value</code> property. To get a serialized object, call <code>toJSON()</code>.</p>","code":"database.run(query, function(err, rows) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  var row1 = rows[0];\n\n  // row1.toJSON() = {\n  //   SingerId: '1',\n  //   Name: 'Eddie Wilson'\n  // }\n});"},{"caption":"<p>The SQL query string can contain parameter placeholders. A parameter \nplaceholder consists of '@' followed by the parameter name.</p>","code":"var query = {\n  sql: 'SELECT * FROM Singers WHERE name = @name',\n  params: {\n    name: 'Eddie Wilson'\n  }\n};\n\ndatabase.run(query, function(err, rows) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"database.run(query).then(function(data) {\n  var rows = data[0];\n});"}],"params":[{"name":"query","description":"<ul> <li>A SQL query or query object. See an <a href=\"https://cloud.google.com/spanner/docs/reference/rpc/google.spanner.v1#google.spanner.v1.ExecuteSqlRequest\">ExecuteSqlRequest</a>  object.</li> </ul> ","types":["string","object"],"optional":false,"nullable":false},{"name":"options","description":"<ul> <li><a href=\"https://cloud.google.com/spanner/docs/timestamp-bounds\">Transaction options</a>.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.exactStaleness","description":"<ul> <li>Executes all reads at the timestamp that is <code>exactStaleness</code> old.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"options.readTimestamp","description":"<ul> <li>Execute all reads at the given timestamp.</li> </ul> ","types":["date"],"optional":false,"nullable":false},{"name":"options.returnTimestamp","description":"<ul> <li>If <code>true</code>, returns the read timestamp.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"options.strong","description":"<ul> <li>Read at the timestamp where all previously committed transactions are visible.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.rows","description":"<ul> <li>Rows are returned as an array of objects. Each object has a <code>name</code> and <code>value</code> property. To get a serialized  object, call <code>toJSON()</code>.</li> </ul> ","types":["array[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"runStream","name":"runStream","type":"instance","description":"<p>Create a readable object stream to receive resulting rows from a SQL statement.</p>","source":"packages/spanner/src/database.js#L585","resources":[{},{}],"examples":[{"code":"var query = 'SELECT * FROM Singers';\n\ndatabase.runStream(query)\n  .on('error', function(err) {})\n  .on('data', function(row) {\n    // row = [\n    //   {\n    //     name: 'SingerId',\n    //     value: '1'\n    //   },\n    //   {\n    //     name: 'Name',\n    //     value: 'Eddie Wilson'\n    //   }\n    // ]\n  // ]\n  })\n  .on('end', function() {\n    // All results retrieved.\n  });"},{"caption":"<p>Rows are returned as an array of objects. Each object has a <code>name</code> and \n<code>value</code> property. To get a serialized object, call <code>toJSON()</code>.</p>","code":"database.runStream(query)\n  .on('error', function(err) {})\n  .on('data', function(row) {\n    // row.toJSON() = {\n    //   SingerId: '1',\n    //   Name: 'Eddie Wilson'\n    // }\n  })\n  .on('end', function() {\n    // All results retrieved.\n  });"},{"caption":"<p>The SQL query string can contain parameter placeholders. A parameter \nplaceholder consists of '@' followed by the parameter name.</p>","code":"var query = {\n  sql: 'SELECT * FROM Singers WHERE name = @name',\n  params: {\n    name: 'Eddie Wilson'\n  }\n};\n\ndatabase.runStream(query)\n  .on('error', function(err) {})\n  .on('data', function(row) {})\n  .on('end', function() {})"},{"caption":"<p>If you anticipate many results, you can end a stream early to prevent \nunnecessary processing and API requests.</p>","code":"database.runStream(query)\n  .on('data', function(row) {\n    this.end();\n  });"}],"params":[{"name":"query","description":"<ul> <li>A SQL query or query object. See an <a href=\"https://cloud.google.com/spanner/docs/reference/rpc/google.spanner.v1#google.spanner.v1.ExecuteSqlRequest\">ExecuteSqlRequest</a>  object.</li> </ul> ","types":["string","object"],"optional":false,"nullable":false},{"name":"query.params","description":"<ul> <li>A map of parameter name to values.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options","description":"<ul> <li><a href=\"https://cloud.google.com/spanner/docs/timestamp-bounds\">Transaction options</a>.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.exactStaleness","description":"<ul> <li>Executes all reads at the timestamp that is <code>exactStaleness</code> old.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"options.readTimestamp","description":"<ul> <li>Execute all reads at the given timestamp.</li> </ul> ","types":["date"],"optional":false,"nullable":false},{"name":"options.returnTimestamp","description":"<ul> <li>If <code>true</code>, returns the read timestamp.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"options.strong","description":"<ul> <li>Read at the timestamp where all previously committed transactions are visible.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["Stream"],"description":""}]},{"id":"runTransaction","name":"runTransaction","type":"instance","description":"<p>A transaction in Cloud Spanner is a set of reads and writes that execute atomically at a single logical point in time across columns, rows, and tables in a database.</p><p>The callback you provide to this function will become the &quot;run function&quot;. It will be executed with either an error or a <a data-custom-type=\"spanner/transaction\" data-method=\"\">spanner/transaction</a> object. The Transaction object will let you run queries and queue mutations until you are ready to <a data-custom-type=\"spanner/transaction\" data-method=\"commit\">spanner/transaction#commit</a>.</p><p>For a more complete listing of functionality available to a Transaction, see the <a data-custom-type=\"spanner/transaction\" data-method=\"\">spanner/transaction</a> API documentation. For a general overview of transactions within Cloud Spanner, see <a href=\"https://cloud.google.com/spanner/docs/transactions\">Transactions</a> from the official Cloud Spanner documentation.</p>","source":"packages/spanner/src/database.js#L739","resources":[{},{}],"examples":[{"code":"database.runTransaction(function(err, transaction) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  // Run a transactional query.\n  transaction.run('SELECT * FROM Singers', function(err, rows) {\n    if (err) {\n      // Error handling omitted.\n    }\n\n    // Queue a mutation (note that there is no callback passed to `insert`).\n    transaction.insert('Singers', {\n      SingerId: 'Id3b',\n      Name: 'Joe West'\n    });\n\n    // Commit the transaction.\n    transaction.commit(function(err) {\n      if (!err) {\n        // Transaction committed successfully.\n      }\n    });\n  });\n});"},{"caption":"<p>For read-only transactions, use the <code>transaction.end()</code> function to \nrelease the transaction.</p>","code":"var options = {\n  readOnly: true,\n  strong: true\n};\n\ndatabase.runTransaction(options, function(err, transaction) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  transaction.run('SELECT * FROM Singers', function(err, rows) {\n    if (err) {\n      // Error handling omitted.\n    }\n\n    // End the transaction. Note that no callback is provided.\n    transaction.end();\n  });\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"database.runTransaction()\n  .then(function(data) {\n    var transaction = data[0];\n\n    // Run a transactional query.\n    return transaction.run('SELECT * FROM Singers')\n      .then(function() {\n        // Queue a mutation (note there is no callback passed to `insert`).\n        transaction.insert('Singers', {\n          SingerId: 'Id3b',\n          Name: 'Joe West'\n        });\n\n        // Commit the transaction.\n        return transaction.commit();\n      });\n  })\n  .then(function() {\n    // Transaction committed successfully.\n  });"}],"params":[{"name":"options","description":"<ul> <li><a href=\"https://cloud.google.com/spanner/docs/timestamp-bounds\">Transaction options</a>.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.readOnly","description":"<ul> <li>Specifies if the transaction is read-only.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"options.exactStaleness","description":"<ul> <li>Executes all reads at the timestamp that is <code>exactStaleness</code> old.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"options.readTimestamp","description":"<ul> <li>Execute all reads at the given timestamp.</li> </ul> ","types":["date"],"optional":false,"nullable":false},{"name":"options.returnTimestamp","description":"<ul> <li>If <code>true</code>, returns the read timestamp.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"options.strong","description":"<ul> <li>Read at the timestamp where all previously committed transactions are visible.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"runFn","description":"<ul> <li>A function to execute in the context of a transaction.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"runFn.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"runFn.transaction","description":"<ul> <li>The Transaction object. The transaction has already been created, and is ready to be  queried and committed against.</li> </ul> ","types":["<a data-custom-type=\"spanner/transaction\" data-method=\"\">spanner/transaction</a>"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"table","name":"table","type":"instance","description":"<p>Get a reference to a Table object.</p>","source":"packages/spanner/src/database.js#L768","resources":[],"examples":[{"code":"var table = database.table('Singers');"}],"params":[{"name":"name","description":"<ul> <li>The name of the table.</li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[{"type":"Error","description":"<p>If a name is not provided.</p>"}],"returns":[{"types":["<a data-custom-type=\"spanner/table\" data-method=\"\">spanner/table</a>"],"description":"<ul> <li>A Table object.</li> </ul> "}]},{"id":"updateSchema","name":"updateSchema","type":"instance","description":"<p>Update the schema of the database by creating/altering/dropping tables, columns, indexes, etc.</p><p>This method immediately responds with an Operation object. Register event handlers for the &quot;error&quot; and &quot;complete&quot; events to see how the operation finishes. Follow along with the examples below.</p>","source":"packages/spanner/src/database.js#L831","resources":[{},{},{}],"examples":[{"code":"var statements = [\n  'CREATE TABLE Singers (' +\n  '  SingerId INT64 NOT NULL,' +\n  '  FirstName STRING(1024),' +\n  '  LastName STRING(1024),' +\n  '  SingerInfo BYTES(MAX),' +\n  ') PRIMARY KEY(SingerId)'\n];\n\ndatabase.setSchema(statements, function(err, operation, apiResponse) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  operation\n    .on('error', function(err) {})\n    .on('complete', function() {\n      // Database schema updated successfully.\n    });\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"database.setSchema(statements)\n  .then(function(data) {\n    var operation = data[0];\n    return operation.promise();\n  })\n  .then(function() {\n    // Database schema updated successfully.\n  });"}],"params":[{"name":"statements","description":"<ul> <li>An array of database DDL statements, or an  <a href=\"https://cloud.google.com/spanner/docs/reference/rpc/google.spanner.admin.database.v1#google.spanner.admin.database.v1.UpdateDatabaseDdlRequest\"><code>UpdateDatabaseDdlRequest</code> object</a>.</li> </ul> ","types":["string","string[]","object"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.operation","description":"<ul> <li>An operation object that can be used to check the status of the request.</li> </ul> ","types":["Operation"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]}],"path":"database.json"}