{"name":"Data Types","methods":[{"type":"instance","description":"<p><code>Any</code> contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.</p><p>Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.</p><p>Example 1: Pack and unpack a message in C++.</p><pre><code>Foo foo = ...; Any any; any.PackFrom(foo); ... if (any.UnpackTo(&amp;foo)) { ... } </code></pre><p>Example 2: Pack and unpack a message in Java.</p><pre><code>Foo foo = ...; Any any = Any.pack(foo); ... if (any.is(Foo.class)) { foo = any.unpack(Foo.class); } </code></pre><p> Example 3: Pack and unpack a message in Python.</p><pre><code>foo = Foo(...) any = Any() any.Pack(foo) ... if any.Is(Foo.DESCRIPTOR): any.Unpack(foo) ... </code></pre><p>The pack methods provided by protobuf library will by default use &#39;type.googleapis.com/full.type.name&#39; as the type URL and the unpack methods only use the fully qualified type name after the last &#39;/&#39; in the type URL, for example &quot;foo.bar.com/x/y.z&quot; will yield type name &quot;y.z&quot;.</p><h1>JSON</h1> <p>The JSON representation of an <code>Any</code> value uses the regular representation of the deserialized, embedded message, with an additional field <code>@type</code> which contains the type URL. Example:</p><pre><code>package google.profile; message Person { string first_name = 1; string last_name = 2; } { &quot;@type&quot;: &quot;type.googleapis.com/google.profile.Person&quot;, &quot;firstName&quot;: &lt;string&gt;, &quot;lastName&quot;: &lt;string&gt; } </code></pre><p>If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field <code>value</code> which holds the custom JSON in addition to the <code>@type</code> field. Example (for message {@link google.protobuf.Duration}):</p><pre><code>{ &quot;@type&quot;: &quot;type.googleapis.com/google.protobuf.Duration&quot;, &quot;value&quot;: &quot;1.212s&quot; } </code></pre>","source":"packages\\spanner\\src\\admin\\database\\v1\\doc\\doc_google_protobuf_any.js#L122","resources":[],"examples":[],"params":[{"name":"typeUrl","description":"<p> A URL/resource name whose content describes the type of the  serialized protocol buffer message.</p><p> For URLs which use the scheme <code>http</code>, <code>https</code>, or no scheme, the  following restrictions and interpretations apply:</p><ul> <li>If no scheme is provided, <code>https</code> is assumed.</li> <li>The last segment of the URL&#39;s path must represent the fully qualified name of the type (as in <code>path/google.protobuf.Duration</code>). The name should be in a canonical form (e.g., leading &quot;.&quot; is not accepted).</li> <li>An HTTP GET on the URL must yield a {@link google.protobuf.Type} value in binary format, or produce an error.</li> <li><p>Applications are allowed to cache lookup results based on the URL, or have them precompiled into a binary to avoid any lookup. Therefore, binary compatibility needs to be preserved on changes to types. (Use versioned type names to manage breaking changes.)</p><p>Schemes other than <code>http</code>, <code>https</code> (or the empty scheme) might be used with implementation specific semantics.</p></li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"value","description":"<p> Must be a valid serialized protocol buffer of the above specified type.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"type":"instance","description":"<p>The <code>Status</code> type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by <a href=\"https://github.com/grpc\">gRPC</a>. The error model is designed to be:</p><ul> <li>Simple to use and understand for most users</li> <li>Flexible enough to meet unexpected needs</li> </ul> <h1>Overview</h1> <p>The <code>Status</code> message contains three pieces of data: error code, error message, and error details. The error code should be an enum value of {@link google.rpc.Code}, but it may accept additional error codes if needed. The error message should be a developer-facing English message that helps developers <em>understand</em> and <em>resolve</em> the error. If a localized user-facing error message is needed, put the localized message in the error details or localize it in the client. The optional error details may contain arbitrary information about the error. There is a predefined set of error detail types in the package <code>google.rpc</code> which can be used for common error conditions.</p><h1>Language mapping</h1> <p>The <code>Status</code> message is the logical representation of the error model, but it is not necessarily the actual wire format. When the <code>Status</code> message is exposed in different client libraries and different wire protocols, it can be mapped differently. For example, it will likely be mapped to some exceptions in Java, but more likely mapped to some error codes in C.</p><h1>Other uses</h1> <p>The error model and the <code>Status</code> message can be used in a variety of environments, either with or without APIs, to provide a consistent developer experience across different environments.</p><p>Example uses of this error model include:</p><ul> <li><p>Partial errors. If a service needs to return partial errors to the client,  it may embed the <code>Status</code> in the normal response to indicate the partial  errors.</p></li> <li><p>Workflow errors. A typical workflow has multiple steps. Each step may  have a <code>Status</code> message for error reporting purpose.</p></li> <li><p>Batch operations. If a client uses batch request and batch response, the  <code>Status</code> message should be used directly inside batch response, one for  each error sub-response.</p></li> <li><p>Asynchronous operations. If an API call embeds asynchronous operation  results in its response, the status of those operations should be  represented directly using the <code>Status</code> message.</p></li> <li><p>Logging. If some API errors are stored in logs, the message <code>Status</code> could  be used directly after any stripping needed for security/privacy reasons.</p></li> </ul> ","source":"packages\\spanner\\src\\admin\\database\\v1\\doc\\doc_google_rpc_status.js#L93","resources":[],"examples":[],"params":[{"name":"code","description":"<p> The status code, which should be an enum value of {@link google.rpc.Code}.</p>","types":["number"],"optional":false,"nullable":false},{"name":"message","description":"<p> A developer-facing error message, which should be in English. Any  user-facing error message should be localized and sent in the  {@link google.rpc.Status.details} field, or localized by the client.</p>","types":["string"],"optional":false,"nullable":false},{"name":"details","description":"<p> A list of messages that carry the error details. There will be a  common set of message types for APIs to use.</p><p> This object should have the same structure as google.protobuf.Any</p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Policy","name":"Policy","type":"instance","description":"<p>Defines an Identity and Access Management (IAM) policy. It is used to specify access control policies for Cloud Platform resources.</p><p>A <code>Policy</code> consists of a list of <code>bindings</code>. A <code>Binding</code> binds a list of <code>members</code> to a <code>role</code>, where the members can be user accounts, Google groups, Google domains, and service accounts. A <code>role</code> is a named list of permissions defined by IAM.</p><p><strong>Example</strong></p><pre><code>{ &quot;bindings&quot;: [ { &quot;role&quot;: &quot;roles/owner&quot;, &quot;members&quot;: [ &quot;user:mike@example.com&quot;, &quot;group:admins@example.com&quot;, &quot;domain:google.com&quot;, &quot;serviceAccount:my-other-app@appspot.gserviceaccount.com&quot;, ] }, { &quot;role&quot;: &quot;roles/viewer&quot;, &quot;members&quot;: [&quot;user:sean@example.com&quot;] } ] } </code></pre><p>For a description of IAM and its features, see the <a href=\"https://cloud.google.com/iam\">IAM developer&#39;s guide</a>.</p>","source":"packages\\spanner\\src\\admin\\database\\v1\\doc\\doc_policy.js#L80","resources":[],"examples":[],"params":[{"name":"version","description":"<p> Version of the <code>Policy</code>. The default version is 0.</p>","types":["number"],"optional":false,"nullable":false},{"name":"bindings","description":"<p> Associates a list of <code>members</code> to a <code>role</code>.  Multiple <code>bindings</code> must not be specified for the same <code>role</code>.  <code>bindings</code> with no members will result in an error.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Binding'\n        })\">Binding</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"etag","description":"<p> <code>etag</code> is used for optimistic concurrency control as a way to help  prevent simultaneous updates of a policy from overwriting each other.  It is strongly suggested that systems make use of the <code>etag</code> in the  read-modify-write cycle to perform policy updates in order to avoid race  conditions: An <code>etag</code> is returned in the response to <code>getIamPolicy</code>, and  systems are expected to put that etag in the request to <code>setIamPolicy</code> to  ensure that their change will be applied to the same version of the policy.</p><p> If no <code>etag</code> is provided in the call to <code>setIamPolicy</code>, then the existing  policy is overwritten blindly.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Binding","name":"Binding","type":"instance","description":"<p>Associates <code>members</code> with a <code>role</code>.</p>","source":"packages\\spanner\\src\\admin\\database\\v1\\doc\\doc_policy.js#L118","resources":[],"examples":[],"params":[{"name":"role","description":"<p> Role that is assigned to <code>members</code>.  For example, <code>roles/viewer</code>, <code>roles/editor</code>, or <code>roles/owner</code>.  Required</p>","types":["string"],"optional":false,"nullable":false},{"name":"members","description":"<p> Specifies the identities requesting access for a Cloud Platform resource.  <code>members</code> can have the following values:</p><ul> <li><p><code>allUsers</code>: A special identifier that represents anyone who is  on the internet; with or without a Google account.</p></li> <li><p><code>allAuthenticatedUsers</code>: A special identifier that represents anyone  who is authenticated with a Google account or a service account.</p></li> <li><p><code>user:{emailid}</code>: An email address that represents a specific Google  account. For example, <code>alice@gmail.com</code> or <code>joe@example.com</code>.</p></li> </ul> <ul> <li><p><code>serviceAccount:{emailid}</code>: An email address that represents a service  account. For example, <code>my-other-app@appspot.gserviceaccount.com</code>.</p></li> <li><p><code>group:{emailid}</code>: An email address that represents a Google group.  For example, <code>admins@example.com</code>.</p></li> <li><p><code>domain:{domain}</code>: A Google Apps domain name that represents all the  users of that domain. For example, <code>google.com</code> or <code>example.com</code>.</p></li> </ul> ","types":["string[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"PolicyDelta","name":"PolicyDelta","type":"instance","description":"<p>The difference delta between two policies.</p>","source":"packages\\spanner\\src\\admin\\database\\v1\\doc\\doc_policy.js#L133","resources":[],"examples":[],"params":[{"name":"bindingDeltas","description":"<p> The delta for Bindings between two policies.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BindingDelta'\n        })\">BindingDelta</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"BindingDelta","name":"BindingDelta","type":"instance","description":"<p>One delta entry for Binding. Each individual change (only one member in each entry) to a binding will be a separate entry.</p>","source":"packages\\spanner\\src\\admin\\database\\v1\\doc\\doc_policy.js#L160","resources":[],"examples":[],"params":[{"name":"action","description":"<p> The action that was performed on a Binding.  Required</p><p> The number should be among the values of <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Action'\n        })\">Action</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"role","description":"<p> Role that is assigned to <code>members</code>.  For example, <code>roles/viewer</code>, <code>roles/editor</code>, or <code>roles/owner</code>.  Required</p>","types":["string"],"optional":false,"nullable":false},{"name":"member","description":"<p> A single identity requesting access for a Cloud Platform resource.  Follows the same format of Binding.members.  Required</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Action","name":"Action","type":"instance","description":"<p>The type of action performed on a Binding in a policy.</p>","source":"packages\\spanner\\src\\admin\\database\\v1\\doc\\doc_policy.js#L168","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"Database","name":"Database","type":"instance","description":"<p>A Cloud Spanner database.</p>","source":"packages\\spanner\\src\\admin\\database\\v1\\doc\\doc_spanner_database_admin.js#L40","resources":[],"examples":[],"params":[{"name":"name","description":"<p> Required. The name of the database. Values are of the form  <code>projects/&lt;project&gt;/instances/&lt;instance&gt;/databases/&lt;database&gt;</code>,  where <code>&lt;database&gt;</code> is as specified in the <code>CREATE DATABASE</code>  statement. This name can be passed to other API methods to  identify the database.</p>","types":["string"],"optional":false,"nullable":false},{"name":"state","description":"<p> Output only. The current database state.</p><p> The number should be among the values of <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'State'\n        })\">State</a></p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"State","name":"State","type":"instance","description":"<p>Indicates the current state of the database.</p>","source":"packages\\spanner\\src\\admin\\database\\v1\\doc\\doc_spanner_database_admin.js#L48","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"ListDatabasesRequest","name":"ListDatabasesRequest","type":"instance","description":"","source":"packages\\spanner\\src\\admin\\database\\v1\\doc\\doc_spanner_database_admin.js#L87","resources":[],"examples":[],"params":[{"name":"parent","description":"<p> Required. The instance whose databases should be listed.  Values are of the form <code>projects/&lt;project&gt;/instances/&lt;instance&gt;</code>.</p>","types":["string"],"optional":false,"nullable":false},{"name":"pageSize","description":"<p> Number of databases to be returned in the response. If 0 or less,  defaults to the server&#39;s maximum allowed page size.</p>","types":["number"],"optional":false,"nullable":false},{"name":"pageToken","description":"<p> If non-empty, <code>page_token</code> should contain a  {@link next_page_token} from a  previous {@link ListDatabasesResponse}.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ListDatabasesResponse","name":"ListDatabasesResponse","type":"instance","description":"","source":"packages\\spanner\\src\\admin\\database\\v1\\doc\\doc_spanner_database_admin.js#L107","resources":[],"examples":[],"params":[{"name":"databases","description":"<p> Databases that matched the request.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Database'\n        })\">Database</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"nextPageToken","description":"<p> <code>next_page_token</code> can be sent in a subsequent  {@link ListDatabases} call to fetch more  of the matching databases.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"CreateDatabaseRequest","name":"CreateDatabaseRequest","type":"instance","description":"","source":"packages\\spanner\\src\\admin\\database\\v1\\doc\\doc_spanner_database_admin.js#L132","resources":[],"examples":[],"params":[{"name":"parent","description":"<p> Required. The name of the instance that will serve the new database.  Values are of the form <code>projects/&lt;project&gt;/instances/&lt;instance&gt;</code>.</p>","types":["string"],"optional":false,"nullable":false},{"name":"createStatement","description":"<p> Required. A <code>CREATE DATABASE</code> statement, which specifies the ID of the  new database. The database ID must conform to the regular expression  <code>[a-z][a-z0-9_\\-]*[a-z0-9]</code> and be between 2 and 30 characters in length.</p>","types":["string"],"optional":false,"nullable":false},{"name":"extraStatements","description":"<p> An optional list of DDL statements to run inside the newly created  database. Statements can create tables, indexes, etc. These  statements execute atomically with the creation of the database:  if there is an error in any statement, the database is not created.</p>","types":["string[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"CreateDatabaseMetadata","name":"CreateDatabaseMetadata","type":"instance","description":"<p>Metadata type for the operation returned by {@link CreateDatabase}.</p>","source":"packages\\spanner\\src\\admin\\database\\v1\\doc\\doc_spanner_database_admin.js#L146","resources":[],"examples":[],"params":[{"name":"database","description":"<p> The database being created.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"GetDatabaseRequest","name":"GetDatabaseRequest","type":"instance","description":"","source":"packages\\spanner\\src\\admin\\database\\v1\\doc\\doc_spanner_database_admin.js#L160","resources":[],"examples":[],"params":[{"name":"name","description":"<p> Required. The name of the requested database. Values are of the form  <code>projects/&lt;project&gt;/instances/&lt;instance&gt;/databases/&lt;database&gt;</code>.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"UpdateDatabaseDdlRequest","name":"UpdateDatabaseDdlRequest","type":"instance","description":"","source":"packages\\spanner\\src\\admin\\database\\v1\\doc\\doc_spanner_database_admin.js#L212","resources":[],"examples":[],"params":[{"name":"database","description":"<p> Required. The database to update.</p>","types":["string"],"optional":false,"nullable":false},{"name":"statements","description":"<p> DDL statements to be applied to the database.</p>","types":["string[]"],"optional":false,"nullable":false},{"name":"operationId","description":"<p> If empty, the new update request is assigned an  automatically-generated operation ID. Otherwise, <code>operation_id</code>  is used to construct the name of the resulting  {@link Operation}.</p><p> Specifying an explicit operation ID simplifies determining  whether the statements were executed in the event that the  {@link UpdateDatabaseDdl} call is replayed,  or the return value is otherwise lost: the {@link database} and  <code>operation_id</code> fields can be combined to form the  {@link name} of the resulting  {@link longrunning.Operation}: <code>&lt;database&gt;/operations/&lt;operation_id&gt;</code>.</p><p> <code>operation_id</code> should be unique within the database, and must be  a valid identifier: <code>[a-z][a-z0-9_]*</code>. Note that  automatically-generated operation IDs always begin with an  underscore. If the named operation already exists,  {@link UpdateDatabaseDdl} returns  <code>ALREADY_EXISTS</code>.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"UpdateDatabaseDdlMetadata","name":"UpdateDatabaseDdlMetadata","type":"instance","description":"<p>Metadata type for the operation returned by {@link UpdateDatabaseDdl}.</p>","source":"packages\\spanner\\src\\admin\\database\\v1\\doc\\doc_spanner_database_admin.js#L237","resources":[],"examples":[],"params":[{"name":"database","description":"<p> The database being modified.</p>","types":["string"],"optional":false,"nullable":false},{"name":"statements","description":"<p> For an update this list contains all the statements. For an  individual statement, this list contains only that statement.</p>","types":["string[]"],"optional":false,"nullable":false},{"name":"commitTimestamps","description":"<p> Reports the commit timestamps of all statements that have  succeeded so far, where <code>commit_timestamps[i]</code> is the commit  timestamp for the statement <code>statements[i]</code>.</p><p> This object should have the same structure as google.protobuf.Timestamp</p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"DropDatabaseRequest","name":"DropDatabaseRequest","type":"instance","description":"","source":"packages\\spanner\\src\\admin\\database\\v1\\doc\\doc_spanner_database_admin.js#L250","resources":[],"examples":[],"params":[{"name":"database","description":"<p> Required. The database to be dropped.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"GetDatabaseDdlRequest","name":"GetDatabaseDdlRequest","type":"instance","description":"","source":"packages\\spanner\\src\\admin\\database\\v1\\doc\\doc_spanner_database_admin.js#L263","resources":[],"examples":[],"params":[{"name":"database","description":"<p> Required. The database whose schema we wish to get.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"GetDatabaseDdlResponse","name":"GetDatabaseDdlResponse","type":"instance","description":"","source":"packages\\spanner\\src\\admin\\database\\v1\\doc\\doc_spanner_database_admin.js#L277","resources":[],"examples":[],"params":[{"name":"statements","description":"<p> A list of formatted DDL statements defining the schema of the database  specified in the request.</p>","types":["string[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"type":"instance","description":"<p><code>Any</code> contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.</p><p>Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.</p><p>Example 1: Pack and unpack a message in C++.</p><pre><code>Foo foo = ...; Any any; any.PackFrom(foo); ... if (any.UnpackTo(&amp;foo)) { ... } </code></pre><p>Example 2: Pack and unpack a message in Java.</p><pre><code>Foo foo = ...; Any any = Any.pack(foo); ... if (any.is(Foo.class)) { foo = any.unpack(Foo.class); } </code></pre><p> Example 3: Pack and unpack a message in Python.</p><pre><code>foo = Foo(...) any = Any() any.Pack(foo) ... if any.Is(Foo.DESCRIPTOR): any.Unpack(foo) ... </code></pre><p>The pack methods provided by protobuf library will by default use &#39;type.googleapis.com/full.type.name&#39; as the type URL and the unpack methods only use the fully qualified type name after the last &#39;/&#39; in the type URL, for example &quot;foo.bar.com/x/y.z&quot; will yield type name &quot;y.z&quot;.</p><h1>JSON</h1> <p>The JSON representation of an <code>Any</code> value uses the regular representation of the deserialized, embedded message, with an additional field <code>@type</code> which contains the type URL. Example:</p><pre><code>package google.profile; message Person { string first_name = 1; string last_name = 2; } { &quot;@type&quot;: &quot;type.googleapis.com/google.profile.Person&quot;, &quot;firstName&quot;: &lt;string&gt;, &quot;lastName&quot;: &lt;string&gt; } </code></pre><p>If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field <code>value</code> which holds the custom JSON in addition to the <code>@type</code> field. Example (for message {@link google.protobuf.Duration}):</p><pre><code>{ &quot;@type&quot;: &quot;type.googleapis.com/google.protobuf.Duration&quot;, &quot;value&quot;: &quot;1.212s&quot; } </code></pre>","source":"packages\\spanner\\src\\admin\\instance\\v1\\doc\\doc_google_protobuf_any.js#L122","resources":[],"examples":[],"params":[{"name":"typeUrl","description":"<p> A URL/resource name whose content describes the type of the  serialized protocol buffer message.</p><p> For URLs which use the scheme <code>http</code>, <code>https</code>, or no scheme, the  following restrictions and interpretations apply:</p><ul> <li>If no scheme is provided, <code>https</code> is assumed.</li> <li>The last segment of the URL&#39;s path must represent the fully qualified name of the type (as in <code>path/google.protobuf.Duration</code>). The name should be in a canonical form (e.g., leading &quot;.&quot; is not accepted).</li> <li>An HTTP GET on the URL must yield a {@link google.protobuf.Type} value in binary format, or produce an error.</li> <li><p>Applications are allowed to cache lookup results based on the URL, or have them precompiled into a binary to avoid any lookup. Therefore, binary compatibility needs to be preserved on changes to types. (Use versioned type names to manage breaking changes.)</p><p>Schemes other than <code>http</code>, <code>https</code> (or the empty scheme) might be used with implementation specific semantics.</p></li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"value","description":"<p> Must be a valid serialized protocol buffer of the above specified type.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"type":"instance","description":"<p><code>FieldMask</code> represents a set of symbolic field paths, for example:</p><pre><code>paths: &quot;f.a&quot; paths: &quot;f.b.d&quot; </code></pre><p>Here <code>f</code> represents a field in some root message, <code>a</code> and <code>b</code> fields in the message found in <code>f</code>, and <code>d</code> a field found in the message in <code>f.b</code>.</p><p>Field masks are used to specify a subset of fields that should be returned by a get operation or modified by an update operation. Field masks also have a custom JSON encoding (see below).</p><h1>Field Masks in Projections</h1> <p>When used in the context of a projection, a response message or sub-message is filtered by the API to only contain those fields as specified in the mask. For example, if the mask in the previous example is applied to a response message as follows:</p><pre><code>f { a : 22 b { d : 1 x : 2 } y : 13 } z: 8 </code></pre><p>The result will not contain specific values for fields x,y and z (their value will be set to the default, and omitted in proto text output):</p><pre><code>f { a : 22 b { d : 1 } } </code></pre><p>A repeated field is not allowed except at the last position of a paths string.</p><p>If a FieldMask object is not present in a get operation, the operation applies to all fields (as if a FieldMask of all fields had been specified).</p><p>Note that a field mask does not necessarily apply to the top-level response message. In case of a REST get operation, the field mask applies directly to the response, but in case of a REST list operation, the mask instead applies to each individual message in the returned resource list. In case of a REST custom method, other definitions may be used. Where the mask applies will be clearly documented together with its declaration in the API. In any case, the effect on the returned resource/resources is required behavior for APIs.</p><h1>Field Masks in Update Operations</h1> <p>A field mask in update operations specifies which fields of the targeted resource are going to be updated. The API is required to only change the values of the fields as specified in the mask and leave the others untouched. If a resource is passed in to describe the updated values, the API ignores the values of all fields not covered by the mask.</p><p>If a repeated field is specified for an update operation, the existing repeated values in the target resource will be overwritten by the new values. Note that a repeated field is only allowed in the last position of a <code>paths</code> string.</p><p>If a sub-message is specified in the last position of the field mask for an update operation, then the existing sub-message in the target resource is overwritten. Given the target message:</p><pre><code>f { b { d : 1 x : 2 } c : 1 } </code></pre><p>And an update message:</p><pre><code>f { b { d : 10 } } </code></pre><p>then if the field mask is:</p><p> paths: &quot;f.b&quot;</p><p>then the result will be:</p><pre><code>f { b { d : 10 } c : 1 } </code></pre><p>However, if the update mask was:</p><p> paths: &quot;f.b.d&quot;</p><p>then the result would be:</p><pre><code>f { b { d : 10 x : 2 } c : 1 } </code></pre><p>In order to reset a field&#39;s value to the default, the field must be in the mask and set to the default value in the provided resource. Hence, in order to reset all fields of a resource, provide a default instance of the resource and set all fields in the mask, or do not provide a mask as described below.</p><p>If a field mask is not present on update, the operation applies to all fields (as if a field mask of all fields has been specified). Note that in the presence of schema evolution, this may mean that fields the client does not know and has therefore not filled into the request will be reset to their default. If this is unwanted behavior, a specific service may require a client to always specify a field mask, producing an error if not.</p><p>As with get operations, the location of the resource which describes the updated values in the request message depends on the operation kind. In any case, the effect of the field mask is required to be honored by the API.</p><h2>Considerations for HTTP REST</h2> <p>The HTTP kind of an update operation which uses a field mask must be set to PATCH instead of PUT in order to satisfy HTTP semantics (PUT must only be used for full updates).</p><h1>JSON Encoding of Field Masks</h1> <p>In JSON, a field mask is encoded as a single string where paths are separated by a comma. Fields name in each path are converted to/from lower-camel naming conventions.</p><p>As an example, consider the following message declarations:</p><pre><code>message Profile { User user = 1; Photo photo = 2; } message User { string display_name = 1; string address = 2; } </code></pre><p>In proto a field mask for <code>Profile</code> may look as such:</p><pre><code>mask { paths: &quot;user.display_name&quot; paths: &quot;photo&quot; } </code></pre><p>In JSON, the same mask is represented as below:</p><pre><code>{ mask: &quot;user.displayName,photo&quot; } </code></pre><h1>Field Masks and Oneof Fields</h1> <p>Field masks treat fields in oneofs just as regular fields. Consider the following message:</p><pre><code>message SampleMessage { oneof test_oneof { string name = 4; SubMessage sub_message = 9; } } </code></pre><p>The field mask can be:</p><pre><code>mask { paths: &quot;name&quot; } </code></pre><p>Or:</p><pre><code>mask { paths: &quot;sub_message&quot; } </code></pre><p>Note that oneof type names (&quot;test_oneof&quot; in this case) cannot be used in paths.</p>","source":"packages\\spanner\\src\\admin\\instance\\v1\\doc\\doc_google_protobuf_field_mask.js#L231","resources":[],"examples":[],"params":[{"name":"paths","description":"<p> The set of field mask paths.</p>","types":["string[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"type":"instance","description":"<p>The <code>Status</code> type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by <a href=\"https://github.com/grpc\">gRPC</a>. The error model is designed to be:</p><ul> <li>Simple to use and understand for most users</li> <li>Flexible enough to meet unexpected needs</li> </ul> <h1>Overview</h1> <p>The <code>Status</code> message contains three pieces of data: error code, error message, and error details. The error code should be an enum value of {@link google.rpc.Code}, but it may accept additional error codes if needed. The error message should be a developer-facing English message that helps developers <em>understand</em> and <em>resolve</em> the error. If a localized user-facing error message is needed, put the localized message in the error details or localize it in the client. The optional error details may contain arbitrary information about the error. There is a predefined set of error detail types in the package <code>google.rpc</code> which can be used for common error conditions.</p><h1>Language mapping</h1> <p>The <code>Status</code> message is the logical representation of the error model, but it is not necessarily the actual wire format. When the <code>Status</code> message is exposed in different client libraries and different wire protocols, it can be mapped differently. For example, it will likely be mapped to some exceptions in Java, but more likely mapped to some error codes in C.</p><h1>Other uses</h1> <p>The error model and the <code>Status</code> message can be used in a variety of environments, either with or without APIs, to provide a consistent developer experience across different environments.</p><p>Example uses of this error model include:</p><ul> <li><p>Partial errors. If a service needs to return partial errors to the client,  it may embed the <code>Status</code> in the normal response to indicate the partial  errors.</p></li> <li><p>Workflow errors. A typical workflow has multiple steps. Each step may  have a <code>Status</code> message for error reporting purpose.</p></li> <li><p>Batch operations. If a client uses batch request and batch response, the  <code>Status</code> message should be used directly inside batch response, one for  each error sub-response.</p></li> <li><p>Asynchronous operations. If an API call embeds asynchronous operation  results in its response, the status of those operations should be  represented directly using the <code>Status</code> message.</p></li> <li><p>Logging. If some API errors are stored in logs, the message <code>Status</code> could  be used directly after any stripping needed for security/privacy reasons.</p></li> </ul> ","source":"packages\\spanner\\src\\admin\\instance\\v1\\doc\\doc_google_rpc_status.js#L93","resources":[],"examples":[],"params":[{"name":"code","description":"<p> The status code, which should be an enum value of {@link google.rpc.Code}.</p>","types":["number"],"optional":false,"nullable":false},{"name":"message","description":"<p> A developer-facing error message, which should be in English. Any  user-facing error message should be localized and sent in the  {@link google.rpc.Status.details} field, or localized by the client.</p>","types":["string"],"optional":false,"nullable":false},{"name":"details","description":"<p> A list of messages that carry the error details. There will be a  common set of message types for APIs to use.</p><p> This object should have the same structure as google.protobuf.Any</p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Policy","name":"Policy","type":"instance","description":"<p>Defines an Identity and Access Management (IAM) policy. It is used to specify access control policies for Cloud Platform resources.</p><p>A <code>Policy</code> consists of a list of <code>bindings</code>. A <code>Binding</code> binds a list of <code>members</code> to a <code>role</code>, where the members can be user accounts, Google groups, Google domains, and service accounts. A <code>role</code> is a named list of permissions defined by IAM.</p><p><strong>Example</strong></p><pre><code>{ &quot;bindings&quot;: [ { &quot;role&quot;: &quot;roles/owner&quot;, &quot;members&quot;: [ &quot;user:mike@example.com&quot;, &quot;group:admins@example.com&quot;, &quot;domain:google.com&quot;, &quot;serviceAccount:my-other-app@appspot.gserviceaccount.com&quot;, ] }, { &quot;role&quot;: &quot;roles/viewer&quot;, &quot;members&quot;: [&quot;user:sean@example.com&quot;] } ] } </code></pre><p>For a description of IAM and its features, see the <a href=\"https://cloud.google.com/iam\">IAM developer&#39;s guide</a>.</p>","source":"packages\\spanner\\src\\admin\\instance\\v1\\doc\\doc_policy.js#L80","resources":[],"examples":[],"params":[{"name":"version","description":"<p> Version of the <code>Policy</code>. The default version is 0.</p>","types":["number"],"optional":false,"nullable":false},{"name":"bindings","description":"<p> Associates a list of <code>members</code> to a <code>role</code>.  Multiple <code>bindings</code> must not be specified for the same <code>role</code>.  <code>bindings</code> with no members will result in an error.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Binding'\n        })\">Binding</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"etag","description":"<p> <code>etag</code> is used for optimistic concurrency control as a way to help  prevent simultaneous updates of a policy from overwriting each other.  It is strongly suggested that systems make use of the <code>etag</code> in the  read-modify-write cycle to perform policy updates in order to avoid race  conditions: An <code>etag</code> is returned in the response to <code>getIamPolicy</code>, and  systems are expected to put that etag in the request to <code>setIamPolicy</code> to  ensure that their change will be applied to the same version of the policy.</p><p> If no <code>etag</code> is provided in the call to <code>setIamPolicy</code>, then the existing  policy is overwritten blindly.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Binding","name":"Binding","type":"instance","description":"<p>Associates <code>members</code> with a <code>role</code>.</p>","source":"packages\\spanner\\src\\admin\\instance\\v1\\doc\\doc_policy.js#L118","resources":[],"examples":[],"params":[{"name":"role","description":"<p> Role that is assigned to <code>members</code>.  For example, <code>roles/viewer</code>, <code>roles/editor</code>, or <code>roles/owner</code>.  Required</p>","types":["string"],"optional":false,"nullable":false},{"name":"members","description":"<p> Specifies the identities requesting access for a Cloud Platform resource.  <code>members</code> can have the following values:</p><ul> <li><p><code>allUsers</code>: A special identifier that represents anyone who is  on the internet; with or without a Google account.</p></li> <li><p><code>allAuthenticatedUsers</code>: A special identifier that represents anyone  who is authenticated with a Google account or a service account.</p></li> <li><p><code>user:{emailid}</code>: An email address that represents a specific Google  account. For example, <code>alice@gmail.com</code> or <code>joe@example.com</code>.</p></li> </ul> <ul> <li><p><code>serviceAccount:{emailid}</code>: An email address that represents a service  account. For example, <code>my-other-app@appspot.gserviceaccount.com</code>.</p></li> <li><p><code>group:{emailid}</code>: An email address that represents a Google group.  For example, <code>admins@example.com</code>.</p></li> <li><p><code>domain:{domain}</code>: A Google Apps domain name that represents all the  users of that domain. For example, <code>google.com</code> or <code>example.com</code>.</p></li> </ul> ","types":["string[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"PolicyDelta","name":"PolicyDelta","type":"instance","description":"<p>The difference delta between two policies.</p>","source":"packages\\spanner\\src\\admin\\instance\\v1\\doc\\doc_policy.js#L133","resources":[],"examples":[],"params":[{"name":"bindingDeltas","description":"<p> The delta for Bindings between two policies.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BindingDelta'\n        })\">BindingDelta</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"BindingDelta","name":"BindingDelta","type":"instance","description":"<p>One delta entry for Binding. Each individual change (only one member in each entry) to a binding will be a separate entry.</p>","source":"packages\\spanner\\src\\admin\\instance\\v1\\doc\\doc_policy.js#L160","resources":[],"examples":[],"params":[{"name":"action","description":"<p> The action that was performed on a Binding.  Required</p><p> The number should be among the values of <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Action'\n        })\">Action</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"role","description":"<p> Role that is assigned to <code>members</code>.  For example, <code>roles/viewer</code>, <code>roles/editor</code>, or <code>roles/owner</code>.  Required</p>","types":["string"],"optional":false,"nullable":false},{"name":"member","description":"<p> A single identity requesting access for a Cloud Platform resource.  Follows the same format of Binding.members.  Required</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Action","name":"Action","type":"instance","description":"<p>The type of action performed on a Binding in a policy.</p>","source":"packages\\spanner\\src\\admin\\instance\\v1\\doc\\doc_policy.js#L168","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"InstanceConfig","name":"InstanceConfig","type":"instance","description":"<p>A possible configuration for a Cloud Spanner instance. Configurations define the geographic placement of nodes and their replication.</p>","source":"packages\\spanner\\src\\admin\\instance\\v1\\doc\\doc_spanner_instance_admin.js#L37","resources":[],"examples":[],"params":[{"name":"name","description":"<p> A unique identifier for the instance configuration. Values  are of the form  <code>projects/&lt;project&gt;/instanceConfigs/[a-z][-a-z0-9]*</code></p>","types":["string"],"optional":false,"nullable":false},{"name":"displayName","description":"<p> The name of this instance configuration as it appears in UIs.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Instance","name":"Instance","type":"instance","description":"<p>An isolated set of Cloud Spanner resources on which databases can be hosted.</p>","source":"packages\\spanner\\src\\admin\\instance\\v1\\doc\\doc_spanner_instance_admin.js#L98","resources":[],"examples":[],"params":[{"name":"name","description":"<p> Required. A unique identifier for the instance, which cannot be changed  after the instance is created. Values are of the form  <code>projects/&lt;project&gt;/instances/[a-z][-a-z0-9]*[a-z0-9]</code>. The final  segment of the name must be between 6 and 30 characters in length.</p>","types":["string"],"optional":false,"nullable":false},{"name":"config","description":"<p> Required. The name of the instance&#39;s configuration. Values are of the form  <code>projects/&lt;project&gt;/instanceConfigs/&lt;configuration&gt;</code>. See  also {@link InstanceConfig} and  {@link ListInstanceConfigs}.</p>","types":["string"],"optional":false,"nullable":false},{"name":"displayName","description":"<p> Required. The descriptive name for this instance as it appears in UIs.  Must be unique per project and between 4 and 30 characters in length.</p>","types":["string"],"optional":false,"nullable":false},{"name":"nodeCount","description":"<p> Required. The number of nodes allocated to this instance.</p>","types":["number"],"optional":false,"nullable":false},{"name":"state","description":"<p> Output only. The current instance state. For  {@link CreateInstance}, the state must be  either omitted or set to <code>CREATING</code>. For  {@link UpdateInstance}, the state must be  either omitted or set to <code>READY</code>.</p><p> The number should be among the values of <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'State'\n        })\">State</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"labels","description":"<p> Cloud Labels are a flexible and lightweight mechanism for organizing cloud  resources into groups that reflect a customer&#39;s organizational needs and  deployment strategies. Cloud Labels can be used to filter collections of  resources. They can be used to control how resource metrics are aggregated.  And they can be used as arguments to policy management rules (e.g. route,  firewall, load balancing, etc.).</p><ul> <li>Label keys must be between 1 and 63 characters long and must conform to the following regular expression: <code>[a-z](https://cloud.google.com[-a-z0-9]*[a-z0-9])?</code>.</li> <li>Label values must be between 0 and 63 characters long and must conform to the regular expression <code>([a-z](https://cloud.google.com[-a-z0-9]*[a-z0-9])?)?</code>.</li> <li><p>No more than 64 labels can be associated with a given resource.</p><p>See <a href=\"https://goo.gl/xmQnxf\">https://goo.gl/xmQnxf</a> for more information on and examples of labels.</p><p>If you plan to use labels in your own code, please note that additional characters may be allowed in the future. And so you are advised to use an internal label representation, such as JSON, which doesn&#39;t rely upon specific characters being disallowed. For example, representing labels as the string: name + &quot;<em>&quot; + value would prove problematic if we were to allow &quot;</em>&quot; in a future release.</p></li> </ul> ","types":["Object.<string, string>"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"State","name":"State","type":"instance","description":"<p>Indicates the current state of the instance.</p>","source":"packages\\spanner\\src\\admin\\instance\\v1\\doc\\doc_spanner_instance_admin.js#L106","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"ListInstanceConfigsRequest","name":"ListInstanceConfigsRequest","type":"instance","description":"","source":"packages\\spanner\\src\\admin\\instance\\v1\\doc\\doc_spanner_instance_admin.js#L148","resources":[],"examples":[],"params":[{"name":"parent","description":"<p> Required. The name of the project for which a list of supported instance  configurations is requested. Values are of the form  <code>projects/&lt;project&gt;</code>.</p>","types":["string"],"optional":false,"nullable":false},{"name":"pageSize","description":"<p> Number of instance configurations to be returned in the response. If 0 or  less, defaults to the server&#39;s maximum allowed page size.</p>","types":["number"],"optional":false,"nullable":false},{"name":"pageToken","description":"<p> If non-empty, <code>page_token</code> should contain a  {@link next_page_token}  from a previous {@link ListInstanceConfigsResponse}.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ListInstanceConfigsResponse","name":"ListInstanceConfigsResponse","type":"instance","description":"","source":"packages\\spanner\\src\\admin\\instance\\v1\\doc\\doc_spanner_instance_admin.js#L168","resources":[],"examples":[],"params":[{"name":"instanceConfigs","description":"<p> The list of requested instance configurations.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'InstanceConfig'\n        })\">InstanceConfig</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"nextPageToken","description":"<p> <code>next_page_token</code> can be sent in a subsequent  {@link ListInstanceConfigs} call to  fetch more of the matching instance configurations.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"GetInstanceConfigRequest","name":"GetInstanceConfigRequest","type":"instance","description":"","source":"packages\\spanner\\src\\admin\\instance\\v1\\doc\\doc_spanner_instance_admin.js#L183","resources":[],"examples":[],"params":[{"name":"name","description":"<p> Required. The name of the requested instance configuration. Values are of  the form <code>projects/&lt;project&gt;/instanceConfigs/&lt;config&gt;</code>.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"GetInstanceRequest","name":"GetInstanceRequest","type":"instance","description":"","source":"packages\\spanner\\src\\admin\\instance\\v1\\doc\\doc_spanner_instance_admin.js#L197","resources":[],"examples":[],"params":[{"name":"name","description":"<p> Required. The name of the requested instance. Values are of the form  <code>projects/&lt;project&gt;/instances/&lt;instance&gt;</code>.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"CreateInstanceRequest","name":"CreateInstanceRequest","type":"instance","description":"","source":"packages\\spanner\\src\\admin\\instance\\v1\\doc\\doc_spanner_instance_admin.js#L222","resources":[],"examples":[],"params":[{"name":"parent","description":"<p> Required. The name of the project in which to create the instance. Values  are of the form <code>projects/&lt;project&gt;</code>.</p>","types":["string"],"optional":false,"nullable":false},{"name":"instanceId","description":"<p> Required. The ID of the instance to create. Valid identifiers are of the  form <code>[a-z][-a-z0-9]*[a-z0-9]</code> and must be between 6 and 30 characters in  length.</p>","types":["string"],"optional":false,"nullable":false},{"name":"instance","description":"<p> Required. The instance to create. The name may be omitted, but if  specified must be <code>&lt;parent&gt;/instances/&lt;instance_id&gt;</code>.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Instance'\n        })\">Instance</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ListInstancesRequest","name":"ListInstancesRequest","type":"instance","description":"","source":"packages\\spanner\\src\\admin\\instance\\v1\\doc\\doc_spanner_instance_admin.js#L266","resources":[],"examples":[],"params":[{"name":"parent","description":"<p> Required. The name of the project for which a list of instances is  requested. Values are of the form <code>projects/&lt;project&gt;</code>.</p>","types":["string"],"optional":false,"nullable":false},{"name":"pageSize","description":"<p> Number of instances to be returned in the response. If 0 or less, defaults  to the server&#39;s maximum allowed page size.</p>","types":["number"],"optional":false,"nullable":false},{"name":"pageToken","description":"<p> If non-empty, <code>page_token</code> should contain a  {@link next_page_token} from a  previous {@link ListInstancesResponse}.</p>","types":["string"],"optional":false,"nullable":false},{"name":"filter","description":"<p> An expression for filtering the results of the request. Filter rules are  case insensitive. The fields eligible for filtering are:</p><pre><code>* name * display_name * labels.key where key is the name of a label </code></pre><p> Some examples of using filters are:</p><pre><code>* name:* --&gt; The instance has a name. * name:Howl --&gt; The instance&#39;s name contains the string &quot;howl&quot;. * name:HOWL --&gt; Equivalent to above. * NAME:howl --&gt; Equivalent to above. * labels.env:* --&gt; The instance has the label &quot;env&quot;. * labels.env:dev --&gt; The instance has the label &quot;env&quot; and the value of the label contains the string &quot;dev&quot;. * name:howl labels.env:dev --&gt; The instance&#39;s name contains &quot;howl&quot; and it has the label &quot;env&quot; with its value containing &quot;dev&quot;. </code></pre>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ListInstancesResponse","name":"ListInstancesResponse","type":"instance","description":"","source":"packages\\spanner\\src\\admin\\instance\\v1\\doc\\doc_spanner_instance_admin.js#L286","resources":[],"examples":[],"params":[{"name":"instances","description":"<p> The list of requested instances.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Instance'\n        })\">Instance</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"nextPageToken","description":"<p> <code>next_page_token</code> can be sent in a subsequent  {@link ListInstances} call to fetch more  of the matching instances.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"UpdateInstanceRequest","name":"UpdateInstanceRequest","type":"instance","description":"","source":"packages\\spanner\\src\\admin\\instance\\v1\\doc\\doc_spanner_instance_admin.js#L310","resources":[],"examples":[],"params":[{"name":"instance","description":"<p> Required. The instance to update, which must always include the instance  name. Otherwise, only fields mentioned in [][google.spanner.admin.instance.v1.UpdateInstanceRequest.field_mask] need be included.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Instance'\n        })\">Instance</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"fieldMask","description":"<p> Required. A mask specifying which fields in [][google.spanner.admin.instance.v1.UpdateInstanceRequest.instance] should be updated.  The field mask must always be specified; this prevents any future fields in  [][google.spanner.admin.instance.v1.Instance] from being erased accidentally by clients that do not know  about them.</p><p> This object should have the same structure as google.protobuf.FieldMask</p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"DeleteInstanceRequest","name":"DeleteInstanceRequest","type":"instance","description":"","source":"packages\\spanner\\src\\admin\\instance\\v1\\doc\\doc_spanner_instance_admin.js#L324","resources":[],"examples":[],"params":[{"name":"name","description":"<p> Required. The name of the instance to be deleted. Values are of the form  <code>projects/&lt;project&gt;/instances/&lt;instance&gt;</code></p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"CreateInstanceMetadata","name":"CreateInstanceMetadata","type":"instance","description":"<p>Metadata type for the operation returned by {@link CreateInstance}.</p>","source":"packages\\spanner\\src\\admin\\instance\\v1\\doc\\doc_spanner_instance_admin.js#L359","resources":[],"examples":[],"params":[{"name":"instance","description":"<p> The instance being created.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Instance'\n        })\">Instance</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"startTime","description":"<p> The time at which the  {@link CreateInstance} request was  received.</p><p> This object should have the same structure as google.protobuf.Timestamp</p>","types":["Object"],"optional":false,"nullable":false},{"name":"cancelTime","description":"<p> The time at which this operation was cancelled. If set, this operation is  in the process of undoing itself (which is guaranteed to succeed) and  cannot be cancelled again.</p><p> This object should have the same structure as google.protobuf.Timestamp</p>","types":["Object"],"optional":false,"nullable":false},{"name":"endTime","description":"<p> The time at which this operation failed or was completed successfully.</p><p> This object should have the same structure as google.protobuf.Timestamp</p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"UpdateInstanceMetadata","name":"UpdateInstanceMetadata","type":"instance","description":"<p>Metadata type for the operation returned by {@link UpdateInstance}.</p>","source":"packages\\spanner\\src\\admin\\instance\\v1\\doc\\doc_spanner_instance_admin.js#L393","resources":[],"examples":[],"params":[{"name":"instance","description":"<p> The desired end state of the update.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Instance'\n        })\">Instance</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"startTime","description":"<p> The time at which {@link UpdateInstance}  request was received.</p><p> This object should have the same structure as google.protobuf.Timestamp</p>","types":["Object"],"optional":false,"nullable":false},{"name":"cancelTime","description":"<p> The time at which this operation was cancelled. If set, this operation is  in the process of undoing itself (which is guaranteed to succeed) and  cannot be cancelled again.</p><p> This object should have the same structure as google.protobuf.Timestamp</p>","types":["Object"],"optional":false,"nullable":false},{"name":"endTime","description":"<p> The time at which this operation failed or was completed successfully.</p><p> This object should have the same structure as google.protobuf.Timestamp</p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"type":"instance","description":"<p>A Duration represents a signed, fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like &quot;day&quot; or &quot;month&quot;. It is related to Timestamp in that the difference between two Timestamp values is a Duration and it can be added or subtracted from a Timestamp. Range is approximately +-10,000 years.</p><p>Example 1: Compute Duration from two Timestamps in pseudo code.</p><pre><code>Timestamp start = ...; Timestamp end = ...; Duration duration = ...; duration.seconds = end.seconds - start.seconds; duration.nanos = end.nanos - start.nanos; if (duration.seconds &lt; 0 &amp;&amp; duration.nanos &gt; 0) { duration.seconds += 1; duration.nanos -= 1000000000; } else if (durations.seconds &gt; 0 &amp;&amp; duration.nanos &lt; 0) { duration.seconds -= 1; duration.nanos += 1000000000; } </code></pre><p>Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.</p><pre><code>Timestamp start = ...; Duration duration = ...; Timestamp end = ...; end.seconds = start.seconds + duration.seconds; end.nanos = start.nanos + duration.nanos; if (end.nanos &lt; 0) { end.seconds -= 1; end.nanos += 1000000000; } else if (end.nanos &gt;= 1000000000) { end.seconds += 1; end.nanos -= 1000000000; } </code></pre><p>Example 3: Compute Duration from datetime.timedelta in Python.</p><pre><code>td = datetime.timedelta(days=3, minutes=10) duration = Duration() duration.FromTimedelta(td) </code></pre>","source":"packages\\spanner\\src\\v1\\doc\\doc_google_protobuf_duration.js#L85","resources":[],"examples":[],"params":[{"name":"seconds","description":"<p> Signed seconds of the span of time. Must be from -315,576,000,000  to +315,576,000,000 inclusive.</p>","types":["number"],"optional":false,"nullable":false},{"name":"nanos","description":"<p> Signed fractions of a second at nanosecond resolution of the span  of time. Durations less than one second are represented with a 0  <code>seconds</code> field and a positive or negative <code>nanos</code> field. For durations  of one second or more, a non-zero value for the <code>nanos</code> field must be  of the same sign as the <code>seconds</code> field. Must be from -999,999,999  to +999,999,999 inclusive.</p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"type":"instance","description":"<p><code>Struct</code> represents a structured data value, consisting of fields which map to dynamically typed values. In some languages, <code>Struct</code> might be supported by a native representation. For example, in scripting languages like JS a struct is represented as an object. The details of that representation are described together with the proto support for the language.</p><p>The JSON representation for <code>Struct</code> is JSON object.</p>","source":"packages\\spanner\\src\\v1\\doc\\doc_google_protobuf_struct.js#L38","resources":[],"examples":[],"params":[{"name":"fields","description":"<p> Unordered map of dynamically typed values.</p>","types":["Object.<string, Object>"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"type":"instance","description":"<p>A Timestamp represents a point in time independent of any time zone or calendar, represented as seconds and fractions of seconds at nanosecond resolution in UTC Epoch time. It is encoded using the Proleptic Gregorian Calendar which extends the Gregorian calendar backwards to year one. It is encoded assuming all minutes are 60 seconds long, i.e. leap seconds are &quot;smeared&quot; so that no leap second table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By restricting to that range, we ensure that we can convert to and from RFC 3339 date strings. See <a href=\"https://www.ietf.org/rfc/rfc3339.txt\">https://www.ietf.org/rfc/rfc3339.txt</a>.</p><p>Example 1: Compute Timestamp from POSIX <code>time()</code>.</p><pre><code>Timestamp timestamp; timestamp.set_seconds(time(NULL)); timestamp.set_nanos(0); </code></pre><p>Example 2: Compute Timestamp from POSIX <code>gettimeofday()</code>.</p><pre><code>struct timeval tv; gettimeofday(&amp;tv, NULL); Timestamp timestamp; timestamp.set_seconds(tv.tv_sec); timestamp.set_nanos(tv.tv_usec * 1000); </code></pre><p>Example 3: Compute Timestamp from Win32 <code>GetSystemTimeAsFileTime()</code>.</p><pre><code>FILETIME ft; GetSystemTimeAsFileTime(&amp;ft); UINT64 ticks = (((UINT64)ft.dwHighDateTime) &lt;&lt; 32) | ft.dwLowDateTime; // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z. Timestamp timestamp; timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL)); timestamp.set_nanos((INT32) ((ticks % 10000000) * 100)); </code></pre><p>Example 4: Compute Timestamp from Java <code>System.currentTimeMillis()</code>.</p><pre><code>long millis = System.currentTimeMillis(); Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000) .setNanos((int) ((millis % 1000) * 1000000)).build(); </code></pre><p>Example 5: Compute Timestamp from current time in Python.</p><pre><code>timestamp = Timestamp() timestamp.GetCurrentTime() </code></pre>","source":"packages\\spanner\\src\\v1\\doc\\doc_google_protobuf_timestamp.js#L89","resources":[],"examples":[],"params":[{"name":"seconds","description":"<p> Represents seconds of UTC time since Unix epoch  1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to  9999-12-31T23:59:59Z inclusive.</p>","types":["number"],"optional":false,"nullable":false},{"name":"nanos","description":"<p> Non-negative fractions of a second at nanosecond resolution. Negative  second values with fractions must still have non-negative nanos values  that count forward in time. Must be from 0 to 999,999,999  inclusive.</p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"KeyRange","name":"KeyRange","type":"instance","description":"<p>KeyRange represents a range of rows in a table or index.</p><p>A range has a start key and an end key. These keys can be open or closed, indicating if the range includes rows with that key.</p><p>Keys are represented by lists, where the ith value in the list corresponds to the ith component of the table or index primary key. Individual values are encoded as described {@link here}.</p><p>For example, consider the following table definition:</p><pre><code>CREATE TABLE UserEvents ( UserName STRING(MAX), EventDate STRING(10) ) PRIMARY KEY(UserName, EventDate); </code></pre><p>The following keys name rows in this table:</p><pre><code>[&quot;Bob&quot;, &quot;2014-09-23&quot;] [&quot;Alfred&quot;, &quot;2015-06-12&quot;] </code></pre><p>Since the <code>UserEvents</code> table&#39;s <code>PRIMARY KEY</code> clause names two columns, each <code>UserEvents</code> key has two elements; the first is the <code>UserName</code>, and the second is the <code>EventDate</code>.</p><p>Key ranges with multiple components are interpreted lexicographically by component using the table or index key&#39;s declared sort order. For example, the following range returns all events for user <code>&quot;Bob&quot;</code> that occurred in the year 2015:</p><pre><code>&quot;start_closed&quot;: [&quot;Bob&quot;, &quot;2015-01-01&quot;] &quot;end_closed&quot;: [&quot;Bob&quot;, &quot;2015-12-31&quot;] </code></pre><p>Start and end keys can omit trailing key components. This affects the inclusion and exclusion of rows that exactly match the provided key components: if the key is closed, then rows that exactly match the provided components are included; if the key is open, then rows that exactly match are not included.</p><p>For example, the following range includes all events for <code>&quot;Bob&quot;</code> that occurred during and after the year 2000:</p><pre><code>&quot;start_closed&quot;: [&quot;Bob&quot;, &quot;2000-01-01&quot;] &quot;end_closed&quot;: [&quot;Bob&quot;] </code></pre><p>The next example retrieves all events for <code>&quot;Bob&quot;</code>:</p><pre><code>&quot;start_closed&quot;: [&quot;Bob&quot;] &quot;end_closed&quot;: [&quot;Bob&quot;] </code></pre><p>To retrieve events before the year 2000:</p><pre><code>&quot;start_closed&quot;: [&quot;Bob&quot;] &quot;end_open&quot;: [&quot;Bob&quot;, &quot;2000-01-01&quot;] </code></pre><p>The following range includes all rows in the table:</p><pre><code>&quot;start_closed&quot;: [] &quot;end_closed&quot;: [] </code></pre><p>This range returns all users whose <code>UserName</code> begins with any character from A to C:</p><pre><code>&quot;start_closed&quot;: [&quot;A&quot;] &quot;end_open&quot;: [&quot;D&quot;] </code></pre><p>This range returns all users whose <code>UserName</code> begins with B:</p><pre><code>&quot;start_closed&quot;: [&quot;B&quot;] &quot;end_open&quot;: [&quot;C&quot;] </code></pre><p>Key ranges honor column sort order. For example, suppose a table is defined as follows:</p><pre><code>CREATE TABLE DescendingSortedTable { Key INT64, ... ) PRIMARY KEY(Key DESC); </code></pre><p>The following range retrieves all rows with key values between 1 and 100 inclusive:</p><pre><code>&quot;start_closed&quot;: [&quot;100&quot;] &quot;end_closed&quot;: [&quot;1&quot;] </code></pre><p>Note that 100 is passed as the start, and 1 is passed as the end, because <code>Key</code> is a descending column in the schema.</p>","source":"packages\\spanner\\src\\v1\\doc\\doc_keys.js#L138","resources":[],"examples":[],"params":[{"name":"startClosed","description":"<p> If the start is closed, then the range includes all rows whose  first <code>len(start_closed)</code> key columns exactly match <code>start_closed</code>.</p><p> This object should have the same structure as google.protobuf.ListValue</p>","types":["Object"],"optional":false,"nullable":false},{"name":"startOpen","description":"<p> If the start is open, then the range excludes rows whose first  <code>len(start_open)</code> key columns exactly match <code>start_open</code>.</p><p> This object should have the same structure as google.protobuf.ListValue</p>","types":["Object"],"optional":false,"nullable":false},{"name":"endClosed","description":"<p> If the end is closed, then the range includes all rows whose  first <code>len(end_closed)</code> key columns exactly match <code>end_closed</code>.</p><p> This object should have the same structure as google.protobuf.ListValue</p>","types":["Object"],"optional":false,"nullable":false},{"name":"endOpen","description":"<p> If the end is open, then the range excludes rows whose first  <code>len(end_open)</code> key columns exactly match <code>end_open</code>.</p><p> This object should have the same structure as google.protobuf.ListValue</p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"KeySet","name":"KeySet","type":"instance","description":"<p><code>KeySet</code> defines a collection of Cloud Spanner keys and/or key ranges. All the keys are expected to be in the same table or index. The keys need not be sorted in any particular way.</p><p>If the same key is specified multiple times in the set (for example if two ranges, two keys, or a key and a range overlap), Cloud Spanner behaves as if the key were only specified once.</p>","source":"packages\\spanner\\src\\v1\\doc\\doc_keys.js#L173","resources":[],"examples":[],"params":[{"name":"keys","description":"<p> A list of specific keys. Entries in <code>keys</code> should have exactly as  many elements as there are columns in the primary or index key  with which this <code>KeySet</code> is used. Individual key values are  encoded as described {@link here}.</p><p> This object should have the same structure as google.protobuf.ListValue</p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"ranges","description":"<p> A list of key ranges. See {@link KeyRange} for more information about  key range specifications.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'KeyRange'\n        })\">KeyRange</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"all","description":"<p> For convenience <code>all</code> can be set to <code>true</code> to indicate that this  <code>KeySet</code> matches all keys in the table or index. Note that any keys  specified in <code>keys</code> or <code>ranges</code> are only yielded once.</p>","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Mutation","name":"Mutation","type":"instance","description":"<p>A modification to one or more Cloud Spanner rows. Mutations can be applied to a Cloud Spanner database by sending them in a {@link Commit} call.</p>","source":"packages\\spanner\\src\\v1\\doc\\doc_mutation.js#L63","resources":[],"examples":[],"params":[{"name":"insert","description":"<p> Insert new rows in a table. If any of the rows already exist,  the write or transaction fails with error <code>ALREADY_EXISTS</code>.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Write'\n        })\">Write</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"update","description":"<p> Update existing rows in a table. If any of the rows does not  already exist, the transaction fails with error <code>NOT_FOUND</code>.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Write'\n        })\">Write</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"insertOrUpdate","description":"<p> Like {@link insert}, except that if the row already exists, then  its column values are overwritten with the ones provided. Any  column values not explicitly written are preserved.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Write'\n        })\">Write</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"replace","description":"<p> Like {@link insert}, except that if the row already exists, it is  deleted, and the column values provided are inserted  instead. Unlike {@link insert_or_update}, this means any values not  explicitly written become <code>NULL</code>.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Write'\n        })\">Write</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"delete","description":"<p> Delete rows from a table. Succeeds whether or not the named  rows were present.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Delete'\n        })\">Delete</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Write","name":"Write","type":"instance","description":"<p>Arguments to {@link insert}, {@link update}, {@link insert_or_update}, and {@link replace} operations.</p>","source":"packages\\spanner\\src\\v1\\doc\\doc_mutation.js#L95","resources":[],"examples":[],"params":[{"name":"table","description":"<p> Required. The table whose rows will be written.</p>","types":["string"],"optional":false,"nullable":false},{"name":"columns","description":"<p> The names of the columns in {@link table} to be written.</p><p> The list of columns must contain enough columns to allow  Cloud Spanner to derive values for all primary key columns in the  row(s) to be modified.</p>","types":["string[]"],"optional":false,"nullable":false},{"name":"values","description":"<p> The values to be written. <code>values</code> can contain more than one  list of values. If it does, then multiple rows are written, one  for each entry in <code>values</code>. Each list in <code>values</code> must have  exactly as many entries as there are entries in {@link columns}  above. Sending multiple lists is equivalent to sending multiple  <code>Mutation</code>s, each containing one <code>values</code> entry and repeating  {@link table} and {@link columns}. Individual values in each list are  encoded as described {@link here}.</p><p> This object should have the same structure as google.protobuf.ListValue</p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Delete","name":"Delete","type":"instance","description":"<p>Arguments to {@link delete} operations.</p>","source":"packages\\spanner\\src\\v1\\doc\\doc_mutation.js#L113","resources":[],"examples":[],"params":[{"name":"table","description":"<p> Required. The table whose rows will be deleted.</p>","types":["string"],"optional":false,"nullable":false},{"name":"keySet","description":"<p> Required. The primary keys of the rows within {@link table} to delete.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'KeySet'\n        })\">KeySet</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"PlanNode","name":"PlanNode","type":"instance","description":"<p>Node information for nodes appearing in a {@link QueryPlan.plan_nodes}.</p>","source":"packages\\spanner\\src\\v1\\doc\\doc_query_plan.js#L73","resources":[],"examples":[],"params":[{"name":"index","description":"<p> The <code>PlanNode</code>&#39;s index in {@link node list}.</p>","types":["number"],"optional":false,"nullable":false},{"name":"kind","description":"<p> Used to determine the type of node. May be needed for visualizing  different kinds of nodes differently. For example, If the node is a  {@link SCALAR} node, it will have a condensed representation  which can be used to directly embed a description of the node in its  parent.</p><p> The number should be among the values of <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Kind'\n        })\">Kind</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"displayName","description":"<p> The display name for the node.</p>","types":["string"],"optional":false,"nullable":false},{"name":"childLinks","description":"<p> List of child node <code>index</code>es and their relationship to this parent.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ChildLink'\n        })\">ChildLink</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"shortRepresentation","description":"<p> Condensed representation for {@link SCALAR} nodes.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ShortRepresentation'\n        })\">ShortRepresentation</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"metadata","description":"<p> Attributes relevant to the node contained in a group of key-value pairs.  For example, a Parameter Reference node could have the following  information in its metadata:</p><pre><code> { &quot;parameter_reference&quot;: &quot;param1&quot;, &quot;parameter_type&quot;: &quot;array&quot; } </code></pre><p> This object should have the same structure as google.protobuf.Struct</p>","types":["Object"],"optional":false,"nullable":false},{"name":"executionStats","description":"<p> The execution statistics associated with the node, contained in a group of  key-value pairs. Only present if the plan was returned as a result of a  profile query. For example, number of executions, number of rows/time per  execution etc.</p><p> This object should have the same structure as google.protobuf.Struct</p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ChildLink","name":"ChildLink","type":"instance","description":"<p>Metadata associated with a parent-child relationship appearing in a {@link PlanNode}.</p>","source":"packages\\spanner\\src\\v1\\doc\\doc_query_plan.js#L102","resources":[],"examples":[],"params":[{"name":"childIndex","description":"<p> The node to which the link points.</p>","types":["number"],"optional":false,"nullable":false},{"name":"type","description":"<p> The type of the link. For example, in Hash Joins this could be used to  distinguish between the build child and the probe child, or in the case  of the child being an output variable, to represent the tag associated  with the output variable.</p>","types":["string"],"optional":false,"nullable":false},{"name":"variable","description":"<p> Only present if the child node is {@link SCALAR} and corresponds  to an output variable of the parent node. The field carries the name of  the output variable.  For example, a <code>TableScan</code> operator that reads rows from a table will  have child links to the <code>SCALAR</code> nodes representing the output variables  created for each column that is read by the operator. The corresponding  <code>variable</code> fields will be set to the variable names assigned to the  columns.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ShortRepresentation","name":"ShortRepresentation","type":"instance","description":"<p>Condensed representation of a node and its subtree. Only present for <code>SCALAR</code> {@link PlanNode(s)}.</p>","source":"packages\\spanner\\src\\v1\\doc\\doc_query_plan.js#L123","resources":[],"examples":[],"params":[{"name":"description","description":"<p> A string representation of the expression subtree rooted at this node.</p>","types":["string"],"optional":false,"nullable":false},{"name":"subqueries","description":"<p> A mapping of (subquery variable name) -&gt; (subquery node id) for cases  where the <code>description</code> string of this node references a <code>SCALAR</code>  subquery contained in the expression subtree rooted at this node. The  referenced <code>SCALAR</code> subquery may not necessarily be a direct child of  this node.</p>","types":["Object.<string, number>"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Kind","name":"Kind","type":"instance","description":"<p>The kind of {@link PlanNode}. Distinguishes between the two different kinds of nodes that can appear in a query plan.</p>","source":"packages\\spanner\\src\\v1\\doc\\doc_query_plan.js#L133","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"QueryPlan","name":"QueryPlan","type":"instance","description":"<p>Contains an ordered list of nodes appearing in the query plan.</p>","source":"packages\\spanner\\src\\v1\\doc\\doc_query_plan.js#L170","resources":[],"examples":[],"params":[{"name":"planNodes","description":"<p> The nodes in the query plan. Plan nodes are returned in pre-order starting  with the plan root. Each {@link PlanNode}&#39;s <code>id</code> corresponds to its index in  <code>plan_nodes</code>.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'PlanNode'\n        })\">PlanNode</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ResultSet","name":"ResultSet","type":"instance","description":"<p>Results from {@link Read} or {@link ExecuteSql}.</p>","source":"packages\\spanner\\src\\v1\\doc\\doc_result_set.js#L51","resources":[],"examples":[],"params":[{"name":"metadata","description":"<p> Metadata about the result set, such as row type information.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ResultSetMetadata'\n        })\">ResultSetMetadata</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"rows","description":"<p> Each element in <code>rows</code> is a row whose format is defined by  {@link metadata.row_type}. The ith element  in each row matches the ith field in  {@link metadata.row_type}. Elements are  encoded based on type as described  {@link here}.</p><p> This object should have the same structure as google.protobuf.ListValue</p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"stats","description":"<p> Query plan and execution statistics for the query that produced this  result set. These can be requested by setting  {@link ExecuteSqlRequest.query_mode}.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ResultSetStats'\n        })\">ResultSetStats</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"PartialResultSet","name":"PartialResultSet","type":"instance","description":"<p>Partial results from a streaming read or SQL query. Streaming reads and SQL queries better tolerate large result sets, large rows, and large values, but are a little trickier to consume.</p>","source":"packages\\spanner\\src\\v1\\doc\\doc_result_set.js#L166","resources":[],"examples":[],"params":[{"name":"metadata","description":"<p> Metadata about the result set, such as row type information.  Only present in the first response.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ResultSetMetadata'\n        })\">ResultSetMetadata</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"values","description":"<p> A streamed result set consists of a stream of values, which might  be split into many <code>PartialResultSet</code> messages to accommodate  large rows and/or large values. Every N complete values defines a  row, where N is equal to the number of entries in  {@link metadata.row_type.fields}.</p><p> Most values are encoded based on type as described  {@link here}.</p><p> It is possible that the last value in values is &quot;chunked&quot;,  meaning that the rest of the value is sent in subsequent  <code>PartialResultSet</code>(s). This is denoted by the {@link chunked_value}  field. Two or more chunked values can be merged to form a  complete value as follows:</p><pre><code>* <code>bool/number/null</code>: cannot be chunked * <code>string</code>: concatenate the strings * <code>list</code>: concatenate the lists. If the last element in a list is a <code>string</code>, <code>list</code>, or <code>object</code>, merge it with the first element in the next list by applying these rules recursively. * <code>object</code>: concatenate the (field name, field value) pairs. If a field name is duplicated, then apply these rules recursively to merge the field values. </code></pre><p> Some examples of merging:</p><pre><code> # Strings are concatenated. &quot;foo&quot;, &quot;bar&quot; =&gt; &quot;foobar&quot; # Lists of non-strings are concatenated. [2, 3], [4] =&gt; [2, 3, 4] # Lists are concatenated, but the last and first elements are merged # because they are strings. [&quot;a&quot;, &quot;b&quot;], [&quot;c&quot;, &quot;d&quot;] =&gt; [&quot;a&quot;, &quot;bc&quot;, &quot;d&quot;] # Lists are concatenated, but the last and first elements are merged # because they are lists. Recursively, the last and first elements # of the inner lists are merged because they are strings. [&quot;a&quot;, [&quot;b&quot;, &quot;c&quot;]], [[&quot;d&quot;], &quot;e&quot;] =&gt; [&quot;a&quot;, [&quot;b&quot;, &quot;cd&quot;], &quot;e&quot;] # Non-overlapping object fields are combined. {&quot;a&quot;: &quot;1&quot;}, {&quot;b&quot;: &quot;2&quot;} =&gt; {&quot;a&quot;: &quot;1&quot;, &quot;b&quot;: 2&quot;} # Overlapping object fields are merged. {&quot;a&quot;: &quot;1&quot;}, {&quot;a&quot;: &quot;2&quot;} =&gt; {&quot;a&quot;: &quot;12&quot;} # Examples of merging objects containing lists of strings. {&quot;a&quot;: [&quot;1&quot;]}, {&quot;a&quot;: [&quot;2&quot;]} =&gt; {&quot;a&quot;: [&quot;12&quot;]} </code></pre><p> For a more complete example, suppose a streaming SQL query is  yielding a result set whose rows contain a single string  field. The following <code>PartialResultSet</code>s might be yielded:</p><pre><code> { &quot;metadata&quot;: { ... } &quot;values&quot;: [&quot;Hello&quot;, &quot;W&quot;] &quot;chunked_value&quot;: true &quot;resume_token&quot;: &quot;Af65...&quot; } { &quot;values&quot;: [&quot;orl&quot;] &quot;chunked_value&quot;: true &quot;resume_token&quot;: &quot;Bqp2...&quot; } { &quot;values&quot;: [&quot;d&quot;] &quot;resume_token&quot;: &quot;Zx1B...&quot; } </code></pre><p> This sequence of <code>PartialResultSet</code>s encodes two rows, one  containing the field value <code>&quot;Hello&quot;</code>, and a second containing the  field value <code>&quot;World&quot; = &quot;W&quot; + &quot;orl&quot; + &quot;d&quot;</code>.</p><p> This object should have the same structure as google.protobuf.Value</p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"chunkedValue","description":"<p> If true, then the final value in {@link values} is chunked, and must  be combined with more values from subsequent <code>PartialResultSet</code>s  to obtain a complete field value.</p>","types":["boolean"],"optional":false,"nullable":false},{"name":"resumeToken","description":"<p> Streaming calls might be interrupted for a variety of reasons, such  as TCP connection loss. If this occurs, the stream of results can  be resumed by re-sending the original request and including  <code>resume_token</code>. Note that executing any other transaction in the  same session invalidates the token.</p>","types":["string"],"optional":false,"nullable":false},{"name":"stats","description":"<p> Query plan and execution statistics for the query that produced this  streaming result set. These can be requested by setting  {@link ExecuteSqlRequest.query_mode} and are sent  only once with the last response in the stream.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ResultSetStats'\n        })\">ResultSetStats</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ResultSetMetadata","name":"ResultSetMetadata","type":"instance","description":"<p>Metadata about a {@link ResultSet} or {@link PartialResultSet}.</p>","source":"packages\\spanner\\src\\v1\\doc\\doc_result_set.js#L194","resources":[],"examples":[],"params":[{"name":"rowType","description":"<p> Indicates the field names and types for the rows in the result  set. For example, a SQL query like <code>&quot;SELECT UserId, UserName FROM Users&quot;</code> could return a <code>row_type</code> value like:</p><pre><code> &quot;fields&quot;: [ { &quot;name&quot;: &quot;UserId&quot;, &quot;type&quot;: { &quot;code&quot;: &quot;INT64&quot; } }, { &quot;name&quot;: &quot;UserName&quot;, &quot;type&quot;: { &quot;code&quot;: &quot;STRING&quot; } }, ] </code></pre><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'StructType'\n        })\">StructType</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"transaction","description":"<p> If the read or SQL query began a transaction as a side-effect, the  information about the new transaction is yielded here.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Transaction'\n        })\">Transaction</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ResultSetStats","name":"ResultSetStats","type":"instance","description":"<p>Additional statistics about a {@link ResultSet} or {@link PartialResultSet}.</p>","source":"packages\\spanner\\src\\v1\\doc\\doc_result_set.js#L222","resources":[],"examples":[],"params":[{"name":"queryPlan","description":"<p> {@link QueryPlan} for the query associated with this result.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'QueryPlan'\n        })\">QueryPlan</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"queryStats","description":"<p> Aggregated statistics from the execution of the query. Only present when  the query is profiled. For example, a query could return the statistics as  follows:</p><pre><code> { &quot;rows_returned&quot;: &quot;3&quot;, &quot;elapsed_time&quot;: &quot;1.22 secs&quot;, &quot;cpu_time&quot;: &quot;1.19 secs&quot; } </code></pre><p> This object should have the same structure as google.protobuf.Struct</p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"CreateSessionRequest","name":"CreateSessionRequest","type":"instance","description":"","source":"packages\\spanner\\src\\v1\\doc\\doc_spanner.js#L31","resources":[],"examples":[],"params":[{"name":"database","description":"<p> Required. The database in which the new session is created.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Session","name":"Session","type":"instance","description":"<p>A session in the Cloud Spanner API.</p>","source":"packages\\spanner\\src\\v1\\doc\\doc_spanner.js#L44","resources":[],"examples":[],"params":[{"name":"name","description":"<p> Required. The name of the session.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"GetSessionRequest","name":"GetSessionRequest","type":"instance","description":"","source":"packages\\spanner\\src\\v1\\doc\\doc_spanner.js#L57","resources":[],"examples":[],"params":[{"name":"name","description":"<p> Required. The name of the session to retrieve.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"DeleteSessionRequest","name":"DeleteSessionRequest","type":"instance","description":"","source":"packages\\spanner\\src\\v1\\doc\\doc_spanner.js#L70","resources":[],"examples":[],"params":[{"name":"name","description":"<p> Required. The name of the session to delete.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ExecuteSqlRequest","name":"ExecuteSqlRequest","type":"instance","description":"","source":"packages\\spanner\\src\\v1\\doc\\doc_spanner.js#L135","resources":[],"examples":[],"params":[{"name":"session","description":"<p> Required. The session in which the SQL query should be performed.</p>","types":["string"],"optional":false,"nullable":false},{"name":"transaction","description":"<p> The transaction to use. If none is provided, the default is a  temporary read-only transaction with strong concurrency.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'TransactionSelector'\n        })\">TransactionSelector</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"sql","description":"<p> Required. The SQL query string.</p>","types":["string"],"optional":false,"nullable":false},{"name":"params","description":"<p> The SQL query string can contain parameter placeholders. A parameter  placeholder consists of <code>&#39;@&#39;</code> followed by the parameter  name. Parameter names consist of any combination of letters,  numbers, and underscores.</p><p> Parameters can appear anywhere that a literal value is expected. The same  parameter name can be used more than once, for example:  <code>&quot;WHERE id &gt; @msg_id AND id &lt; @msg_id + 100&quot;</code></p><p> It is an error to execute an SQL query with unbound parameters.</p><p> Parameter values are specified using <code>params</code>, which is a JSON  object whose keys are parameter names, and whose values are the  corresponding parameter values.</p><p> This object should have the same structure as google.protobuf.Struct</p>","types":["Object"],"optional":false,"nullable":false},{"name":"paramTypes","description":"<p> It is not always possible for Cloud Spanner to infer the right SQL type  from a JSON value. For example, values of type <code>BYTES</code> and values  of type <code>STRING</code> both appear in {@link params} as JSON strings.</p><p> In these cases, <code>param_types</code> can be used to specify the exact  SQL type for some or all of the SQL query parameters. See the  definition of {@link Type} for more information  about SQL types.</p>","types":["Object.<string, Object>"],"optional":false,"nullable":false},{"name":"resumeToken","description":"<p> If this request is resuming a previously interrupted SQL query  execution, <code>resume_token</code> should be copied from the last  {@link PartialResultSet} yielded before the interruption. Doing this  enables the new SQL query execution to resume where the last one left  off. The rest of the request parameters must exactly match the  request that yielded this token.</p>","types":["string"],"optional":false,"nullable":false},{"name":"queryMode","description":"<p> Used to control the amount of debugging information returned in  {@link ResultSetStats}.</p><p> The number should be among the values of <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'QueryMode'\n        })\">QueryMode</a></p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"QueryMode","name":"QueryMode","type":"instance","description":"<p>Mode in which the query must be processed.</p>","source":"packages\\spanner\\src\\v1\\doc\\doc_spanner.js#L143","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"ReadRequest","name":"ReadRequest","type":"instance","description":"","source":"packages\\spanner\\src\\v1\\doc\\doc_spanner.js#L219","resources":[],"examples":[],"params":[{"name":"session","description":"<p> Required. The session in which the read should be performed.</p>","types":["string"],"optional":false,"nullable":false},{"name":"transaction","description":"<p> The transaction to use. If none is provided, the default is a  temporary read-only transaction with strong concurrency.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'TransactionSelector'\n        })\">TransactionSelector</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"table","description":"<p> Required. The name of the table in the database to be read.</p>","types":["string"],"optional":false,"nullable":false},{"name":"index","description":"<p> If non-empty, the name of an index on {@link table}. This index is  used instead of the table primary key when interpreting {@link key_set}  and sorting result rows. See {@link key_set} for further information.</p>","types":["string"],"optional":false,"nullable":false},{"name":"columns","description":"<p> The columns of {@link table} to be returned for each row matching  this request.</p>","types":["string[]"],"optional":false,"nullable":false},{"name":"keySet","description":"<p> Required. <code>key_set</code> identifies the rows to be yielded. <code>key_set</code> names the  primary keys of the rows in {@link table} to be yielded, unless {@link index}  is present. If {@link index} is present, then {@link key_set} instead names  index keys in {@link index}.</p><p> Rows are yielded in table primary key order (if {@link index} is empty)  or index key order (if {@link index} is non-empty).</p><p> It is not an error for the <code>key_set</code> to name rows that do not  exist in the database. Read yields nothing for nonexistent rows.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'KeySet'\n        })\">KeySet</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"limit","description":"<p> If greater than zero, only the first <code>limit</code> rows are yielded. If <code>limit</code>  is zero, the default is no limit.</p>","types":["number"],"optional":false,"nullable":false},{"name":"resumeToken","description":"<p> If this request is resuming a previously interrupted read,  <code>resume_token</code> should be copied from the last  {@link PartialResultSet} yielded before the interruption. Doing this  enables the new read to resume where the last read left off. The  rest of the request parameters must exactly match the request  that yielded this token.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"BeginTransactionRequest","name":"BeginTransactionRequest","type":"instance","description":"","source":"packages\\spanner\\src\\v1\\doc\\doc_spanner.js#L237","resources":[],"examples":[],"params":[{"name":"session","description":"<p> Required. The session in which the transaction runs.</p>","types":["string"],"optional":false,"nullable":false},{"name":"options","description":"<p> Required. Options for the new transaction.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'TransactionOptions'\n        })\">TransactionOptions</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"CommitRequest","name":"CommitRequest","type":"instance","description":"","source":"packages\\spanner\\src\\v1\\doc\\doc_spanner.js#L273","resources":[],"examples":[],"params":[{"name":"session","description":"<p> Required. The session in which the transaction to be committed is running.</p>","types":["string"],"optional":false,"nullable":false},{"name":"transactionId","description":"<p> Commit a previously-started transaction.</p>","types":["string"],"optional":false,"nullable":false},{"name":"singleUseTransaction","description":"<p> Execute mutations in a temporary transaction. Note that unlike  commit of a previously-started transaction, commit with a  temporary transaction is non-idempotent. That is, if the  <code>CommitRequest</code> is sent to Cloud Spanner more than once (for  instance, due to retries in the application, or in the  transport library), it is possible that the mutations are  executed more than once. If this is undesirable, use  {@link BeginTransaction} and  {@link Commit} instead.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'TransactionOptions'\n        })\">TransactionOptions</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"mutations","description":"<p> The mutations to be executed when this transaction commits. All  mutations are applied atomically, in the order they appear in  this list.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Mutation'\n        })\">Mutation</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"CommitResponse","name":"CommitResponse","type":"instance","description":"","source":"packages\\spanner\\src\\v1\\doc\\doc_spanner.js#L288","resources":[],"examples":[],"params":[{"name":"commitTimestamp","description":"<p> The Cloud Spanner timestamp at which the transaction committed.</p><p> This object should have the same structure as google.protobuf.Timestamp</p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"RollbackRequest","name":"RollbackRequest","type":"instance","description":"","source":"packages\\spanner\\src\\v1\\doc\\doc_spanner.js#L304","resources":[],"examples":[],"params":[{"name":"session","description":"<p> Required. The session in which the transaction to roll back is running.</p>","types":["string"],"optional":false,"nullable":false},{"name":"transactionId","description":"<p> Required. The transaction to roll back.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"TransactionOptions","name":"TransactionOptions","type":"instance","description":"<h1>Transactions</h1> <p>Each session can have at most one active transaction at a time. After the active transaction is completed, the session can immediately be re-used for the next transaction. It is not necessary to create a new session for each transaction.</p><h1>Transaction Modes</h1> <p>Cloud Spanner supports two transaction modes:</p><ol> <li><p>Locking read-write. This type of transaction is the only way to write data into Cloud Spanner. These transactions rely on pessimistic locking and, if necessary, two-phase commit. Locking read-write transactions may abort, requiring the application to retry.</p></li> <li><p>Snapshot read-only. This transaction type provides guaranteed consistency across several reads, but does not allow writes. Snapshot read-only transactions can be configured to read at timestamps in the past. Snapshot read-only transactions do not need to be committed.</p></li> </ol> <p>For transactions that only read, snapshot read-only transactions provide simpler semantics and are almost always faster. In particular, read-only transactions do not take locks, so they do not conflict with read-write transactions. As a consequence of not taking locks, they also do not abort, so retry loops are not needed.</p><p>Transactions may only read/write data in a single database. They may, however, read/write data in different tables within that database.</p><h2>Locking Read-Write Transactions</h2> <p>Locking transactions may be used to atomically read-modify-write data anywhere in a database. This type of transaction is externally consistent.</p><p>Clients should attempt to minimize the amount of time a transaction is active. Faster transactions commit with higher probability and cause less contention. Cloud Spanner attempts to keep read locks active as long as the transaction continues to do reads, and the transaction has not been terminated by {@link Commit} or {@link Rollback}. Long periods of inactivity at the client may cause Cloud Spanner to release a transaction&#39;s locks and abort it.</p><p>Reads performed within a transaction acquire locks on the data being read. Writes can only be done at commit time, after all reads have been completed. Conceptually, a read-write transaction consists of zero or more reads or SQL queries followed by {@link Commit}. At any time before {@link Commit}, the client can send a {@link Rollback} request to abort the transaction.</p><h3>Semantics</h3> <p>Cloud Spanner can commit the transaction if all read locks it acquired are still valid at commit time, and it is able to acquire write locks for all writes. Cloud Spanner can abort the transaction for any reason. If a commit attempt returns <code>ABORTED</code>, Cloud Spanner guarantees that the transaction has not modified any user data in Cloud Spanner.</p><p>Unless the transaction commits, Cloud Spanner makes no guarantees about how long the transaction&#39;s locks were held for. It is an error to use Cloud Spanner locks for any sort of mutual exclusion other than between Cloud Spanner transactions themselves.</p><h3>Retrying Aborted Transactions</h3> <p>When a transaction aborts, the application can choose to retry the whole transaction again. To maximize the chances of successfully committing the retry, the client should execute the retry in the same session as the original attempt. The original session&#39;s lock priority increases with each consecutive abort, meaning that each attempt has a slightly better chance of success than the previous.</p><p>Under some circumstances (e.g., many transactions attempting to modify the same row(s)), a transaction can abort many times in a short period before successfully committing. Thus, it is not a good idea to cap the number of retries a transaction can attempt; instead, it is better to limit the total amount of wall time spent retrying.</p><h3>Idle Transactions</h3> <p>A transaction is considered idle if it has no outstanding reads or SQL queries and has not started a read or SQL query within the last 10 seconds. Idle transactions can be aborted by Cloud Spanner so that they don&#39;t hold on to locks indefinitely. In that case, the commit will fail with error <code>ABORTED</code>.</p><p>If this behavior is undesirable, periodically executing a simple SQL query in the transaction (e.g., <code>SELECT 1</code>) prevents the transaction from becoming idle.</p><h2>Snapshot Read-Only Transactions</h2> <p>Snapshot read-only transactions provides a simpler method than locking read-write transactions for doing several consistent reads. However, this type of transaction does not support writes.</p><p>Snapshot transactions do not take locks. Instead, they work by choosing a Cloud Spanner timestamp, then executing all reads at that timestamp. Since they do not acquire locks, they do not block concurrent read-write transactions.</p><p>Unlike locking read-write transactions, snapshot read-only transactions never abort. They can fail if the chosen read timestamp is garbage collected; however, the default garbage collection policy is generous enough that most applications do not need to worry about this in practice.</p><p>Snapshot read-only transactions do not need to call {@link Commit} or {@link Rollback} (and in fact are not permitted to do so).</p><p>To execute a snapshot transaction, the client specifies a timestamp bound, which tells Cloud Spanner how to choose a read timestamp.</p><p>The types of timestamp bound are:</p><ul> <li>Strong (the default).</li> <li>Bounded staleness.</li> <li>Exact staleness.</li> </ul> <p>If the Cloud Spanner database to be read is geographically distributed, stale read-only transactions can execute more quickly than strong or read-write transaction, because they are able to execute far from the leader replica.</p><p>Each type of timestamp bound is discussed in detail below.</p><h3>Strong</h3> <p>Strong reads are guaranteed to see the effects of all transactions that have committed before the start of the read. Furthermore, all rows yielded by a single read are consistent with each other -- if any part of the read observes a transaction, all parts of the read see the transaction.</p><p>Strong reads are not repeatable: two consecutive strong read-only transactions might return inconsistent results if there are concurrent writes. If consistency across reads is required, the reads should be executed within a transaction or at an exact read timestamp.</p><p>See {@link TransactionOptions.ReadOnly.strong}.</p><h3>Exact Staleness</h3> <p>These timestamp bounds execute reads at a user-specified timestamp. Reads at a timestamp are guaranteed to see a consistent prefix of the global transaction history: they observe modifications done by all transactions with a commit timestamp &lt;= the read timestamp, and observe none of the modifications done by transactions with a larger commit timestamp. They will block until all conflicting transactions that may be assigned commit timestamps &lt;= the read timestamp have finished.</p><p>The timestamp can either be expressed as an absolute Cloud Spanner commit timestamp or a staleness relative to the current time.</p><p>These modes do not require a &quot;negotiation phase&quot; to pick a timestamp. As a result, they execute slightly faster than the equivalent boundedly stale concurrency modes. On the other hand, boundedly stale reads usually return fresher results.</p><p>See {@link TransactionOptions.ReadOnly.read_timestamp} and {@link TransactionOptions.ReadOnly.exact_staleness}.</p><h3>Bounded Staleness</h3> <p>Bounded staleness modes allow Cloud Spanner to pick the read timestamp, subject to a user-provided staleness bound. Cloud Spanner chooses the newest timestamp within the staleness bound that allows execution of the reads at the closest available replica without blocking.</p><p>All rows yielded are consistent with each other -- if any part of the read observes a transaction, all parts of the read see the transaction. Boundedly stale reads are not repeatable: two stale reads, even if they use the same staleness bound, can execute at different timestamps and thus return inconsistent results.</p><p>Boundedly stale reads execute in two phases: the first phase negotiates a timestamp among all replicas needed to serve the read. In the second phase, reads are executed at the negotiated timestamp.</p><p>As a result of the two phase execution, bounded staleness reads are usually a little slower than comparable exact staleness reads. However, they are typically able to return fresher results, and are more likely to execute at the closest replica.</p><p>Because the timestamp negotiation requires up-front knowledge of which rows will be read, it can only be used with single-use read-only transactions.</p><p>See {@link TransactionOptions.ReadOnly.max_staleness} and {@link TransactionOptions.ReadOnly.min_read_timestamp}.</p><h3>Old Read Timestamps and Garbage Collection</h3> <p>Cloud Spanner continuously garbage collects deleted and overwritten data in the background to reclaim storage space. This process is known as &quot;version GC&quot;. By default, version GC reclaims versions after they are one hour old. Because of this, Cloud Spanner cannot perform reads at read timestamps more than one hour in the past. This restriction also applies to in-progress reads and/or SQL queries whose timestamp become too old while executing. Reads and SQL queries with too-old read timestamps fail with the error <code>FAILED_PRECONDITION</code>.</p>","source":"packages\\spanner\\src\\v1\\doc\\doc_transaction.js#L261","resources":[],"examples":[],"params":[{"name":"readWrite","description":"<p> Transaction may write.</p><p> Authorization to begin a read-write transaction requires  <code>spanner.databases.beginOrRollbackReadWriteTransaction</code> permission  on the <code>session</code> resource.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ReadWrite'\n        })\">ReadWrite</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"readOnly","description":"<p> Transaction will not write.</p><p> Authorization to begin a read-only transaction requires  <code>spanner.databases.beginReadOnlyTransaction</code> permission  on the <code>session</code> resource.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ReadOnly'\n        })\">ReadOnly</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ReadWrite","name":"ReadWrite","type":"instance","description":"<p>Options for read-write transactions.</p>","source":"packages\\spanner\\src\\v1\\doc\\doc_transaction.js#L269","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"ReadOnly","name":"ReadOnly","type":"instance","description":"<p>Options for read-only transactions.</p>","source":"packages\\spanner\\src\\v1\\doc\\doc_transaction.js#L343","resources":[],"examples":[],"params":[{"name":"strong","description":"<p> Read at a timestamp where all previously committed transactions  are visible.</p>","types":["boolean"],"optional":false,"nullable":false},{"name":"minReadTimestamp","description":"<p> Executes all reads at a timestamp &gt;= <code>min_read_timestamp</code>.</p><p> This is useful for requesting fresher data than some previous  read, or data that is fresh enough to observe the effects of some  previously committed transaction whose timestamp is known.</p><p> Note that this option can only be used in single-use transactions.</p><p> This object should have the same structure as google.protobuf.Timestamp</p>","types":["Object"],"optional":false,"nullable":false},{"name":"maxStaleness","description":"<p> Read data at a timestamp &gt;= <code>NOW - max_staleness</code>  seconds. Guarantees that all writes that have committed more  than the specified number of seconds ago are visible. Because  Cloud Spanner chooses the exact timestamp, this mode works even if  the client&#39;s local clock is substantially skewed from Cloud Spanner  commit timestamps.</p><p> Useful for reading the freshest data available at a nearby  replica, while bounding the possible staleness if the local  replica has fallen behind.</p><p> Note that this option can only be used in single-use  transactions.</p><p> This object should have the same structure as google.protobuf.Duration</p>","types":["Object"],"optional":false,"nullable":false},{"name":"readTimestamp","description":"<p> Executes all reads at the given timestamp. Unlike other modes,  reads at a specific timestamp are repeatable; the same read at  the same timestamp always returns the same data. If the  timestamp is in the future, the read will block until the  specified timestamp, modulo the read&#39;s deadline.</p><p> Useful for large scale consistent reads such as mapreduces, or  for coordinating many reads against a consistent snapshot of the  data.</p><p> This object should have the same structure as google.protobuf.Timestamp</p>","types":["Object"],"optional":false,"nullable":false},{"name":"exactStaleness","description":"<p> Executes all reads at a timestamp that is <code>exact_staleness</code>  old. The timestamp is chosen soon after the read is started.</p><p> Guarantees that all writes that have committed more than the  specified number of seconds ago are visible. Because Cloud Spanner  chooses the exact timestamp, this mode works even if the client&#39;s  local clock is substantially skewed from Cloud Spanner commit  timestamps.</p><p> Useful for reading at nearby replicas without the distributed  timestamp negotiation overhead of <code>max_staleness</code>.</p><p> This object should have the same structure as google.protobuf.Duration</p>","types":["Object"],"optional":false,"nullable":false},{"name":"returnReadTimestamp","description":"<p> If true, the Cloud Spanner-selected read timestamp is included in  the {@link Transaction} message that describes the transaction.</p>","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Transaction","name":"Transaction","type":"instance","description":"<p>A transaction.</p>","source":"packages\\spanner\\src\\v1\\doc\\doc_transaction.js#L371","resources":[],"examples":[],"params":[{"name":"id","description":"<p> <code>id</code> may be used to identify the transaction in subsequent  {@link Read},  {@link ExecuteSql},  {@link Commit}, or  {@link Rollback} calls.</p><p> Single-use read-only transactions do not have IDs, because  single-use transactions do not support multiple requests.</p>","types":["string"],"optional":false,"nullable":false},{"name":"readTimestamp","description":"<p> For snapshot read-only transactions, the read timestamp chosen  for the transaction. Not returned by default: see  {@link TransactionOptions.ReadOnly.return_read_timestamp}.</p><p> This object should have the same structure as google.protobuf.Timestamp</p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"TransactionSelector","name":"TransactionSelector","type":"instance","description":"<p>This message is used to select the transaction in which a {@link Read} or {@link ExecuteSql} call runs.</p><p>See {@link TransactionOptions} for more information about transactions.</p>","source":"packages\\spanner\\src\\v1\\doc\\doc_transaction.js#L402","resources":[],"examples":[],"params":[{"name":"singleUse","description":"<p> Execute the read or SQL query in a temporary transaction.  This is the most efficient way to execute a transaction that  consists of a single SQL query.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'TransactionOptions'\n        })\">TransactionOptions</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"id","description":"<p> Execute the read or SQL query in a previously-started transaction.</p>","types":["string"],"optional":false,"nullable":false},{"name":"begin","description":"<p> Begin a new transaction and execute this read or SQL query in  it. The transaction ID of the new transaction is returned in  {@link ResultSetMetadata.transaction}, which is a {@link Transaction}.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'TransactionOptions'\n        })\">TransactionOptions</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]}],"path":"v1/data_types.json","description":"\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <th>Class</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr ng-repeat=\"method in service.methods\" ng-if=\"method.name\">\n              <td>\n                <a ui-sref=\"docs.service({ method: method.id })\" class=\"skip-external-link\">\n                  {{method.name}}\n                </a>\n              </td>\n              <td>\n                <span ng-bind-html=\"method.description\">\n                  {{method.description}}\n                </span>\n                <span ng-if=\"!method.description && method.name.includes('Request')\">\n                  The request for {{method.name}}.\n                </span>\n                <span ng-if=\"!method.description && method.name.includes('Response')\">\n                  The response for {{method.name}}.\n                </span>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      ","id":"spanner/admin/database/v1/data_types"}