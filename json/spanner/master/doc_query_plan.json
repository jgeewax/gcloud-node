{"id":"spanner/v1/doc/doc_query_plan","type":"class","overview":"<p>\n  This class allows you interact with Cloud Spanner.\n</p>\n\n\n\n<p>\n  First, install <code>@google-cloud/spanner</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save @google-cloud/spanner</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>@google-cloud/spanner</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Google Cloud Platform</h4>\n<div hljs language=\"javascript\">\nvar spanner = require('@google-cloud/spanner')();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar spanner = require('@google-cloud/spanner')({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>@google-cloud/spanner</code> are outlined in our <a href=\"#/docs/spanner/v0.5.0/guides/authentication\">Authentication guide</a>.\n</p>\n","source":"packages\\spanner\\src\\v1\\doc\\doc_query_plan.js","parent":"spanner","children":[],"methods":[{"id":"PlanNode","name":"PlanNode","type":"instance","description":"<p>Node information for nodes appearing in a {@link QueryPlan.plan_nodes}.</p>","source":"packages\\spanner\\src\\v1\\doc\\doc_query_plan.js#L73","resources":[],"examples":[],"params":[{"name":"index","description":"<p> The <code>PlanNode</code>&#39;s index in {@link node list}.</p>","types":["number"],"optional":false,"nullable":false},{"name":"kind","description":"<p> Used to determine the type of node. May be needed for visualizing  different kinds of nodes differently. For example, If the node is a  {@link SCALAR} node, it will have a condensed representation  which can be used to directly embed a description of the node in its  parent.</p><p> The number should be among the values of <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Kind'\n        })\">Kind</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"displayName","description":"<p> The display name for the node.</p>","types":["string"],"optional":false,"nullable":false},{"name":"childLinks","description":"<p> List of child node <code>index</code>es and their relationship to this parent.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ChildLink'\n        })\">ChildLink</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"shortRepresentation","description":"<p> Condensed representation for {@link SCALAR} nodes.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ShortRepresentation'\n        })\">ShortRepresentation</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"metadata","description":"<p> Attributes relevant to the node contained in a group of key-value pairs.  For example, a Parameter Reference node could have the following  information in its metadata:</p><pre><code> { &quot;parameter_reference&quot;: &quot;param1&quot;, &quot;parameter_type&quot;: &quot;array&quot; } </code></pre><p> This object should have the same structure as google.protobuf.Struct</p>","types":["Object"],"optional":false,"nullable":false},{"name":"executionStats","description":"<p> The execution statistics associated with the node, contained in a group of  key-value pairs. Only present if the plan was returned as a result of a  profile query. For example, number of executions, number of rows/time per  execution etc.</p><p> This object should have the same structure as google.protobuf.Struct</p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ChildLink","name":"ChildLink","type":"instance","description":"<p>Metadata associated with a parent-child relationship appearing in a {@link PlanNode}.</p>","source":"packages\\spanner\\src\\v1\\doc\\doc_query_plan.js#L102","resources":[],"examples":[],"params":[{"name":"childIndex","description":"<p> The node to which the link points.</p>","types":["number"],"optional":false,"nullable":false},{"name":"type","description":"<p> The type of the link. For example, in Hash Joins this could be used to  distinguish between the build child and the probe child, or in the case  of the child being an output variable, to represent the tag associated  with the output variable.</p>","types":["string"],"optional":false,"nullable":false},{"name":"variable","description":"<p> Only present if the child node is {@link SCALAR} and corresponds  to an output variable of the parent node. The field carries the name of  the output variable.  For example, a <code>TableScan</code> operator that reads rows from a table will  have child links to the <code>SCALAR</code> nodes representing the output variables  created for each column that is read by the operator. The corresponding  <code>variable</code> fields will be set to the variable names assigned to the  columns.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ShortRepresentation","name":"ShortRepresentation","type":"instance","description":"<p>Condensed representation of a node and its subtree. Only present for <code>SCALAR</code> {@link PlanNode(s)}.</p>","source":"packages\\spanner\\src\\v1\\doc\\doc_query_plan.js#L123","resources":[],"examples":[],"params":[{"name":"description","description":"<p> A string representation of the expression subtree rooted at this node.</p>","types":["string"],"optional":false,"nullable":false},{"name":"subqueries","description":"<p> A mapping of (subquery variable name) -&gt; (subquery node id) for cases  where the <code>description</code> string of this node references a <code>SCALAR</code>  subquery contained in the expression subtree rooted at this node. The  referenced <code>SCALAR</code> subquery may not necessarily be a direct child of  this node.</p>","types":["Object.<string, number>"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Kind","name":"Kind","type":"instance","description":"<p>The kind of {@link PlanNode}. Distinguishes between the two different kinds of nodes that can appear in a query plan.</p>","source":"packages\\spanner\\src\\v1\\doc\\doc_query_plan.js#L133","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"QueryPlan","name":"QueryPlan","type":"instance","description":"<p>Contains an ordered list of nodes appearing in the query plan.</p>","source":"packages\\spanner\\src\\v1\\doc\\doc_query_plan.js#L170","resources":[],"examples":[],"params":[{"name":"planNodes","description":"<p> The nodes in the query plan. Plan nodes are returned in pre-order starting  with the plan root. Each {@link PlanNode}&#39;s <code>id</code> corresponds to its index in  <code>plan_nodes</code>.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'PlanNode'\n        })\">PlanNode</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]}],"path":"doc_query_plan.json"}