{"id":"spanner/v1/doc/doc_result_set","type":"class","overview":"<p>\n  This class allows you interact with Cloud Spanner.\n</p>\n\n\n\n<p>\n  First, install <code>@google-cloud/spanner</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save @google-cloud/spanner</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>@google-cloud/spanner</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Google Cloud Platform</h4>\n<div hljs language=\"javascript\">\nvar spanner = require('@google-cloud/spanner')();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar spanner = require('@google-cloud/spanner')({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>@google-cloud/spanner</code> are outlined in our <a href=\"#/docs/spanner/v0.7.0/guides/authentication\">Authentication guide</a>.\n</p>\n","source":"packages\\spanner\\src\\v1\\doc\\doc_result_set.js","parent":"spanner","children":[],"methods":[{"id":"ResultSet","name":"ResultSet","type":"instance","description":"<p>Results from {@link Read} or {@link ExecuteSql}.</p>","source":"packages\\spanner\\src\\v1\\doc\\doc_result_set.js#L51","resources":[],"examples":[],"params":[{"name":"metadata","description":"<p> Metadata about the result set, such as row type information.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ResultSetMetadata'\n        })\">ResultSetMetadata</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"rows","description":"<p> Each element in <code>rows</code> is a row whose format is defined by  {@link metadata.row_type}. The ith element  in each row matches the ith field in  {@link metadata.row_type}. Elements are  encoded based on type as described  {@link here}.</p><p> This object should have the same structure as google.protobuf.ListValue</p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"stats","description":"<p> Query plan and execution statistics for the query that produced this  result set. These can be requested by setting  {@link ExecuteSqlRequest.query_mode}.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ResultSetStats'\n        })\">ResultSetStats</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"PartialResultSet","name":"PartialResultSet","type":"instance","description":"<p>Partial results from a streaming read or SQL query. Streaming reads and SQL queries better tolerate large result sets, large rows, and large values, but are a little trickier to consume.</p>","source":"packages\\spanner\\src\\v1\\doc\\doc_result_set.js#L166","resources":[],"examples":[],"params":[{"name":"metadata","description":"<p> Metadata about the result set, such as row type information.  Only present in the first response.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ResultSetMetadata'\n        })\">ResultSetMetadata</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"values","description":"<p> A streamed result set consists of a stream of values, which might  be split into many <code>PartialResultSet</code> messages to accommodate  large rows and/or large values. Every N complete values defines a  row, where N is equal to the number of entries in  {@link metadata.row_type.fields}.</p><p> Most values are encoded based on type as described  {@link here}.</p><p> It is possible that the last value in values is &quot;chunked&quot;,  meaning that the rest of the value is sent in subsequent  <code>PartialResultSet</code>(s). This is denoted by the {@link chunked_value}  field. Two or more chunked values can be merged to form a  complete value as follows:</p><pre><code>* <code>bool/number/null</code>: cannot be chunked * <code>string</code>: concatenate the strings * <code>list</code>: concatenate the lists. If the last element in a list is a <code>string</code>, <code>list</code>, or <code>object</code>, merge it with the first element in the next list by applying these rules recursively. * <code>object</code>: concatenate the (field name, field value) pairs. If a field name is duplicated, then apply these rules recursively to merge the field values. </code></pre><p> Some examples of merging:</p><pre><code> # Strings are concatenated. &quot;foo&quot;, &quot;bar&quot; =&gt; &quot;foobar&quot; # Lists of non-strings are concatenated. [2, 3], [4] =&gt; [2, 3, 4] # Lists are concatenated, but the last and first elements are merged # because they are strings. [&quot;a&quot;, &quot;b&quot;], [&quot;c&quot;, &quot;d&quot;] =&gt; [&quot;a&quot;, &quot;bc&quot;, &quot;d&quot;] # Lists are concatenated, but the last and first elements are merged # because they are lists. Recursively, the last and first elements # of the inner lists are merged because they are strings. [&quot;a&quot;, [&quot;b&quot;, &quot;c&quot;]], [[&quot;d&quot;], &quot;e&quot;] =&gt; [&quot;a&quot;, [&quot;b&quot;, &quot;cd&quot;], &quot;e&quot;] # Non-overlapping object fields are combined. {&quot;a&quot;: &quot;1&quot;}, {&quot;b&quot;: &quot;2&quot;} =&gt; {&quot;a&quot;: &quot;1&quot;, &quot;b&quot;: 2&quot;} # Overlapping object fields are merged. {&quot;a&quot;: &quot;1&quot;}, {&quot;a&quot;: &quot;2&quot;} =&gt; {&quot;a&quot;: &quot;12&quot;} # Examples of merging objects containing lists of strings. {&quot;a&quot;: [&quot;1&quot;]}, {&quot;a&quot;: [&quot;2&quot;]} =&gt; {&quot;a&quot;: [&quot;12&quot;]} </code></pre><p> For a more complete example, suppose a streaming SQL query is  yielding a result set whose rows contain a single string  field. The following <code>PartialResultSet</code>s might be yielded:</p><pre><code> { &quot;metadata&quot;: { ... } &quot;values&quot;: [&quot;Hello&quot;, &quot;W&quot;] &quot;chunked_value&quot;: true &quot;resume_token&quot;: &quot;Af65...&quot; } { &quot;values&quot;: [&quot;orl&quot;] &quot;chunked_value&quot;: true &quot;resume_token&quot;: &quot;Bqp2...&quot; } { &quot;values&quot;: [&quot;d&quot;] &quot;resume_token&quot;: &quot;Zx1B...&quot; } </code></pre><p> This sequence of <code>PartialResultSet</code>s encodes two rows, one  containing the field value <code>&quot;Hello&quot;</code>, and a second containing the  field value <code>&quot;World&quot; = &quot;W&quot; + &quot;orl&quot; + &quot;d&quot;</code>.</p><p> This object should have the same structure as google.protobuf.Value</p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"chunkedValue","description":"<p> If true, then the final value in {@link values} is chunked, and must  be combined with more values from subsequent <code>PartialResultSet</code>s  to obtain a complete field value.</p>","types":["boolean"],"optional":false,"nullable":false},{"name":"resumeToken","description":"<p> Streaming calls might be interrupted for a variety of reasons, such  as TCP connection loss. If this occurs, the stream of results can  be resumed by re-sending the original request and including  <code>resume_token</code>. Note that executing any other transaction in the  same session invalidates the token.</p>","types":["string"],"optional":false,"nullable":false},{"name":"stats","description":"<p> Query plan and execution statistics for the query that produced this  streaming result set. These can be requested by setting  {@link ExecuteSqlRequest.query_mode} and are sent  only once with the last response in the stream.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ResultSetStats'\n        })\">ResultSetStats</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ResultSetMetadata","name":"ResultSetMetadata","type":"instance","description":"<p>Metadata about a {@link ResultSet} or {@link PartialResultSet}.</p>","source":"packages\\spanner\\src\\v1\\doc\\doc_result_set.js#L194","resources":[],"examples":[],"params":[{"name":"rowType","description":"<p> Indicates the field names and types for the rows in the result  set. For example, a SQL query like <code>&quot;SELECT UserId, UserName FROM Users&quot;</code> could return a <code>row_type</code> value like:</p><pre><code> &quot;fields&quot;: [ { &quot;name&quot;: &quot;UserId&quot;, &quot;type&quot;: { &quot;code&quot;: &quot;INT64&quot; } }, { &quot;name&quot;: &quot;UserName&quot;, &quot;type&quot;: { &quot;code&quot;: &quot;STRING&quot; } }, ] </code></pre><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'StructType'\n        })\">StructType</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"transaction","description":"<p> If the read or SQL query began a transaction as a side-effect, the  information about the new transaction is yielded here.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Transaction'\n        })\">Transaction</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ResultSetStats","name":"ResultSetStats","type":"instance","description":"<p>Additional statistics about a {@link ResultSet} or {@link PartialResultSet}.</p>","source":"packages\\spanner\\src\\v1\\doc\\doc_result_set.js#L222","resources":[],"examples":[],"params":[{"name":"queryPlan","description":"<p> {@link QueryPlan} for the query associated with this result.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'QueryPlan'\n        })\">QueryPlan</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"queryStats","description":"<p> Aggregated statistics from the execution of the query. Only present when  the query is profiled. For example, a query could return the statistics as  follows:</p><pre><code> { &quot;rows_returned&quot;: &quot;3&quot;, &quot;elapsed_time&quot;: &quot;1.22 secs&quot;, &quot;cpu_time&quot;: &quot;1.19 secs&quot; } </code></pre><p> This object should have the same structure as google.protobuf.Struct</p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]}],"path":"doc_result_set.json"}