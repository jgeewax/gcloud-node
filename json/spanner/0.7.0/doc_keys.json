{"id":"spanner/v1/doc/doc_keys","type":"class","overview":"<p>\n  This class allows you interact with Cloud Spanner.\n</p>\n\n\n\n<p>\n  First, install <code>@google-cloud/spanner</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save @google-cloud/spanner</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>@google-cloud/spanner</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Google Cloud Platform</h4>\n<div hljs language=\"javascript\">\nvar spanner = require('@google-cloud/spanner')();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar spanner = require('@google-cloud/spanner')({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>@google-cloud/spanner</code> are outlined in our <a href=\"#/docs/spanner/v0.7.0/guides/authentication\">Authentication guide</a>.\n</p>\n","source":"packages\\spanner\\src\\v1\\doc\\doc_keys.js","parent":"spanner","children":[],"methods":[{"id":"KeyRange","name":"KeyRange","type":"instance","description":"<p>KeyRange represents a range of rows in a table or index.</p><p>A range has a start key and an end key. These keys can be open or closed, indicating if the range includes rows with that key.</p><p>Keys are represented by lists, where the ith value in the list corresponds to the ith component of the table or index primary key. Individual values are encoded as described {@link here}.</p><p>For example, consider the following table definition:</p><pre><code>CREATE TABLE UserEvents ( UserName STRING(MAX), EventDate STRING(10) ) PRIMARY KEY(UserName, EventDate); </code></pre><p>The following keys name rows in this table:</p><pre><code>[&quot;Bob&quot;, &quot;2014-09-23&quot;] [&quot;Alfred&quot;, &quot;2015-06-12&quot;] </code></pre><p>Since the <code>UserEvents</code> table&#39;s <code>PRIMARY KEY</code> clause names two columns, each <code>UserEvents</code> key has two elements; the first is the <code>UserName</code>, and the second is the <code>EventDate</code>.</p><p>Key ranges with multiple components are interpreted lexicographically by component using the table or index key&#39;s declared sort order. For example, the following range returns all events for user <code>&quot;Bob&quot;</code> that occurred in the year 2015:</p><pre><code>&quot;start_closed&quot;: [&quot;Bob&quot;, &quot;2015-01-01&quot;] &quot;end_closed&quot;: [&quot;Bob&quot;, &quot;2015-12-31&quot;] </code></pre><p>Start and end keys can omit trailing key components. This affects the inclusion and exclusion of rows that exactly match the provided key components: if the key is closed, then rows that exactly match the provided components are included; if the key is open, then rows that exactly match are not included.</p><p>For example, the following range includes all events for <code>&quot;Bob&quot;</code> that occurred during and after the year 2000:</p><pre><code>&quot;start_closed&quot;: [&quot;Bob&quot;, &quot;2000-01-01&quot;] &quot;end_closed&quot;: [&quot;Bob&quot;] </code></pre><p>The next example retrieves all events for <code>&quot;Bob&quot;</code>:</p><pre><code>&quot;start_closed&quot;: [&quot;Bob&quot;] &quot;end_closed&quot;: [&quot;Bob&quot;] </code></pre><p>To retrieve events before the year 2000:</p><pre><code>&quot;start_closed&quot;: [&quot;Bob&quot;] &quot;end_open&quot;: [&quot;Bob&quot;, &quot;2000-01-01&quot;] </code></pre><p>The following range includes all rows in the table:</p><pre><code>&quot;start_closed&quot;: [] &quot;end_closed&quot;: [] </code></pre><p>This range returns all users whose <code>UserName</code> begins with any character from A to C:</p><pre><code>&quot;start_closed&quot;: [&quot;A&quot;] &quot;end_open&quot;: [&quot;D&quot;] </code></pre><p>This range returns all users whose <code>UserName</code> begins with B:</p><pre><code>&quot;start_closed&quot;: [&quot;B&quot;] &quot;end_open&quot;: [&quot;C&quot;] </code></pre><p>Key ranges honor column sort order. For example, suppose a table is defined as follows:</p><pre><code>CREATE TABLE DescendingSortedTable { Key INT64, ... ) PRIMARY KEY(Key DESC); </code></pre><p>The following range retrieves all rows with key values between 1 and 100 inclusive:</p><pre><code>&quot;start_closed&quot;: [&quot;100&quot;] &quot;end_closed&quot;: [&quot;1&quot;] </code></pre><p>Note that 100 is passed as the start, and 1 is passed as the end, because <code>Key</code> is a descending column in the schema.</p>","source":"packages\\spanner\\src\\v1\\doc\\doc_keys.js#L138","resources":[],"examples":[],"params":[{"name":"startClosed","description":"<p> If the start is closed, then the range includes all rows whose  first <code>len(start_closed)</code> key columns exactly match <code>start_closed</code>.</p><p> This object should have the same structure as google.protobuf.ListValue</p>","types":["Object"],"optional":false,"nullable":false},{"name":"startOpen","description":"<p> If the start is open, then the range excludes rows whose first  <code>len(start_open)</code> key columns exactly match <code>start_open</code>.</p><p> This object should have the same structure as google.protobuf.ListValue</p>","types":["Object"],"optional":false,"nullable":false},{"name":"endClosed","description":"<p> If the end is closed, then the range includes all rows whose  first <code>len(end_closed)</code> key columns exactly match <code>end_closed</code>.</p><p> This object should have the same structure as google.protobuf.ListValue</p>","types":["Object"],"optional":false,"nullable":false},{"name":"endOpen","description":"<p> If the end is open, then the range excludes rows whose first  <code>len(end_open)</code> key columns exactly match <code>end_open</code>.</p><p> This object should have the same structure as google.protobuf.ListValue</p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"KeySet","name":"KeySet","type":"instance","description":"<p><code>KeySet</code> defines a collection of Cloud Spanner keys and/or key ranges. All the keys are expected to be in the same table or index. The keys need not be sorted in any particular way.</p><p>If the same key is specified multiple times in the set (for example if two ranges, two keys, or a key and a range overlap), Cloud Spanner behaves as if the key were only specified once.</p>","source":"packages\\spanner\\src\\v1\\doc\\doc_keys.js#L173","resources":[],"examples":[],"params":[{"name":"keys","description":"<p> A list of specific keys. Entries in <code>keys</code> should have exactly as  many elements as there are columns in the primary or index key  with which this <code>KeySet</code> is used. Individual key values are  encoded as described {@link here}.</p><p> This object should have the same structure as google.protobuf.ListValue</p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"ranges","description":"<p> A list of key ranges. See {@link KeyRange} for more information about  key range specifications.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'KeyRange'\n        })\">KeyRange</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"all","description":"<p> For convenience <code>all</code> can be set to <code>true</code> to indicate that this  <code>KeySet</code> matches all keys in the table or index. Note that any keys  specified in <code>keys</code> or <code>ranges</code> are only yielded once.</p>","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]}],"path":"doc_keys.json"}