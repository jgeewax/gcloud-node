{"id":"spanner/admin/database/v1/database_admin_client","type":"class","overview":"<p>\n  This class allows you interact with Cloud Spanner.\n</p>\n\n\n\n<p>\n  First, install <code>@google-cloud/spanner</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save @google-cloud/spanner</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>@google-cloud/spanner</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Google Cloud Platform</h4>\n<div hljs language=\"javascript\">\nvar spanner = require('@google-cloud/spanner')();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar spanner = require('@google-cloud/spanner')({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>@google-cloud/spanner</code> are outlined in our <a href=\"#/docs/spanner/v0.7.0/guides/authentication\">Authentication guide</a>.\n</p>\n","source":"packages\\spanner\\src\\admin\\database\\v1\\database_admin_client.js","parent":"spanner","children":[],"methods":[{"id":"DatabaseAdminClient","name":"DatabaseAdminClient","type":"constructor","description":"<p>Cloud Spanner Database Admin API</p><p>The Cloud Spanner Database Admin API can be used to create, drop, and list databases. It also enables updating the schema of pre-existing databases.</p><p>This will be created through a builder function which can be obtained by the module. See the following example of how to initialize the module and how to access to the builder.</p>","source":"packages\\spanner\\src\\admin\\database\\v1\\database_admin_client.js#L75","resources":[],"examples":[{"code":"var spannerV1 = require('@google-cloud/spanner').admin.database.v1({\n  // optional auth parameters.\n});\nvar client = spannerV1.databaseAdminClient();"}],"params":[],"exceptions":[],"returns":[]},{"id":"instancePath","name":"instancePath","type":"instance","description":"<p>Returns a fully-qualified instance resource name string.</p>","source":"packages\\spanner\\src\\admin\\database\\v1\\database_admin_client.js#L161","resources":[],"examples":[],"params":[{"name":"project","description":"","types":["String"],"optional":false,"nullable":false},{"name":"instance","description":"","types":["String"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"matchProjectFromInstanceName","name":"matchProjectFromInstanceName","type":"instance","description":"<p>Parses the instanceName from a instance resource.</p>","source":"packages\\spanner\\src\\admin\\database\\v1\\database_admin_client.js#L174","resources":[],"examples":[],"params":[{"name":"instanceName","description":"<p> A fully-qualified path representing a instance resources.</p>","types":["String"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"matchInstanceFromInstanceName","name":"matchInstanceFromInstanceName","type":"instance","description":"<p>Parses the instanceName from a instance resource.</p>","source":"packages\\spanner\\src\\admin\\database\\v1\\database_admin_client.js#L184","resources":[],"examples":[],"params":[{"name":"instanceName","description":"<p> A fully-qualified path representing a instance resources.</p>","types":["String"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"databasePath","name":"databasePath","type":"instance","description":"<p>Returns a fully-qualified database resource name string.</p>","source":"packages\\spanner\\src\\admin\\database\\v1\\database_admin_client.js#L195","resources":[],"examples":[],"params":[{"name":"project","description":"","types":["String"],"optional":false,"nullable":false},{"name":"instance","description":"","types":["String"],"optional":false,"nullable":false},{"name":"database","description":"","types":["String"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"matchProjectFromDatabaseName","name":"matchProjectFromDatabaseName","type":"instance","description":"<p>Parses the databaseName from a database resource.</p>","source":"packages\\spanner\\src\\admin\\database\\v1\\database_admin_client.js#L209","resources":[],"examples":[],"params":[{"name":"databaseName","description":"<p> A fully-qualified path representing a database resources.</p>","types":["String"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"matchInstanceFromDatabaseName","name":"matchInstanceFromDatabaseName","type":"instance","description":"<p>Parses the databaseName from a database resource.</p>","source":"packages\\spanner\\src\\admin\\database\\v1\\database_admin_client.js#L219","resources":[],"examples":[],"params":[{"name":"databaseName","description":"<p> A fully-qualified path representing a database resources.</p>","types":["String"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"matchDatabaseFromDatabaseName","name":"matchDatabaseFromDatabaseName","type":"instance","description":"<p>Parses the databaseName from a database resource.</p>","source":"packages\\spanner\\src\\admin\\database\\v1\\database_admin_client.js#L229","resources":[],"examples":[],"params":[{"name":"databaseName","description":"<p> A fully-qualified path representing a database resources.</p>","types":["String"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"getProjectId","name":"getProjectId","type":"instance","description":"<p>Get the project ID used by this class.</p>","source":"packages\\spanner\\src\\admin\\database\\v1\\database_admin_client.js#L238","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"listDatabases","name":"listDatabases","type":"instance","description":"<p>Lists Cloud Spanner databases.</p>","source":"packages\\spanner\\src\\admin\\database\\v1\\database_admin_client.js#L318","resources":[],"examples":[{"code":"\nvar client = spannerV1.databaseAdminClient();\nvar formattedParent = client.instancePath(\"[PROJECT]\", \"[INSTANCE]\");\n// Iterate over all elements.\nclient.listDatabases({parent: formattedParent}).then(function(responses) {\n    var resources = responses[0];\n    for (var i = 0; i < resources.length; ++i) {\n        // doThingsWith(resources[i])\n    }\n}).catch(function(err) {\n    console.error(err);\n});\n\n// Or obtain the paged response.\nvar options = {autoPaginate: false};\nfunction callback(responses) {\n    // The actual resources in a response.\n    var resources = responses[0];\n    // The next request if the response shows there's more responses.\n    var nextRequest = responses[1];\n    // The actual response object, if necessary.\n    // var rawResponse = responses[2];\n    for (var i = 0; i < resources.length; ++i) {\n        // doThingsWith(resources[i]);\n    }\n    if (nextRequest) {\n        // Fetch the next page.\n        return client.listDatabases(nextRequest, options).then(callback);\n    }\n}\nclient.listDatabases({parent: formattedParent}, options)\n    .then(callback)\n    .catch(function(err) {\n        console.error(err);\n    });"}],"params":[{"name":"request","description":"<p> The request object that will be sent.</p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.parent","description":"<p> Required. The instance whose databases should be listed.  Values are of the form <code>projects/&lt;project&gt;/instances/&lt;instance&gt;</code>.</p>","types":["string"],"optional":false,"nullable":false},{"name":"request.pageSize","description":"<p> The maximum number of resources contained in the underlying API  response. If page streaming is performed per-resource, this  parameter does not affect the return value. If page streaming is  performed per-page, this determines the maximum number of  resources in a page.</p>","types":["number"],"optional":true,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this call, e.g, timeout,  retries, paginations, etc. See <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a> for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is Array of <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Database'\n        })\">Database</a>.</p><p> When autoPaginate: false is specified through options, it contains the result  in a single response. If the response indicates the next page exists, the third  parameter is set to be used for the next request object. The fourth parameter keeps  the raw response object of an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ListDatabasesResponse'\n        })\">ListDatabasesResponse</a>.</p>","types":["function(Error|null, Array|null, Object|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li><p>The promise which resolves to an array. The first element of the array is Array of <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Database'\n        })\">Database</a>.</p><p>When autoPaginate: false is specified through options, the array has three elements. The first element is Array of <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Database'\n        })\">Database</a> in a single response. The second element is the next request object if the response indicates the next page exists, or null. The third element is an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ListDatabasesResponse'\n        })\">ListDatabasesResponse</a>.</p><p>The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</p></li> </ul> "}]},{"id":"listDatabasesStream","name":"listDatabasesStream","type":"instance","description":"<p>Equivalent to {@link listDatabases}, but returns a NodeJS Stream object.</p><p>This fetches the paged responses for {@link listDatabases} continuously and invokes the callback registered for &#39;data&#39; event for each element in the responses.</p><p>The returned object has &#39;end&#39; method when no more elements are required.</p><p>autoPaginate option will be ignored.</p>","source":"packages\\spanner\\src\\admin\\database\\v1\\database_admin_client.js#L370","resources":[],"examples":[{"code":"\nvar client = spannerV1.databaseAdminClient();\nvar formattedParent = client.instancePath(\"[PROJECT]\", \"[INSTANCE]\");\nclient.listDatabasesStream({parent: formattedParent}).on('data', function(element) {\n    // doThingsWith(element)\n}).on('error', function(err) {\n    console.error(err);\n});"}],"params":[{"name":"request","description":"<p> The request object that will be sent.</p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.parent","description":"<p> Required. The instance whose databases should be listed.  Values are of the form <code>projects/&lt;project&gt;/instances/&lt;instance&gt;</code>.</p>","types":["string"],"optional":false,"nullable":false},{"name":"request.pageSize","description":"<p> The maximum number of resources contained in the underlying API  response. If page streaming is performed per-resource, this  parameter does not affect the return value. If page streaming is  performed per-page, this determines the maximum number of  resources in a page.</p>","types":["number"],"optional":true,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this call, e.g, timeout,  retries, paginations, etc. See <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a> for the details.</p>","types":["Object"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Stream"],"description":"<p> An object stream which emits an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Database'\n        })\">Database</a> on &#39;data&#39; event.</p>"}]},{"id":"createDatabase","name":"createDatabase","type":"instance","description":"<p>Creates a new Cloud Spanner database and starts to prepare it for serving. The returned {@link long-running operation} will have a name of the format <code>&lt;database_name&gt;/operations/&lt;operation_id&gt;</code> and can be used to track preparation of the database. The {@link metadata} field type is {@link CreateDatabaseMetadata}. The {@link response} field type is {@link Database}, if successful.</p>","source":"packages\\spanner\\src\\admin\\database\\v1\\database_admin_client.js#L468","resources":[],"examples":[{"code":"\nvar client = spannerV1.databaseAdminClient();\nvar formattedParent = client.instancePath(\"[PROJECT]\", \"[INSTANCE]\");\nvar createStatement = '';\nvar request = {\n    parent: formattedParent,\n    createStatement: createStatement\n};\n\n// Handle the operation using the promise pattern.\nclient.createDatabase(request).then(function(responses) {\n    var operation = responses[0];\n    var initialApiResponse = responses[1];\n\n    // Operation#promise starts polling for the completion of the LRO.\n    return operation.promise();\n}).then(function(responses) {\n    // The final result of the operation.\n    var result = responses[0];\n\n    // The metadata value of the completed operation.\n    var metadata = responses[1];\n\n    // The response of the api call returning the complete operation.\n    var finalApiResponse = responses[2];\n}).catch(function(err) {\n    console.error(err);\n});\n\n// Handle the operation using the event emitter pattern.\nclient.createDatabase(request).then(function(responses) {\n    var operation = responses[0];\n    var initialApiResponse = responses[1];\n\n    // Adding a listener for the \"complete\" event starts polling for the\n    // completion of the operation.\n    operation.on('complete', function(result, metadata, finalApiResponse) {\n      // doSomethingWith(result);\n    });\n\n    // Adding a listener for the \"progress\" event causes the callback to be\n    // called on any change in metadata when the operation is polled.\n    operation.on('progress', function(metadata, apiResponse) {\n      // doSomethingWith(metadata)\n    })\n\n    // Adding a listener for the \"error\" event handles any errors found during polling.\n    operation.on('error', function(err) {\n      // throw(err);\n    })\n}).catch(function(err) {\n    console.error(err);\n});"}],"params":[{"name":"request","description":"<p> The request object that will be sent.</p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.parent","description":"<p> Required. The name of the instance that will serve the new database.  Values are of the form <code>projects/&lt;project&gt;/instances/&lt;instance&gt;</code>.</p>","types":["string"],"optional":false,"nullable":false},{"name":"request.createStatement","description":"<p> Required. A <code>CREATE DATABASE</code> statement, which specifies the ID of the  new database. The database ID must conform to the regular expression  <code>[a-z][a-z0-9_\\-]*[a-z0-9]</code> and be between 2 and 30 characters in length.</p>","types":["string"],"optional":false,"nullable":false},{"name":"request.extraStatements","description":"<p> An optional list of DDL statements to run inside the newly created  database. Statements can create tables, indexes, etc. These  statements execute atomically with the creation of the database:  if there is an error in any statement, the database is not created.</p>","types":["string[]"],"optional":true,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this call, e.g, timeout,  retries, paginations, etc. See <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a> for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is a <a href=\"https://googleapis.github.io/gax-nodejs/Operation\">gax.Operation</a> object.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is a <a href=\"https://googleapis.github.io/gax-nodejs/Operation\">gax.Operation</a> object. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"getDatabase","name":"getDatabase","type":"instance","description":"<p>Gets the state of a Cloud Spanner database.</p>","source":"packages\\spanner\\src\\admin\\database\\v1\\database_admin_client.js#L510","resources":[],"examples":[{"code":"\nvar client = spannerV1.databaseAdminClient();\nvar formattedName = client.databasePath(\"[PROJECT]\", \"[INSTANCE]\", \"[DATABASE]\");\nclient.getDatabase({name: formattedName}).then(function(responses) {\n    var response = responses[0];\n    // doThingsWith(response)\n}).catch(function(err) {\n    console.error(err);\n});"}],"params":[{"name":"request","description":"<p> The request object that will be sent.</p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.name","description":"<p> Required. The name of the requested database. Values are of the form  <code>projects/&lt;project&gt;/instances/&lt;instance&gt;/databases/&lt;database&gt;</code>.</p>","types":["string"],"optional":false,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this call, e.g, timeout,  retries, paginations, etc. See <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a> for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Database'\n        })\">Database</a>.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Database'\n        })\">Database</a>. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"updateDatabaseDdl","name":"updateDatabaseDdl","type":"instance","description":"<p>Updates the schema of a Cloud Spanner database by creating/altering/dropping tables, columns, indexes, etc. The returned {@link long-running operation} will have a name of the format <code>&lt;database_name&gt;/operations/&lt;operation_id&gt;</code> and can be used to track execution of the schema change(s). The {@link metadata} field type is {@link UpdateDatabaseDdlMetadata}. The operation has no response.</p>","source":"packages\\spanner\\src\\admin\\database\\v1\\database_admin_client.js#L623","resources":[],"examples":[{"code":"\nvar client = spannerV1.databaseAdminClient();\nvar formattedDatabase = client.databasePath(\"[PROJECT]\", \"[INSTANCE]\", \"[DATABASE]\");\nvar statements = [];\nvar request = {\n    database: formattedDatabase,\n    statements: statements\n};\n\n// Handle the operation using the promise pattern.\nclient.updateDatabaseDdl(request).then(function(responses) {\n    var operation = responses[0];\n    var initialApiResponse = responses[1];\n\n    // Operation#promise starts polling for the completion of the LRO.\n    return operation.promise();\n}).then(function(responses) {\n    // The final result of the operation.\n    var result = responses[0];\n\n    // The metadata value of the completed operation.\n    var metadata = responses[1];\n\n    // The response of the api call returning the complete operation.\n    var finalApiResponse = responses[2];\n}).catch(function(err) {\n    console.error(err);\n});\n\n// Handle the operation using the event emitter pattern.\nclient.updateDatabaseDdl(request).then(function(responses) {\n    var operation = responses[0];\n    var initialApiResponse = responses[1];\n\n    // Adding a listener for the \"complete\" event starts polling for the\n    // completion of the operation.\n    operation.on('complete', function(result, metadata, finalApiResponse) {\n      // doSomethingWith(result);\n    });\n\n    // Adding a listener for the \"progress\" event causes the callback to be\n    // called on any change in metadata when the operation is polled.\n    operation.on('progress', function(metadata, apiResponse) {\n      // doSomethingWith(metadata)\n    })\n\n    // Adding a listener for the \"error\" event handles any errors found during polling.\n    operation.on('error', function(err) {\n      // throw(err);\n    })\n}).catch(function(err) {\n    console.error(err);\n});"}],"params":[{"name":"request","description":"<p> The request object that will be sent.</p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.database","description":"<p> Required. The database to update.</p>","types":["string"],"optional":false,"nullable":false},{"name":"request.statements","description":"<p> DDL statements to be applied to the database.</p>","types":["string[]"],"optional":false,"nullable":false},{"name":"request.operationId","description":"<p> If empty, the new update request is assigned an  automatically-generated operation ID. Otherwise, <code>operation_id</code>  is used to construct the name of the resulting  {@link Operation}.</p><p> Specifying an explicit operation ID simplifies determining  whether the statements were executed in the event that the  {@link UpdateDatabaseDdl} call is replayed,  or the return value is otherwise lost: the {@link database} and  <code>operation_id</code> fields can be combined to form the  {@link name} of the resulting  {@link longrunning.Operation}: <code>&lt;database&gt;/operations/&lt;operation_id&gt;</code>.</p><p> <code>operation_id</code> should be unique within the database, and must be  a valid identifier: <code>[a-z][a-z0-9_]*</code>. Note that  automatically-generated operation IDs always begin with an  underscore. If the named operation already exists,  {@link UpdateDatabaseDdl} returns  <code>ALREADY_EXISTS</code>.</p>","types":["string"],"optional":true,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this call, e.g, timeout,  retries, paginations, etc. See <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a> for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is a <a href=\"https://googleapis.github.io/gax-nodejs/Operation\">gax.Operation</a> object.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is a <a href=\"https://googleapis.github.io/gax-nodejs/Operation\">gax.Operation</a> object. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"dropDatabase","name":"dropDatabase","type":"instance","description":"<p>Drops (aka deletes) a Cloud Spanner database.</p>","source":"packages\\spanner\\src\\admin\\database\\v1\\database_admin_client.js#L658","resources":[],"examples":[{"code":"\nvar client = spannerV1.databaseAdminClient();\nvar formattedDatabase = client.databasePath(\"[PROJECT]\", \"[INSTANCE]\", \"[DATABASE]\");\nclient.dropDatabase({database: formattedDatabase}).catch(function(err) {\n    console.error(err);\n});"}],"params":[{"name":"request","description":"<p> The request object that will be sent.</p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.database","description":"<p> Required. The database to be dropped.</p>","types":["string"],"optional":false,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this call, e.g, timeout,  retries, paginations, etc. See <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a> for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p>","types":["function(Error|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves when API call finishes. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"getDatabaseDdl","name":"getDatabaseDdl","type":"instance","description":"<p>Returns the schema of a Cloud Spanner database as a list of formatted DDL statements. This method does not show pending schema updates, those may be queried using the {@link Operations} API.</p>","source":"packages\\spanner\\src\\admin\\database\\v1\\database_admin_client.js#L701","resources":[],"examples":[{"code":"\nvar client = spannerV1.databaseAdminClient();\nvar formattedDatabase = client.databasePath(\"[PROJECT]\", \"[INSTANCE]\", \"[DATABASE]\");\nclient.getDatabaseDdl({database: formattedDatabase}).then(function(responses) {\n    var response = responses[0];\n    // doThingsWith(response)\n}).catch(function(err) {\n    console.error(err);\n});"}],"params":[{"name":"request","description":"<p> The request object that will be sent.</p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.database","description":"<p> Required. The database whose schema we wish to get.</p>","types":["string"],"optional":false,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this call, e.g, timeout,  retries, paginations, etc. See <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a> for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'GetDatabaseDdlResponse'\n        })\">GetDatabaseDdlResponse</a>.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'GetDatabaseDdlResponse'\n        })\">GetDatabaseDdlResponse</a>. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"setIamPolicy","name":"setIamPolicy","type":"instance","description":"<p>Sets the access control policy on a database resource. Replaces any existing policy.</p><p>Authorization requires <code>spanner.databases.setIamPolicy</code> permission on {@link resource}.</p>","source":"packages\\spanner\\src\\admin\\database\\v1\\database_admin_client.js#L760","resources":[],"examples":[{"code":"\nvar client = spannerV1.databaseAdminClient();\nvar formattedResource = client.databasePath(\"[PROJECT]\", \"[INSTANCE]\", \"[DATABASE]\");\nvar policy = {};\nvar request = {\n    resource: formattedResource,\n    policy: policy\n};\nclient.setIamPolicy(request).then(function(responses) {\n    var response = responses[0];\n    // doThingsWith(response)\n}).catch(function(err) {\n    console.error(err);\n});"}],"params":[{"name":"request","description":"<p> The request object that will be sent.</p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.resource","description":"<p> REQUIRED: The resource for which the policy is being specified.  <code>resource</code> is usually specified as a path. For example, a Project  resource is specified as <code>projects/{project}</code>.</p>","types":["string"],"optional":false,"nullable":false},{"name":"request.policy","description":"<p> REQUIRED: The complete policy to be applied to the <code>resource</code>. The size of  the policy is limited to a few 10s of KB. An empty policy is a  valid policy but certain Cloud Platform services (such as Projects)  might reject them.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Policy'\n        })\">Policy</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this call, e.g, timeout,  retries, paginations, etc. See <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a> for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Policy'\n        })\">Policy</a>.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Policy'\n        })\">Policy</a>. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"getIamPolicy","name":"getIamPolicy","type":"instance","description":"<p>Gets the access control policy for a database resource. Returns an empty policy if a database exists but does not have a policy set.</p><p>Authorization requires <code>spanner.databases.getIamPolicy</code> permission on {@link resource}.</p>","source":"packages\\spanner\\src\\admin\\database\\v1\\database_admin_client.js#L807","resources":[],"examples":[{"code":"\nvar client = spannerV1.databaseAdminClient();\nvar formattedResource = client.databasePath(\"[PROJECT]\", \"[INSTANCE]\", \"[DATABASE]\");\nclient.getIamPolicy({resource: formattedResource}).then(function(responses) {\n    var response = responses[0];\n    // doThingsWith(response)\n}).catch(function(err) {\n    console.error(err);\n});"}],"params":[{"name":"request","description":"<p> The request object that will be sent.</p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.resource","description":"<p> REQUIRED: The resource for which the policy is being requested.  <code>resource</code> is usually specified as a path. For example, a Project  resource is specified as <code>projects/{project}</code>.</p>","types":["string"],"optional":false,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this call, e.g, timeout,  retries, paginations, etc. See <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a> for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Policy'\n        })\">Policy</a>.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Policy'\n        })\">Policy</a>. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"testIamPermissions","name":"testIamPermissions","type":"instance","description":"<p>Returns permissions that the caller has on the specified database resource.</p><p>Attempting this RPC on a non-existent Cloud Spanner database will result in a NOT_FOUND error if the user has <code>spanner.databases.list</code> permission on the containing Cloud Spanner instance. Otherwise returns an empty set of permissions.</p>","source":"packages\\spanner\\src\\admin\\database\\v1\\database_admin_client.js#L865","resources":[],"examples":[{"code":"\nvar client = spannerV1.databaseAdminClient();\nvar formattedResource = client.databasePath(\"[PROJECT]\", \"[INSTANCE]\", \"[DATABASE]\");\nvar permissions = [];\nvar request = {\n    resource: formattedResource,\n    permissions: permissions\n};\nclient.testIamPermissions(request).then(function(responses) {\n    var response = responses[0];\n    // doThingsWith(response)\n}).catch(function(err) {\n    console.error(err);\n});"}],"params":[{"name":"request","description":"<p> The request object that will be sent.</p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.resource","description":"<p> REQUIRED: The resource for which the policy detail is being requested.  <code>resource</code> is usually specified as a path. For example, a Project  resource is specified as <code>projects/{project}</code>.</p>","types":["string"],"optional":false,"nullable":false},{"name":"request.permissions","description":"<p> The set of permissions to check for the <code>resource</code>. Permissions with  wildcards (such as &#39;<em>&#39; or &#39;storage.</em>&#39;) are not allowed. For more  information see  <a href=\"https://cloud.google.com/iam/docs/overview#permissions\">IAM Overview</a>.</p>","types":["string[]"],"optional":false,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this call, e.g, timeout,  retries, paginations, etc. See <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a> for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'TestIamPermissionsResponse'\n        })\">TestIamPermissionsResponse</a>.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'TestIamPermissionsResponse'\n        })\">TestIamPermissionsResponse</a>. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"databaseAdminClient","name":"databaseAdminClient","type":"instance","description":"<p>Build a new instance of {@link DatabaseAdminClient}.</p>","source":"packages\\spanner\\src\\admin\\database\\v1\\database_admin_client.js#L903","resources":[],"examples":[],"params":[{"name":"opts","description":"<ul> <li>The optional parameters.</li> </ul> ","types":["Object"],"optional":true,"nullable":false},{"name":"opts.servicePath","description":"<p> The domain name of the API remote host.</p>","types":["String"],"optional":true,"nullable":false},{"name":"opts.port","description":"<p> The port on which to connect to the remote host.</p>","types":["number"],"optional":true,"nullable":false},{"name":"opts.sslCreds","description":"<p> A ClientCredentials for use with an SSL-enabled channel.</p>","types":["grpc.ClientCredentials"],"optional":true,"nullable":false},{"name":"opts.clientConfig","description":"<p> The customized config to build the call settings. See  {@link gax.constructSettings} for the format.</p>","types":["Object"],"optional":true,"nullable":false}],"exceptions":[],"returns":[]}],"path":"database_admin_client.json"}