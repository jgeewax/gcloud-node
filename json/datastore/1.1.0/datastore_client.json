{"id":"datastore/v1/datastore_client","type":"class","overview":"<p>\n  This class allows you interact with Cloud Datastore.\n</p>\n\n\n\n<p>\n  First, install <code>@google-cloud/datastore</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save @google-cloud/datastore</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>@google-cloud/datastore</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Google Cloud Platform</h4>\n<div hljs language=\"javascript\">\nvar datastore = require('@google-cloud/datastore')();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar datastore = require('@google-cloud/datastore')({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>@google-cloud/datastore</code> are outlined in our <a href=\"#/docs/datastore/v1.1.0/guides/authentication\">Authentication guide</a>.\n</p>\n","source":"packages\\datastore\\src\\v1\\datastore_client.js","parent":"datastore","children":[],"methods":[{"id":"DatastoreClient","name":"DatastoreClient","type":"constructor","description":"<p>Each RPC normalizes the partition IDs of the keys in its input entities, and always returns entities with keys with normalized partition IDs. This applies to all keys and entities, including those in values, except keys with both an empty path and an empty or unset partition ID. Normalization of input keys sets the project ID (if not already set) to the project ID from the request.</p><p>This will be created through a builder function which can be obtained by the module. See the following example of how to initialize the module and how to access to the builder.</p>","source":"packages\\datastore\\src\\v1\\datastore_client.js#L69","resources":[],"examples":[{"code":"var datastoreV1 = require('@google-cloud/datastore').v1({\n  // optional auth parameters.\n});\nvar client = datastoreV1.datastoreClient();"}],"params":[],"exceptions":[],"returns":[]},{"id":"getProjectId","name":"getProjectId","type":"instance","description":"<p>Get the project ID used by this class.</p>","source":"packages\\datastore\\src\\v1\\datastore_client.js#L126","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"lookup","name":"lookup","type":"instance","description":"<p>Looks up entities by key.</p>","source":"packages\\datastore\\src\\v1\\datastore_client.js#L176","resources":[],"examples":[{"code":"\nvar client = datastoreV1.datastoreClient();\nvar projectId = '';\nvar readOptions = {};\nvar keys = [];\nvar request = {\n    projectId: projectId,\n    readOptions: readOptions,\n    keys: keys\n};\nclient.lookup(request).then(function(responses) {\n    var response = responses[0];\n    // doThingsWith(response)\n}).catch(function(err) {\n    console.error(err);\n});"}],"params":[{"name":"request","description":"<p> The request object that will be sent.</p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.projectId","description":"<p> The ID of the project against which to make the request.</p>","types":["string"],"optional":false,"nullable":false},{"name":"request.readOptions","description":"<p> The options for this lookup request.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ReadOptions'\n        })\">ReadOptions</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'ReadOptions'\n        })\">ReadOptions</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.keys","description":"<p> Keys of entities to look up.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Key'\n        })\">Key</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Key'\n        })\">Key</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this call, e.g, timeout,  retries, paginations, etc. See <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a> for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is an object representing <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'LookupResponse'\n        })\">LookupResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'LookupResponse'\n        })\">LookupResponse</a>.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is an object representing <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'LookupResponse'\n        })\">LookupResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'LookupResponse'\n        })\">LookupResponse</a>. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"runQuery","name":"runQuery","type":"instance","description":"<p>Queries for entities.</p>","source":"packages\\datastore\\src\\v1\\datastore_client.js#L243","resources":[],"examples":[{"code":"\nvar client = datastoreV1.datastoreClient();\nvar projectId = '';\nvar partitionId = {};\nvar readOptions = {};\nvar request = {\n    projectId: projectId,\n    partitionId: partitionId,\n    readOptions: readOptions\n};\nclient.runQuery(request).then(function(responses) {\n    var response = responses[0];\n    // doThingsWith(response)\n}).catch(function(err) {\n    console.error(err);\n});"}],"params":[{"name":"request","description":"<p> The request object that will be sent.</p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.projectId","description":"<p> The ID of the project against which to make the request.</p>","types":["string"],"optional":false,"nullable":false},{"name":"request.partitionId","description":"<p> Entities are partitioned into subsets, identified by a partition ID.  Queries are scoped to a single partition.  This partition ID is normalized with the standard default context  partition ID.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'PartitionId'\n        })\">PartitionId</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'PartitionId'\n        })\">PartitionId</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.readOptions","description":"<p> The options for this query.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ReadOptions'\n        })\">ReadOptions</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'ReadOptions'\n        })\">ReadOptions</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.query","description":"<p> The query to run.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Query'\n        })\">Query</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Query'\n        })\">Query</a></p>","types":["Object"],"optional":true,"nullable":false},{"name":"request.gqlQuery","description":"<p> The GQL query to run.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'GqlQuery'\n        })\">GqlQuery</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'GqlQuery'\n        })\">GqlQuery</a></p>","types":["Object"],"optional":true,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this call, e.g, timeout,  retries, paginations, etc. See <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a> for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is an object representing <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'RunQueryResponse'\n        })\">RunQueryResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'RunQueryResponse'\n        })\">RunQueryResponse</a>.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is an object representing <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'RunQueryResponse'\n        })\">RunQueryResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'RunQueryResponse'\n        })\">RunQueryResponse</a>. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"beginTransaction","name":"beginTransaction","type":"instance","description":"<p>Begins a new transaction.</p>","source":"packages\\datastore\\src\\v1\\datastore_client.js#L284","resources":[],"examples":[{"code":"\nvar client = datastoreV1.datastoreClient();\nvar projectId = '';\nclient.beginTransaction({projectId: projectId}).then(function(responses) {\n    var response = responses[0];\n    // doThingsWith(response)\n}).catch(function(err) {\n    console.error(err);\n});"}],"params":[{"name":"request","description":"<p> The request object that will be sent.</p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.projectId","description":"<p> The ID of the project against which to make the request.</p>","types":["string"],"optional":false,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this call, e.g, timeout,  retries, paginations, etc. See <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a> for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is an object representing <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BeginTransactionResponse'\n        })\">BeginTransactionResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BeginTransactionResponse'\n        })\">BeginTransactionResponse</a>.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is an object representing <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BeginTransactionResponse'\n        })\">BeginTransactionResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BeginTransactionResponse'\n        })\">BeginTransactionResponse</a>. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"commit","name":"commit","type":"instance","description":"<p>Commits a transaction, optionally creating, deleting or modifying some entities.</p>","source":"packages\\datastore\\src\\v1\\datastore_client.js#L357","resources":[],"examples":[{"code":"\nvar client = datastoreV1.datastoreClient();\nvar projectId = '';\nvar mode = datastoreV1.CommitRequest.Mode.MODE_UNSPECIFIED;\nvar mutations = [];\nvar request = {\n    projectId: projectId,\n    mode: mode,\n    mutations: mutations\n};\nclient.commit(request).then(function(responses) {\n    var response = responses[0];\n    // doThingsWith(response)\n}).catch(function(err) {\n    console.error(err);\n});"}],"params":[{"name":"request","description":"<p> The request object that will be sent.</p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.projectId","description":"<p> The ID of the project against which to make the request.</p>","types":["string"],"optional":false,"nullable":false},{"name":"request.mode","description":"<p> The type of commit to perform. Defaults to <code>TRANSACTIONAL</code>.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Mode'\n        })\">Mode</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Mode'\n        })\">Mode</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"request.mutations","description":"<p> The mutations to perform.</p><p> When mode is <code>TRANSACTIONAL</code>, mutations affecting a single entity are  applied in order. The following sequences of mutations affecting a single  entity are not permitted in a single <code>Commit</code> request:</p><ul> <li><code>insert</code> followed by <code>insert</code></li> <li><code>update</code> followed by <code>insert</code></li> <li><code>upsert</code> followed by <code>insert</code></li> <li><p><code>delete</code> followed by <code>update</code></p><p>When mode is <code>NON_TRANSACTIONAL</code>, no two mutations may affect a single entity.</p><p>This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Mutation'\n        })\">Mutation</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Mutation'\n        })\">Mutation</a></p></li> </ul> ","types":["Object[]"],"optional":false,"nullable":false},{"name":"request.transaction","description":"<p> The identifier of the transaction associated with the commit. A  transaction identifier is returned by a call to  {@link Datastore.BeginTransaction}.</p>","types":["string"],"optional":true,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this call, e.g, timeout,  retries, paginations, etc. See <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a> for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is an object representing <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'CommitResponse'\n        })\">CommitResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'CommitResponse'\n        })\">CommitResponse</a>.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is an object representing <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'CommitResponse'\n        })\">CommitResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'CommitResponse'\n        })\">CommitResponse</a>. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"rollback","name":"rollback","type":"instance","description":"<p>Rolls back a transaction.</p>","source":"packages\\datastore\\src\\v1\\datastore_client.js#L406","resources":[],"examples":[{"code":"\nvar client = datastoreV1.datastoreClient();\nvar projectId = '';\nvar transaction = '';\nvar request = {\n    projectId: projectId,\n    transaction: transaction\n};\nclient.rollback(request).then(function(responses) {\n    var response = responses[0];\n    // doThingsWith(response)\n}).catch(function(err) {\n    console.error(err);\n});"}],"params":[{"name":"request","description":"<p> The request object that will be sent.</p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.projectId","description":"<p> The ID of the project against which to make the request.</p>","types":["string"],"optional":false,"nullable":false},{"name":"request.transaction","description":"<p> The transaction identifier, returned by a call to  {@link Datastore.BeginTransaction}.</p>","types":["string"],"optional":false,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this call, e.g, timeout,  retries, paginations, etc. See <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a> for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is an object representing <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'RollbackResponse'\n        })\">RollbackResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'RollbackResponse'\n        })\">RollbackResponse</a>.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is an object representing <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'RollbackResponse'\n        })\">RollbackResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'RollbackResponse'\n        })\">RollbackResponse</a>. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"allocateIds","name":"allocateIds","type":"instance","description":"<p>Allocates IDs for the given keys, which is useful for referencing an entity before it is inserted.</p>","source":"packages\\datastore\\src\\v1\\datastore_client.js#L458","resources":[],"examples":[{"code":"\nvar client = datastoreV1.datastoreClient();\nvar projectId = '';\nvar keys = [];\nvar request = {\n    projectId: projectId,\n    keys: keys\n};\nclient.allocateIds(request).then(function(responses) {\n    var response = responses[0];\n    // doThingsWith(response)\n}).catch(function(err) {\n    console.error(err);\n});"}],"params":[{"name":"request","description":"<p> The request object that will be sent.</p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.projectId","description":"<p> The ID of the project against which to make the request.</p>","types":["string"],"optional":false,"nullable":false},{"name":"request.keys","description":"<p> A list of keys with incomplete key paths for which to allocate IDs.  No key may be reserved/read-only.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Key'\n        })\">Key</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Key'\n        })\">Key</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this call, e.g, timeout,  retries, paginations, etc. See <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a> for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is an object representing <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'AllocateIdsResponse'\n        })\">AllocateIdsResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'AllocateIdsResponse'\n        })\">AllocateIdsResponse</a>.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is an object representing <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'AllocateIdsResponse'\n        })\">AllocateIdsResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'AllocateIdsResponse'\n        })\">AllocateIdsResponse</a>. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"datastoreClient","name":"datastoreClient","type":"instance","description":"<p>Build a new instance of {@link DatastoreClient}.</p>","source":"packages\\datastore\\src\\v1\\datastore_client.js#L496","resources":[],"examples":[],"params":[{"name":"opts","description":"<ul> <li>The optional parameters.</li> </ul> ","types":["Object"],"optional":true,"nullable":false},{"name":"opts.servicePath","description":"<p> The domain name of the API remote host.</p>","types":["String"],"optional":true,"nullable":false},{"name":"opts.port","description":"<p> The port on which to connect to the remote host.</p>","types":["number"],"optional":true,"nullable":false},{"name":"opts.sslCreds","description":"<p> A ClientCredentials for use with an SSL-enabled channel.</p>","types":["grpc.ClientCredentials"],"optional":true,"nullable":false},{"name":"opts.clientConfig","description":"<p> The customized config to build the call settings. See  {@link gax.constructSettings} for the format.</p>","types":["Object"],"optional":true,"nullable":false}],"exceptions":[],"returns":[]}],"path":"datastore_client.json"}