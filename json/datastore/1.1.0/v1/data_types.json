{"name":"Data Types","methods":[{"id":"LookupRequest","name":"LookupRequest","type":"instance","description":"","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L41","resources":[],"examples":[],"params":[{"name":"projectId","description":"<p> The ID of the project against which to make the request.</p>","types":["string"],"optional":false,"nullable":false},{"name":"readOptions","description":"<p> The options for this lookup request.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ReadOptions'\n        })\">ReadOptions</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'ReadOptions'\n        })\">ReadOptions</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"keys","description":"<p> Keys of entities to look up.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Key'\n        })\">Key</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Key'\n        })\">Key</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"LookupResponse","name":"LookupResponse","type":"instance","description":"","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L72","resources":[],"examples":[],"params":[{"name":"found","description":"<p> Entities found as <code>ResultType.FULL</code> entities. The order of results in this  field is undefined and has no relation to the order of the keys in the  input.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'EntityResult'\n        })\">EntityResult</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'EntityResult'\n        })\">EntityResult</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"missing","description":"<p> Entities not found as <code>ResultType.KEY_ONLY</code> entities. The order of results  in this field is undefined and has no relation to the order of the keys  in the input.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'EntityResult'\n        })\">EntityResult</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'EntityResult'\n        })\">EntityResult</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"deferred","description":"<p> A list of keys that were not looked up due to resource constraints. The  order of results in this field is undefined and has no relation to the  order of the keys in the input.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Key'\n        })\">Key</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Key'\n        })\">Key</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"RunQueryRequest","name":"RunQueryRequest","type":"instance","description":"","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L108","resources":[],"examples":[],"params":[{"name":"projectId","description":"<p> The ID of the project against which to make the request.</p>","types":["string"],"optional":false,"nullable":false},{"name":"partitionId","description":"<p> Entities are partitioned into subsets, identified by a partition ID.  Queries are scoped to a single partition.  This partition ID is normalized with the standard default context  partition ID.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'PartitionId'\n        })\">PartitionId</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'PartitionId'\n        })\">PartitionId</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"readOptions","description":"<p> The options for this query.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ReadOptions'\n        })\">ReadOptions</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'ReadOptions'\n        })\">ReadOptions</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"query","description":"<p> The query to run.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Query'\n        })\">Query</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Query'\n        })\">Query</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"gqlQuery","description":"<p> The GQL query to run.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'GqlQuery'\n        })\">GqlQuery</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'GqlQuery'\n        })\">GqlQuery</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"RunQueryResponse","name":"RunQueryResponse","type":"instance","description":"","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L128","resources":[],"examples":[],"params":[{"name":"batch","description":"<p> A batch of query results (always present).</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'QueryResultBatch'\n        })\">QueryResultBatch</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'QueryResultBatch'\n        })\">QueryResultBatch</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"query","description":"<p> The parsed form of the <code>GqlQuery</code> from the request, if it was set.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Query'\n        })\">Query</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Query'\n        })\">Query</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"BeginTransactionRequest","name":"BeginTransactionRequest","type":"instance","description":"","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L141","resources":[],"examples":[],"params":[{"name":"projectId","description":"<p> The ID of the project against which to make the request.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"BeginTransactionResponse","name":"BeginTransactionResponse","type":"instance","description":"","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L154","resources":[],"examples":[],"params":[{"name":"transaction","description":"<p> The transaction identifier (always present).</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"RollbackRequest","name":"RollbackRequest","type":"instance","description":"","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L171","resources":[],"examples":[],"params":[{"name":"projectId","description":"<p> The ID of the project against which to make the request.</p>","types":["string"],"optional":false,"nullable":false},{"name":"transaction","description":"<p> The transaction identifier, returned by a call to  {@link Datastore.BeginTransaction}.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"RollbackResponse","name":"RollbackResponse","type":"instance","description":"","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L181","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"CommitRequest","name":"CommitRequest","type":"instance","description":"","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L221","resources":[],"examples":[],"params":[{"name":"projectId","description":"<p> The ID of the project against which to make the request.</p>","types":["string"],"optional":false,"nullable":false},{"name":"mode","description":"<p> The type of commit to perform. Defaults to <code>TRANSACTIONAL</code>.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Mode'\n        })\">Mode</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Mode'\n        })\">Mode</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"transaction","description":"<p> The identifier of the transaction associated with the commit. A  transaction identifier is returned by a call to  {@link Datastore.BeginTransaction}.</p>","types":["string"],"optional":false,"nullable":false},{"name":"mutations","description":"<p> The mutations to perform.</p><p> When mode is <code>TRANSACTIONAL</code>, mutations affecting a single entity are  applied in order. The following sequences of mutations affecting a single  entity are not permitted in a single <code>Commit</code> request:</p><ul> <li><code>insert</code> followed by <code>insert</code></li> <li><code>update</code> followed by <code>insert</code></li> <li><code>upsert</code> followed by <code>insert</code></li> <li><p><code>delete</code> followed by <code>update</code></p><p>When mode is <code>NON_TRANSACTIONAL</code>, no two mutations may affect a single entity.</p><p>This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Mutation'\n        })\">Mutation</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Mutation'\n        })\">Mutation</a></p></li> </ul> ","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Mode","name":"Mode","type":"instance","description":"<p>The modes available for commits.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L229","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"CommitResponse","name":"CommitResponse","type":"instance","description":"","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L265","resources":[],"examples":[],"params":[{"name":"mutationResults","description":"<p> The result of performing the mutations.  The i-th mutation result corresponds to the i-th mutation in the request.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'MutationResult'\n        })\">MutationResult</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'MutationResult'\n        })\">MutationResult</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"indexUpdates","description":"<p> The number of index entries updated during the commit, or zero if none were  updated.</p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"AllocateIdsRequest","name":"AllocateIdsRequest","type":"instance","description":"","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L284","resources":[],"examples":[],"params":[{"name":"projectId","description":"<p> The ID of the project against which to make the request.</p>","types":["string"],"optional":false,"nullable":false},{"name":"keys","description":"<p> A list of keys with incomplete key paths for which to allocate IDs.  No key may be reserved/read-only.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Key'\n        })\">Key</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Key'\n        })\">Key</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"AllocateIdsResponse","name":"AllocateIdsResponse","type":"instance","description":"","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L300","resources":[],"examples":[],"params":[{"name":"keys","description":"<p> The keys specified in the request (in the same order), each with  its key path completed with a newly allocated ID.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Key'\n        })\">Key</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Key'\n        })\">Key</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Mutation","name":"Mutation","type":"instance","description":"<p>A mutation to apply to an entity.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L338","resources":[],"examples":[],"params":[{"name":"insert","description":"<p> The entity to insert. The entity must not already exist.  The entity key&#39;s final path element may be incomplete.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Entity'\n        })\">Entity</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Entity'\n        })\">Entity</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"update","description":"<p> The entity to update. The entity must already exist.  Must have a complete key path.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Entity'\n        })\">Entity</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Entity'\n        })\">Entity</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"upsert","description":"<p> The entity to upsert. The entity may or may not already exist.  The entity key&#39;s final path element may be incomplete.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Entity'\n        })\">Entity</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Entity'\n        })\">Entity</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"delete","description":"<p> The key of the entity to delete. The entity may or may not already exist.  Must have a complete key path and must not be reserved/read-only.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Key'\n        })\">Key</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Key'\n        })\">Key</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"baseVersion","description":"<p> The version of the entity that this mutation is being applied to. If this  does not match the current version on the server, the mutation conflicts.</p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"MutationResult","name":"MutationResult","type":"instance","description":"<p>The result of applying a mutation.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L365","resources":[],"examples":[],"params":[{"name":"key","description":"<p> The automatically allocated key.  Set only when the mutation allocated a key.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Key'\n        })\">Key</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Key'\n        })\">Key</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"version","description":"<p> The version of the entity on the server after processing the mutation. If  the mutation doesn&#39;t change anything on the server, then the version will  be the version of the current entity or, if no entity is present, a version  that is strictly greater than the version of any previous entity and less  than the version of any possible future entity.</p>","types":["number"],"optional":false,"nullable":false},{"name":"conflictDetected","description":"<p> Whether a conflict was detected for this mutation. Always false when a  conflict detection strategy field is not set in the mutation.</p>","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ReadOptions","name":"ReadOptions","type":"instance","description":"<p>The options shared by read requests.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L386","resources":[],"examples":[],"params":[{"name":"readConsistency","description":"<p> The non-transactional read consistency to use.  Cannot be set to <code>STRONG</code> for global queries.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ReadConsistency'\n        })\">ReadConsistency</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'ReadConsistency'\n        })\">ReadConsistency</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"transaction","description":"<p> The identifier of the transaction in which to read. A  transaction identifier is returned by a call to  {@link Datastore.BeginTransaction}.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ReadConsistency","name":"ReadConsistency","type":"instance","description":"<p>The possible values for read consistencies.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L394","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"PartitionId","name":"PartitionId","type":"instance","description":"<p>A partition ID identifies a grouping of entities. The grouping is always by project and namespace, however the namespace ID may be empty.</p><p>A partition ID contains several dimensions: project ID and namespace ID.</p><p>Partition dimensions:</p><ul> <li>May be <code>&quot;&quot;</code>.</li> <li>Must be valid UTF-8 bytes.</li> <li>Must have values that match regex <code>[A-Za-z\\d\\.\\-_]{1,100}</code> If the value of any dimension matches regex <code>__.*__</code>, the partition is reserved/read-only. A reserved/read-only partition ID is forbidden in certain documented contexts.</li> </ul> <p>Foreign partition IDs (in which the project ID does not match the context project ID ) are discouraged. Reads and writes of foreign partition IDs may fail if the project is not in an active state.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_entity.js#L52","resources":[],"examples":[],"params":[{"name":"projectId","description":"<p> The ID of the project to which the entities belong.</p>","types":["string"],"optional":false,"nullable":false},{"name":"namespaceId","description":"<p> If not empty, the ID of the namespace to which the entities belong.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Key","name":"Key","type":"instance","description":"<p>A unique identifier for an entity. If a key&#39;s partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_entity.js#L92","resources":[],"examples":[],"params":[{"name":"partitionId","description":"<p> Entities are partitioned into subsets, currently identified by a project  ID and namespace ID.  Queries are scoped to a single partition.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'PartitionId'\n        })\">PartitionId</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'PartitionId'\n        })\">PartitionId</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"path","description":"<p> The entity path.  An entity path consists of one or more elements composed of a kind and a  string or numerical identifier, which identify entities. The first  element identifies a <em>root entity</em>, the second element identifies  a <em>child</em> of the root entity, the third element identifies a child of the  second entity, and so forth. The entities identified by all prefixes of  the path are called the element&#39;s <em>ancestors</em>.</p><p> An entity path is always fully complete: <em>all</em> of the entity&#39;s ancestors  are required to be in the path along with the entity identifier itself.  The only exception is that in some documented cases, the identifier in the  last path element (for the entity) itself may be omitted. For example,  the last path element of the key of <code>Mutation.insert</code> may have no  identifier.</p><p> A path can never be empty, and a path can have at most 100 elements.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'PathElement'\n        })\">PathElement</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'PathElement'\n        })\">PathElement</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"PathElement","name":"PathElement","type":"instance","description":"<p>A (kind, ID/name) pair used to construct a key path.</p><p>If either name or ID is set, the element is complete. If neither is set, the element is incomplete.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_entity.js#L121","resources":[],"examples":[],"params":[{"name":"kind","description":"<p> The kind of the entity.  A kind matching regex <code>__.*__</code> is reserved/read-only.  A kind must not contain more than 1500 bytes when UTF-8 encoded.  Cannot be <code>&quot;&quot;</code>.</p>","types":["string"],"optional":false,"nullable":false},{"name":"id","description":"<p> The auto-allocated ID of the entity.  Never equal to zero. Values less than zero are discouraged and may not  be supported in the future.</p>","types":["number"],"optional":false,"nullable":false},{"name":"name","description":"<p> The name of the entity.  A name matching regex <code>__.*__</code> is reserved/read-only.  A name must not be more than 1500 bytes when UTF-8 encoded.  Cannot be <code>&quot;&quot;</code>.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ArrayValue","name":"ArrayValue","type":"instance","description":"<p>An array value.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_entity.js#L139","resources":[],"examples":[],"params":[{"name":"values","description":"<p> Values in the array.  The order of this array may not be preserved if it contains a mix of  indexed and unindexed values.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Value'\n        })\">Value</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Value'\n        })\">Value</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Value","name":"Value","type":"instance","description":"<p>A message that can hold any of the supported value types and associated metadata.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_entity.js#L216","resources":[],"examples":[],"params":[{"name":"nullValue","description":"<p> A null value.</p><p> The number should be among the values of google.protobuf.NullValue</p>","types":["number"],"optional":false,"nullable":false},{"name":"booleanValue","description":"<p> A boolean value.</p>","types":["boolean"],"optional":false,"nullable":false},{"name":"integerValue","description":"<p> An integer value.</p>","types":["number"],"optional":false,"nullable":false},{"name":"doubleValue","description":"<p> A double value.</p>","types":["number"],"optional":false,"nullable":false},{"name":"timestampValue","description":"<p> A timestamp value.  When stored in the Datastore, precise only to microseconds;  any additional precision is rounded down.</p><p> This object should have the same structure as google.protobuf.Timestamp</p>","types":["Object"],"optional":false,"nullable":false},{"name":"keyValue","description":"<p> A key value.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Key'\n        })\">Key</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Key'\n        })\">Key</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"stringValue","description":"<p> A UTF-8 encoded string value.  When <code>exclude_from_indexes</code> is false (it is indexed) , may have at most 1500 bytes.  Otherwise, may be set to at least 1,000,000 bytes.</p>","types":["string"],"optional":false,"nullable":false},{"name":"blobValue","description":"<p> A blob value.  May have at most 1,000,000 bytes.  When <code>exclude_from_indexes</code> is false, may have at most 1500 bytes.  In JSON requests, must be base64-encoded.</p>","types":["string"],"optional":false,"nullable":false},{"name":"geoPointValue","description":"<p> A geo point value representing a point on the surface of Earth.</p><p> This object should have the same structure as google.type.LatLng</p>","types":["Object"],"optional":false,"nullable":false},{"name":"entityValue","description":"<p> An entity value.</p><ul> <li>May have no key.</li> <li>May have a key with an incomplete key path.</li> <li><p>May have a reserved/read-only key.</p><p>This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Entity'\n        })\">Entity</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Entity'\n        })\">Entity</a></p></li> </ul> ","types":["Object"],"optional":false,"nullable":false},{"name":"arrayValue","description":"<p> An array value.  Cannot contain another array value.  A <code>Value</code> instance that sets field <code>array_value</code> must not set fields  <code>meaning</code> or <code>exclude_from_indexes</code>.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ArrayValue'\n        })\">ArrayValue</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'ArrayValue'\n        })\">ArrayValue</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"meaning","description":"<p> The <code>meaning</code> field should only be populated for backwards compatibility.</p>","types":["number"],"optional":false,"nullable":false},{"name":"excludeFromIndexes","description":"<p> If the value should be excluded from all indexes including those defined  explicitly.</p>","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Entity","name":"Entity","type":"instance","description":"<p>A Datastore data object.</p><p>An entity is limited to 1 megabyte when stored. That <em>roughly</em> corresponds to a limit of 1 megabyte for the serialized form of this message.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_entity.js#L248","resources":[],"examples":[],"params":[{"name":"key","description":"<p> The entity&#39;s key.</p><p> An entity must have a key, unless otherwise documented (for example,  an entity in <code>Value.entity_value</code> may have no key).  An entity&#39;s kind is its key path&#39;s last element&#39;s kind,  or null if it has no key.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Key'\n        })\">Key</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Key'\n        })\">Key</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"properties","description":"<p> The entity&#39;s properties.  The map&#39;s keys are property names.  A property name matching regex <code>__.*__</code> is reserved.  A reserved property name is forbidden in certain documented contexts.  The name must not contain more than 500 characters.  The name cannot be <code>&quot;&quot;</code>.</p>","types":["Object.<string, Object>"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"type":"instance","description":"<p>Wrapper message for <code>double</code>.</p><p>The JSON representation for <code>DoubleValue</code> is JSON number.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_google_protobuf_wrappers.js#L33","resources":[],"examples":[],"params":[{"name":"value","description":"<p> The double value.</p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"EntityResult","name":"EntityResult","type":"instance","description":"<p>The result of fetching an entity from Datastore.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_query.js#L48","resources":[],"examples":[],"params":[{"name":"entity","description":"<p> The resulting entity.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Entity'\n        })\">Entity</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Entity'\n        })\">Entity</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"version","description":"<p> The version of the entity, a strictly positive number that monotonically  increases with changes to the entity.</p><p> This field is set for {@link <code>FULL</code>} entity  results.</p><p> For {@link missing} entities in <code>LookupResponse</code>, this  is the version of the snapshot that was used to look up the entity, and it  is always set except for eventually consistent reads.</p>","types":["number"],"optional":false,"nullable":false},{"name":"cursor","description":"<p> A cursor that points to the position after the result entity.  Set only when the <code>EntityResult</code> is part of a <code>QueryResultBatch</code> message.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ResultType","name":"ResultType","type":"instance","description":"<p>Specifies what data the &#39;entity&#39; field contains. A <code>ResultType</code> is either implied (for example, in <code>LookupResponse.missing</code> from <code>datastore.proto</code>, it is always <code>KEY_ONLY</code>) or specified by context (for example, in message <code>QueryResultBatch</code>, field <code>entity_result_type</code> specifies a <code>ResultType</code> for all the values in field <code>entity_results</code>).</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_query.js#L60","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"Query","name":"Query","type":"instance","description":"<p>A query for entities.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_query.js#L140","resources":[],"examples":[],"params":[{"name":"projection","description":"<p> The projection to return. Defaults to returning all properties.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Projection'\n        })\">Projection</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Projection'\n        })\">Projection</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"kind","description":"<p> The kinds to query (if empty, returns entities of all kinds).  Currently at most 1 kind may be specified.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'KindExpression'\n        })\">KindExpression</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'KindExpression'\n        })\">KindExpression</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"filter","description":"<p> The filter to apply.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Filter'\n        })\">Filter</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Filter'\n        })\">Filter</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"order","description":"<p> The order to apply to the query results (if empty, order is unspecified).</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'PropertyOrder'\n        })\">PropertyOrder</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'PropertyOrder'\n        })\">PropertyOrder</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"distinctOn","description":"<p> The properties to make distinct. The query results will contain the first  result for each distinct combination of values for the given properties  (if empty, all results are returned).</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'PropertyReference'\n        })\">PropertyReference</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'PropertyReference'\n        })\">PropertyReference</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"startCursor","description":"<p> A starting point for the query results. Query cursors are  returned in query result batches and  <a href=\"https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets\">can only be used to continue the same query</a>.</p>","types":["string"],"optional":false,"nullable":false},{"name":"endCursor","description":"<p> An ending point for the query results. Query cursors are  returned in query result batches and  <a href=\"https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets\">can only be used to limit the same query</a>.</p>","types":["string"],"optional":false,"nullable":false},{"name":"offset","description":"<p> The number of results to skip. Applies before limit, but after all other  constraints. Optional. Must be &gt;= 0 if specified.</p>","types":["number"],"optional":false,"nullable":false},{"name":"limit","description":"<p> The maximum number of results to return. Applies after all other  constraints. Optional.  Unspecified is interpreted as no limit.  Must be &gt;= 0 if specified.</p><p> This object should have the same structure as google.protobuf.Int32Value</p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"KindExpression","name":"KindExpression","type":"instance","description":"<p>A representation of a kind.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_query.js#L153","resources":[],"examples":[],"params":[{"name":"name","description":"<p> The name of the kind.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"PropertyReference","name":"PropertyReference","type":"instance","description":"<p>A reference to a property relative to the kind expressions.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_query.js#L167","resources":[],"examples":[],"params":[{"name":"name","description":"<p> The name of the property.  If name includes &quot;.&quot;s, it may be interpreted as a property name path.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Projection","name":"Projection","type":"instance","description":"<p>A representation of a property in a projection.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_query.js#L182","resources":[],"examples":[],"params":[{"name":"property","description":"<p> The property to project.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'PropertyReference'\n        })\">PropertyReference</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'PropertyReference'\n        })\">PropertyReference</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"PropertyOrder","name":"PropertyOrder","type":"instance","description":"<p>The desired order for a specific property.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_query.js#L202","resources":[],"examples":[],"params":[{"name":"property","description":"<p> The property to order by.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'PropertyReference'\n        })\">PropertyReference</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'PropertyReference'\n        })\">PropertyReference</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"direction","description":"<p> The direction to order by. Defaults to <code>ASCENDING</code>.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Direction'\n        })\">Direction</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Direction'\n        })\">Direction</a></p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Direction","name":"Direction","type":"instance","description":"<p>The sort direction.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_query.js#L210","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"Filter","name":"Filter","type":"instance","description":"<p>A holder for any type of filter.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_query.js#L245","resources":[],"examples":[],"params":[{"name":"compositeFilter","description":"<p> A composite filter.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'CompositeFilter'\n        })\">CompositeFilter</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'CompositeFilter'\n        })\">CompositeFilter</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"propertyFilter","description":"<p> A filter on a property.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'PropertyFilter'\n        })\">PropertyFilter</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'PropertyFilter'\n        })\">PropertyFilter</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"CompositeFilter","name":"CompositeFilter","type":"instance","description":"<p>A filter that merges multiple other filters using the given operator.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_query.js#L266","resources":[],"examples":[],"params":[{"name":"op","description":"<p> The operator for combining multiple filters.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Operator'\n        })\">Operator</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Operator'\n        })\">Operator</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"filters","description":"<p> The list of filters to combine.  Must contain at least one filter.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Filter'\n        })\">Filter</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Filter'\n        })\">Filter</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Operator","name":"Operator","type":"instance","description":"<p>A composite filter operator.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_query.js#L274","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"PropertyFilter","name":"PropertyFilter","type":"instance","description":"<p>A filter on a specific property.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_query.js#L309","resources":[],"examples":[],"params":[{"name":"property","description":"<p> The property to filter by.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'PropertyReference'\n        })\">PropertyReference</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'PropertyReference'\n        })\">PropertyReference</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"op","description":"<p> The operator to filter by.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Operator'\n        })\">Operator</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Operator'\n        })\">Operator</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"value","description":"<p> The value to compare the property to.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Value'\n        })\">Value</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Value'\n        })\">Value</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"GqlQuery","name":"GqlQuery","type":"instance","description":"<p>A <a href=\"https://cloud.google.com/datastore/docs/apis/gql/gql_reference\">GQL query</a>.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_query.js#L388","resources":[],"examples":[],"params":[{"name":"queryString","description":"<p> A string of the format described  <a href=\"https://cloud.google.com/datastore/docs/apis/gql/gql_reference\">here</a>.</p>","types":["string"],"optional":false,"nullable":false},{"name":"allowLiterals","description":"<p> When false, the query string must not contain any literals and instead must  bind all values. For example,  <code>SELECT * FROM Kind WHERE a = &#39;string literal&#39;</code> is not allowed, while  <code>SELECT * FROM Kind WHERE a = @value</code> is.</p>","types":["boolean"],"optional":false,"nullable":false},{"name":"namedBindings","description":"<p> For each non-reserved named binding site in the query string, there must be  a named parameter with that name, but not necessarily the inverse.</p><p> Key must match regex <code>[A-Za-z_$][A-Za-z_$0-9]*</code>, must not match regex  <code>__.*__</code>, and must not be <code>&quot;&quot;</code>.</p>","types":["Object.<string, Object>"],"optional":false,"nullable":false},{"name":"positionalBindings","description":"<p> Numbered binding site @1 references the first numbered parameter,  effectively using 1-based indexing, rather than the usual 0.</p><p> For each binding site numbered i in <code>query_string</code>, there must be an i-th  numbered parameter. The inverse must also be true.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'GqlQueryParameter'\n        })\">GqlQueryParameter</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'GqlQueryParameter'\n        })\">GqlQueryParameter</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"GqlQueryParameter","name":"GqlQueryParameter","type":"instance","description":"<p>A binding parameter for a GQL query.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_query.js#L407","resources":[],"examples":[],"params":[{"name":"value","description":"<p> A value parameter.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Value'\n        })\">Value</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Value'\n        })\">Value</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"cursor","description":"<p> A query cursor. Query cursors are returned in query  result batches.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"QueryResultBatch","name":"QueryResultBatch","type":"instance","description":"<p>A batch of results produced by a query.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_query.js#L453","resources":[],"examples":[],"params":[{"name":"skippedResults","description":"<p> The number of results skipped, typically because of an offset.</p>","types":["number"],"optional":false,"nullable":false},{"name":"skippedCursor","description":"<p> A cursor that points to the position after the last skipped result.  Will be set when <code>skipped_results</code> != 0.</p>","types":["string"],"optional":false,"nullable":false},{"name":"entityResultType","description":"<p> The result type for every entity in <code>entity_results</code>.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ResultType'\n        })\">ResultType</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'ResultType'\n        })\">ResultType</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"entityResults","description":"<p> The results for this batch.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'EntityResult'\n        })\">EntityResult</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'EntityResult'\n        })\">EntityResult</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"endCursor","description":"<p> A cursor that points to the position after the last result in the batch.</p>","types":["string"],"optional":false,"nullable":false},{"name":"moreResults","description":"<p> The state of the query after the current batch.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'MoreResultsType'\n        })\">MoreResultsType</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'MoreResultsType'\n        })\">MoreResultsType</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"snapshotVersion","description":"<p> The version number of the snapshot this batch was returned from.  This applies to the range of results from the query&#39;s <code>start_cursor</code> (or  the beginning of the query if no cursor was given) to this batch&#39;s  <code>end_cursor</code> (not the query&#39;s <code>end_cursor</code>).</p><p> In a single transaction, subsequent query result batches for the same query  can have a greater snapshot version number. Each batch&#39;s snapshot version  is valid for all preceding batches.  The value will be zero for eventually consistent queries.</p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"MoreResultsType","name":"MoreResultsType","type":"instance","description":"<p>The possible values for the <code>more_results</code> field.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_query.js#L461","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]}],"path":"v1/data_types.json","description":"\n          <table class=\"table\">\n            <thead>\n              <tr>\n                <th>Class</th>\n                <th>Description</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr ng-repeat=\"method in service.methods\" ng-if=\"method.name\">\n                <td>\n                  <a ui-sref=\"docs.service({ method: method.id })\" class=\"skip-external-link\">\n                    {{method.name}}\n                  </a>\n                </td>\n                <td>\n                  <span ng-bind-html=\"method.description\">\n                    {{method.description}}\n                  </span>\n                  <span ng-if=\"!method.description && method.name.includes('Request')\">\n                    The request for {{method.name}}.\n                  </span>\n                  <span ng-if=\"!method.description && method.name.includes('Response')\">\n                    The response for {{method.name}}.\n                  </span>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        ","id":"datastore/v1/data_types"}