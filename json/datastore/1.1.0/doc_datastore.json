{"id":"datastore/v1/doc/doc_datastore","type":"class","overview":"<p>\n  This class allows you interact with Cloud Datastore.\n</p>\n\n\n\n<p>\n  First, install <code>@google-cloud/datastore</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save @google-cloud/datastore</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>@google-cloud/datastore</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Google Cloud Platform</h4>\n<div hljs language=\"javascript\">\nvar datastore = require('@google-cloud/datastore')();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar datastore = require('@google-cloud/datastore')({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>@google-cloud/datastore</code> are outlined in our <a href=\"#/docs/datastore/v1.1.0/guides/authentication\">Authentication guide</a>.\n</p>\n","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js","parent":"datastore","children":[],"methods":[{"id":"LookupRequest","name":"LookupRequest","type":"instance","description":"","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L41","resources":[],"examples":[],"params":[{"name":"projectId","description":"<p> The ID of the project against which to make the request.</p>","types":["string"],"optional":false,"nullable":false},{"name":"readOptions","description":"<p> The options for this lookup request.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ReadOptions'\n        })\">ReadOptions</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'ReadOptions'\n        })\">ReadOptions</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"keys","description":"<p> Keys of entities to look up.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Key'\n        })\">Key</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Key'\n        })\">Key</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"LookupResponse","name":"LookupResponse","type":"instance","description":"","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L72","resources":[],"examples":[],"params":[{"name":"found","description":"<p> Entities found as <code>ResultType.FULL</code> entities. The order of results in this  field is undefined and has no relation to the order of the keys in the  input.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'EntityResult'\n        })\">EntityResult</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'EntityResult'\n        })\">EntityResult</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"missing","description":"<p> Entities not found as <code>ResultType.KEY_ONLY</code> entities. The order of results  in this field is undefined and has no relation to the order of the keys  in the input.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'EntityResult'\n        })\">EntityResult</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'EntityResult'\n        })\">EntityResult</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"deferred","description":"<p> A list of keys that were not looked up due to resource constraints. The  order of results in this field is undefined and has no relation to the  order of the keys in the input.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Key'\n        })\">Key</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Key'\n        })\">Key</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"RunQueryRequest","name":"RunQueryRequest","type":"instance","description":"","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L108","resources":[],"examples":[],"params":[{"name":"projectId","description":"<p> The ID of the project against which to make the request.</p>","types":["string"],"optional":false,"nullable":false},{"name":"partitionId","description":"<p> Entities are partitioned into subsets, identified by a partition ID.  Queries are scoped to a single partition.  This partition ID is normalized with the standard default context  partition ID.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'PartitionId'\n        })\">PartitionId</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'PartitionId'\n        })\">PartitionId</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"readOptions","description":"<p> The options for this query.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ReadOptions'\n        })\">ReadOptions</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'ReadOptions'\n        })\">ReadOptions</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"query","description":"<p> The query to run.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Query'\n        })\">Query</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Query'\n        })\">Query</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"gqlQuery","description":"<p> The GQL query to run.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'GqlQuery'\n        })\">GqlQuery</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'GqlQuery'\n        })\">GqlQuery</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"RunQueryResponse","name":"RunQueryResponse","type":"instance","description":"","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L128","resources":[],"examples":[],"params":[{"name":"batch","description":"<p> A batch of query results (always present).</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'QueryResultBatch'\n        })\">QueryResultBatch</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'QueryResultBatch'\n        })\">QueryResultBatch</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"query","description":"<p> The parsed form of the <code>GqlQuery</code> from the request, if it was set.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Query'\n        })\">Query</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Query'\n        })\">Query</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"BeginTransactionRequest","name":"BeginTransactionRequest","type":"instance","description":"","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L141","resources":[],"examples":[],"params":[{"name":"projectId","description":"<p> The ID of the project against which to make the request.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"BeginTransactionResponse","name":"BeginTransactionResponse","type":"instance","description":"","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L154","resources":[],"examples":[],"params":[{"name":"transaction","description":"<p> The transaction identifier (always present).</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"RollbackRequest","name":"RollbackRequest","type":"instance","description":"","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L171","resources":[],"examples":[],"params":[{"name":"projectId","description":"<p> The ID of the project against which to make the request.</p>","types":["string"],"optional":false,"nullable":false},{"name":"transaction","description":"<p> The transaction identifier, returned by a call to  {@link Datastore.BeginTransaction}.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"RollbackResponse","name":"RollbackResponse","type":"instance","description":"","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L181","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"CommitRequest","name":"CommitRequest","type":"instance","description":"","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L221","resources":[],"examples":[],"params":[{"name":"projectId","description":"<p> The ID of the project against which to make the request.</p>","types":["string"],"optional":false,"nullable":false},{"name":"mode","description":"<p> The type of commit to perform. Defaults to <code>TRANSACTIONAL</code>.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Mode'\n        })\">Mode</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Mode'\n        })\">Mode</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"transaction","description":"<p> The identifier of the transaction associated with the commit. A  transaction identifier is returned by a call to  {@link Datastore.BeginTransaction}.</p>","types":["string"],"optional":false,"nullable":false},{"name":"mutations","description":"<p> The mutations to perform.</p><p> When mode is <code>TRANSACTIONAL</code>, mutations affecting a single entity are  applied in order. The following sequences of mutations affecting a single  entity are not permitted in a single <code>Commit</code> request:</p><ul> <li><code>insert</code> followed by <code>insert</code></li> <li><code>update</code> followed by <code>insert</code></li> <li><code>upsert</code> followed by <code>insert</code></li> <li><p><code>delete</code> followed by <code>update</code></p><p>When mode is <code>NON_TRANSACTIONAL</code>, no two mutations may affect a single entity.</p><p>This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Mutation'\n        })\">Mutation</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Mutation'\n        })\">Mutation</a></p></li> </ul> ","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Mode","name":"Mode","type":"instance","description":"<p>The modes available for commits.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L229","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"CommitResponse","name":"CommitResponse","type":"instance","description":"","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L265","resources":[],"examples":[],"params":[{"name":"mutationResults","description":"<p> The result of performing the mutations.  The i-th mutation result corresponds to the i-th mutation in the request.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'MutationResult'\n        })\">MutationResult</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'MutationResult'\n        })\">MutationResult</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"indexUpdates","description":"<p> The number of index entries updated during the commit, or zero if none were  updated.</p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"AllocateIdsRequest","name":"AllocateIdsRequest","type":"instance","description":"","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L284","resources":[],"examples":[],"params":[{"name":"projectId","description":"<p> The ID of the project against which to make the request.</p>","types":["string"],"optional":false,"nullable":false},{"name":"keys","description":"<p> A list of keys with incomplete key paths for which to allocate IDs.  No key may be reserved/read-only.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Key'\n        })\">Key</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Key'\n        })\">Key</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"AllocateIdsResponse","name":"AllocateIdsResponse","type":"instance","description":"","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L300","resources":[],"examples":[],"params":[{"name":"keys","description":"<p> The keys specified in the request (in the same order), each with  its key path completed with a newly allocated ID.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Key'\n        })\">Key</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Key'\n        })\">Key</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Mutation","name":"Mutation","type":"instance","description":"<p>A mutation to apply to an entity.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L338","resources":[],"examples":[],"params":[{"name":"insert","description":"<p> The entity to insert. The entity must not already exist.  The entity key&#39;s final path element may be incomplete.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Entity'\n        })\">Entity</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Entity'\n        })\">Entity</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"update","description":"<p> The entity to update. The entity must already exist.  Must have a complete key path.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Entity'\n        })\">Entity</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Entity'\n        })\">Entity</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"upsert","description":"<p> The entity to upsert. The entity may or may not already exist.  The entity key&#39;s final path element may be incomplete.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Entity'\n        })\">Entity</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Entity'\n        })\">Entity</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"delete","description":"<p> The key of the entity to delete. The entity may or may not already exist.  Must have a complete key path and must not be reserved/read-only.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Key'\n        })\">Key</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Key'\n        })\">Key</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"baseVersion","description":"<p> The version of the entity that this mutation is being applied to. If this  does not match the current version on the server, the mutation conflicts.</p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"MutationResult","name":"MutationResult","type":"instance","description":"<p>The result of applying a mutation.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L365","resources":[],"examples":[],"params":[{"name":"key","description":"<p> The automatically allocated key.  Set only when the mutation allocated a key.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Key'\n        })\">Key</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Key'\n        })\">Key</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"version","description":"<p> The version of the entity on the server after processing the mutation. If  the mutation doesn&#39;t change anything on the server, then the version will  be the version of the current entity or, if no entity is present, a version  that is strictly greater than the version of any previous entity and less  than the version of any possible future entity.</p>","types":["number"],"optional":false,"nullable":false},{"name":"conflictDetected","description":"<p> Whether a conflict was detected for this mutation. Always false when a  conflict detection strategy field is not set in the mutation.</p>","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ReadOptions","name":"ReadOptions","type":"instance","description":"<p>The options shared by read requests.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L386","resources":[],"examples":[],"params":[{"name":"readConsistency","description":"<p> The non-transactional read consistency to use.  Cannot be set to <code>STRONG</code> for global queries.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ReadConsistency'\n        })\">ReadConsistency</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'ReadConsistency'\n        })\">ReadConsistency</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"transaction","description":"<p> The identifier of the transaction in which to read. A  transaction identifier is returned by a call to  {@link Datastore.BeginTransaction}.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ReadConsistency","name":"ReadConsistency","type":"instance","description":"<p>The possible values for read consistencies.</p>","source":"packages\\datastore\\src\\v1\\doc\\doc_datastore.js#L394","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]}],"path":"doc_datastore.json"}