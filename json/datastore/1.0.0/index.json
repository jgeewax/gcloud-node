{"id":"datastore","type":"class","name":"Datastore","overview":"<p>\n  This class allows you interact with Cloud Datastore.\n</p>\n\n\n\n<p>\n  First, install <code>@google-cloud/datastore</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save @google-cloud/datastore</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>@google-cloud/datastore</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Google Cloud Platform</h4>\n<div hljs language=\"javascript\">\nvar datastore = require('@google-cloud/datastore')();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar datastore = require('@google-cloud/datastore')({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>@google-cloud/datastore</code> are outlined in our <a href=\"#/docs/datastore/1.0.0/guides/authentication\">Authentication guide</a>.\n</p>\n","description":"","source":"packages/datastore/src/index.js","parent":null,"children":["datastore/entity","datastore/query","datastore/request","datastore/transaction","datastore/v1"],"methods":[{"id":"Datastore","name":"Datastore","type":"constructor","description":"","source":"packages/datastore/src/index.js#L295","resources":[{"title":"Cloud Datastore Concepts Overview","link":"https://cloud.google.com/datastore/docs/concepts/overview"}],"examples":[{"caption":"<p><h3>The Datastore Emulator</h3> \nMake sure you have the <a href=\"https://cloud.google.com/sdk/downloads\"> \ngcloud SDK installed</a>, then run: \n<pre> \n$ gcloud beta emulators datastore start --no-legacy \n</pre> \nYou will see the following printed: \n<pre> \n[datastore] API endpoint: http://localhost:8005 \n[datastore] If you are using a library that supports the \nDATASTORE_EMULATOR_HOST environment variable, run: \n[datastore] \n[datastore] export DATASTORE_EMULATOR_HOST=localhost:8005 \n[datastore] \n[datastore] Dev App Server is now running. \n</pre> \nSet that environment variable and your localhost Datastore will \nautomatically be used. You can also pass this address in manually with \n<code>apiEndpoint</code>. \nAdditionally, <code>DATASTORE_PROJECT_ID</code> is recognized. If you have this set, \nyou don't need to provide a <code>projectId</code>.</p>"},{"caption":"<p><h3>Retrieving Records</h3> \nRecords, called \"entities\" in Datastore, are retrieved by using a key. The \nkey is more than a numeric identifier, it is a complex data structure that \ncan be used to model relationships. The simplest key has a string <code>kind</code> \nvalue, and either a numeric <code>id</code> value, or a string <code>name</code> value. \nA single record can be retrieved with <a data-custom-type=\"datastore\" data-method=\"key\">datastore#key</a> and \n<a data-custom-type=\"datastore\" data-method=\"get\">datastore#get</a>.</p>","code":"var key = datastore.key(['Company', 'Google']);\n\ndatastore.get(key, function(err, entity) {\n  // entity = The record.\n  // entity[datastore.KEY] = The key for this entity.\n});"},{"caption":"<p><h3>Querying Records</h3> \nCreate a query with <a data-custom-type=\"datastore\" data-method=\"createQuery\">datastore#createQuery</a>.</p>","code":"var query = datastore.createQuery('Company');"},{"caption":"<p>Multiple records can be found that match criteria with \n<a data-custom-type=\"datastore/query\" data-method=\"filter\">datastore/query#filter</a>.</p>","code":"query.filter('location', 'CA');"},{"caption":"<p>Records can also be ordered with <a data-custom-type=\"datastore/query\" data-method=\"order\">datastore/query#order</a>.</p>","code":"query.order('name');"},{"caption":"<p>The number of records returned can be specified with \n<a data-custom-type=\"datastore/query\" data-method=\"limit\">datastore/query#limit</a>.</p>","code":"query.limit(5);"},{"caption":"<p>Records' key structures can also be queried with \n<a data-custom-type=\"datastore/query\" data-method=\"hasAncestor\">datastore/query#hasAncestor</a>.</p>","code":"var ancestorKey = datastore.key(['ParentCompany', 'Alphabet']);\n\nquery.hasAncestor(ancestorKey);"},{"caption":"<p>Run the query with <a data-custom-type=\"datastore\" data-method=\"runQuery\">datastore#runQuery</a>.</p>","code":"datastore.runQuery(query, function(err, entities) {\n  // entities = An array of records.\n\n  // Access the Key object for an entity.\n  var firstEntityKey = entities[0][datastore.KEY];\n});"},{"caption":"<p><h3>Paginating Records</h3> \nImagine building a website that allows a user to sift through hundreds of \ntheir contacts. You'll likely want to only display a subset of these at \nonce, so you set a limit.</p>","code":"var express = require('express');\nvar app = express();\n\nvar NUM_RESULTS_PER_PAGE = 15;\n\napp.get('/contacts', function(req, res) {\n  var query = datastore.createQuery('Contacts')\n    .limit(NUM_RESULTS_PER_PAGE);\n\n  if (req.query.nextPageCursor) {\n    query.start(req.query.nextPageCursor);\n  }\n\n  datastore.runQuery(query, function(err, entities, info) {\n    if (err) {\n      // Error handling omitted.\n      return;\n    }\n\n    // Respond to the front end with the contacts and the cursoring token\n    // from the query we just ran.\n    var frontEndResponse = {\n      contacts: entities\n    };\n\n    // Check if  more results may exist.\n    if (info.moreResults !== datastore.NO_MORE_RESULTS) {\n      frontEndResponse.nextPageCursor = info.endCursor;\n    }\n\n    res.render('contacts', frontEndResponse);\n  });\n});"},{"caption":"<p><h3>Creating Records</h3> \nNew entities can be created and persisted with <a data-custom-type=\"datastore\" data-method=\"save\">datastore#save</a>. \nThe entitiy must have a key to be saved. If you don't specify an \nidentifier for the key, one is generated for you. \nWe will create a key with a <code>name</code> identifier, \"Google\".</p>","code":"var key = datastore.key(['Company', 'Google']);\n\nvar data = {\n  name: 'Google',\n  location: 'CA'\n};\n\ndatastore.save({\n  key: key,\n  data: data\n}, function(err) {\n  if (!err) {\n    // Record saved successfully.\n  }\n});"},{"caption":"<p>We can verify the data was saved by using <a data-custom-type=\"datastore\" data-method=\"get\">datastore#get</a>.</p>","code":"datastore.get(key, function(err, entity) {\n  // entity = {\n  //   name: 'Google',\n  //   location: 'CA'\n  // }\n});"},{"caption":"<p>If we want to update this record, we can modify the data object and re- \nsave it.</p>","code":"data.symbol = 'GOOG';\n\ndatastore.save({\n  key: key, // defined above (datastore.key(['Company', 'Google']))\n  data: data\n}, function(err, entity) {\n  if (!err) {\n    // Record updated successfully.\n  }\n});"},{"caption":"<p><h3>Deleting Records</h3> \nEntities can be removed from Datastore by passing the entity's key object \nto <a data-custom-type=\"datastore\" data-method=\"delete\">datastore#delete</a>.</p>","code":"var key = datastore.key(['Company', 'Google']);\n\ndatastore.delete(key, function(err) {\n  if (!err) {\n    // Record deleted successfully.\n  }\n});"},{"caption":"<p><h3>Transactions</h3> \nComplex logic can be wrapped in a transaction with \n<a data-custom-type=\"datastore\" data-method=\"transaction\">datastore#transaction</a>. All queries and updates run within \nthe transaction will be applied when the <code>done</code> function is called.</p>","code":"var transaction = datastore.transaction();\n\ntransaction.run(function(err) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  var key = datastore.key(['Company', 'Google']);\n\n  transaction.get(key, function(err, entity) {\n    if (err) {\n      // Error handling omitted.\n    }\n\n    entity.symbol = 'GOOG';\n\n    transaction.save(entity);\n\n    transaction.commit(function(err) {\n      if (!err) {\n        // Transaction committed successfully.\n      }\n    });\n  });\n});"}],"params":[{"name":"options","description":"<ul> <li><a href=\"#/docs\">Configuration object</a>.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.apiEndpoint","description":"<ul> <li>Override the default API endpoint used to reach Datastore. This is useful for connecting to your local Datastore  server (usually &quot;<a href=\"http://localhost:8080\">http://localhost:8080</a>&quot;).</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"options.namespace","description":"<ul> <li>Namespace to isolate transactions to.</li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"double","name":"double","type":"instance","description":"<p>Helper function to get a Datastore Double object.</p>","source":"packages/datastore/src/index.js#L336","resources":[],"examples":[{"code":"var threeDouble = datastore.double(3.0);"}],"params":[{"name":"value","description":"<ul> <li>The double value.</li> </ul> ","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["object"],"description":""}]},{"id":"geoPoint","name":"geoPoint","type":"instance","description":"<p>Helper function to get a Datastore Geo Point object.</p>","source":"packages/datastore/src/index.js#L356","resources":[],"examples":[{"code":"var coordinates = {\n  latitude: 40.6894,\n  longitude: -74.0447\n};\n\nvar geoPoint = datastore.geoPoint(coordinates);"}],"params":[{"name":"coordinates","description":"<ul> <li>Coordinate value.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"coordinates.latitude","description":"<ul> <li>Latitudinal value.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"coordinates.longitude","description":"<ul> <li>Longitudinal value.</li> </ul> ","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["object"],"description":""}]},{"id":"int","name":"int","type":"instance","description":"<p>Helper function to get a Datastore Integer object.</p><p>This is also useful when using an ID outside the bounds of a JavaScript Number object.</p>","source":"packages/datastore/src/index.js#L380","resources":[],"examples":[{"code":"var sevenInteger = datastore.int(7);"},{"caption":"<p>Create an Int to support long Key IDs.</p>","code":"var key = datastore.key([\n  'Kind',\n  datastore.int('100000000000001234')\n]);"}],"params":[{"name":"value","description":"<ul> <li>The integer value.</li> </ul> ","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["object"],"description":""}]},{"id":"KEY","name":"KEY","type":"instance","description":"<p>Access the Key from an Entity object.</p>","source":"packages/datastore/src/index.js#L389","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"MORE_RESULTS_AFTER_CURSOR","name":"MORE_RESULTS_AFTER_CURSOR","type":"instance","description":"<p>This is one of three values which may be returned from <a data-custom-type=\"datastore\" data-method=\"runQuery\">datastore#runQuery</a>, <a data-custom-type=\"transaction\" data-method=\"runQuery\">transaction#runQuery</a>, and <a data-custom-type=\"datastore/query\" data-method=\"run\">datastore/query#run</a> as <code>info.moreResults</code>.</p><p>There <em>may</em> be more results after the specified end cursor.</p>","source":"packages/datastore/src/index.js#L400","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"MORE_RESULTS_AFTER_LIMIT","name":"MORE_RESULTS_AFTER_LIMIT","type":"instance","description":"<p>This is one of three values which may be returned from <a data-custom-type=\"datastore\" data-method=\"runQuery\">datastore#runQuery</a>, <a data-custom-type=\"transaction\" data-method=\"runQuery\">transaction#runQuery</a>, and <a data-custom-type=\"datastore/query\" data-method=\"run\">datastore/query#run</a> as <code>info.moreResults</code>.</p><p>There <em>may</em> be more results after the specified limit.</p>","source":"packages/datastore/src/index.js#L412","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"NO_MORE_RESULTS","name":"NO_MORE_RESULTS","type":"instance","description":"<p>This is one of three values which may be returned from <a data-custom-type=\"datastore\" data-method=\"runQuery\">datastore#runQuery</a>, <a data-custom-type=\"transaction\" data-method=\"runQuery\">transaction#runQuery</a>, and <a data-custom-type=\"datastore/query\" data-method=\"run\">datastore/query#run</a> as <code>info.moreResults</code>.</p><p>There are no more results left to query for.</p>","source":"packages/datastore/src/index.js#L424","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"createQuery","name":"createQuery","type":"instance","description":"<p>Create a query for the specified kind. See <a data-custom-type=\"datastore/query\" data-method=\"\">datastore/query</a> for all of the available methods.</p>","source":"packages/datastore/src/index.js#L442","resources":[{"title":"Datastore Queries","link":"https://cloud.google.com/datastore/docs/concepts/queries"}],"examples":[{"code":"var query = datastore.createQuery('Company');"}],"params":[{"name":"namespace","description":"<ul> <li>Namespace.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"kind","description":"<ul> <li>The kind to query.</li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"datastore/query\" data-method=\"\">datastore/query</a>"],"description":""}]},{"id":"key","name":"key","type":"instance","description":"<p>Helper to create a Key object, scoped to the instance&#39;s namespace by default.</p><p>You may also specify a configuration object to define a namespace and path.</p>","source":"packages/datastore/src/index.js#L497","resources":[],"examples":[{"caption":"<p>Create an incomplete key with a kind value of <code>Company</code>.</p>","code":"var key = datastore.key('Company');"},{"caption":"<p>Create a complete key with a kind value of <code>Company</code> and id <code>123</code>.</p>","code":"var key = datastore.key(['Company', 123]);"},{"caption":"<p>If the ID integer is outside the bounds of a JavaScript Number object, \ncreate an Int.</p>","code":"var key = datastore.key([\n  'Company',\n  datastore.int('100000000000001234')\n]);"},{"caption":"<p>Create a complete key with a kind value of <code>Company</code> and name <code>Google</code>. \nNote: <code>id</code> is used for numeric identifiers and <code>name</code> is used otherwise.</p>","code":"var key = datastore.key(['Company', 'Google']);"},{"caption":"<p>Create a complete key from a provided namespace and path.</p>","code":"var key = datastore.key({\n  namespace: 'My-NS',\n  path: ['Company', 123]\n});"}],"params":[{"name":"options","description":"<ul> <li>Key path. To specify or override a namespace, you must use an object here to explicitly state it.</li> </ul> ","types":[],"optional":true,"nullable":false},{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.path","description":"<ul> <li>Key path.</li> </ul> ","types":[],"optional":true,"nullable":false},{"name":"options.namespace","description":"<ul> <li>Optional namespace.</li> </ul> ","types":["string"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Key"],"description":"<p>A newly created Key from the options given.</p>"}]},{"id":"allocateIds","name":"allocateIds","type":"instance","description":"<p>Generate IDs without creating entities.</p>","source":"packages/datastore/src/request.js#L171","resources":[],"examples":[{"code":"var incompleteKey = datastore.key(['Company']);"},{"caption":"<p>The following call will create 100 new IDs from the Company kind, which \nexists under the default namespace.</p>","code":"datastore.allocateIds(incompleteKey, 100, function(err, keys) {});"},{"caption":"<p>Or, if you're using a transaction object.</p>","code":"var transaction = datastore.transaction();\n\ntransaction.run(function(err) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  transaction.allocateIds(incompleteKey, 100, function(err, keys) {\n    if (err) {\n      // Error handling omitted.\n    }\n\n    transaction.commit(function(err) {\n      if (!err) {\n        // Transaction committed successfully.\n      }\n    });\n  });\n});"},{"caption":"<p>You may prefer to create IDs from a non-default namespace by providing an \nincomplete key with a namespace. Similar to the previous example, the call \nbelow will create 100 new IDs, but from the Company kind that exists under \nthe \"ns-test\" namespace.</p>","code":"var incompleteKey = datastore.key({\n  namespace: 'ns-test',\n  path: ['Company']\n});\n\nfunction callback(err, keys, apiResponse) {}\n\ndatastore.allocateIds(incompleteKey, 100, callback);"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"datastore.allocateIds(incompleteKey, 100).then(function(data) {\n  var keys = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"incompleteKey","description":"<ul> <li>The key object to complete.</li> </ul> ","types":["Key"],"optional":false,"nullable":false},{"name":"n","description":"<ul> <li>How many IDs to generate.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.keys","description":"<ul> <li>The generated IDs</li> </ul> ","types":["array"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"createReadStream","name":"createReadStream","type":"instance","description":"<p>Retrieve the entities as a readable object stream.</p>","source":"packages/datastore/src/request.js#L226","resources":[],"examples":[{"code":"var keys = [\n  datastore.key(['Company', 123]),\n  datastore.key(['Product', 'Computer'])\n];\n\ndatastore.createReadStream(keys)\n  .on('error', function(err) {})\n  .on('data', function(entity) {\n    // entity is an entity object.\n  })\n  .on('end', function() {\n    // All entities retrieved.\n  });"}],"params":[{"name":"keys","description":"<ul> <li>Datastore key object(s).</li> </ul> ","types":["Key","Key[]"],"optional":false,"nullable":false},{"name":"options","description":"<ul> <li>Optional configuration. See <a data-custom-type=\"datastore\" data-method=\"get\">datastore#get</a> for a complete list of options.</li> </ul> ","types":["object"],"optional":true,"nullable":false}],"exceptions":[{"type":"Error","description":"<p>If at least one Key object is not provided.</p>"}],"returns":[]},{"id":"delete","name":"delete","type":"instance","description":"<p>Delete all entities identified with the specified key(s).</p>","source":"packages/datastore/src/request.js#L337","resources":[],"examples":[{"code":"var key = datastore.key(['Company', 123]);\ndatastore.delete(key, function(err, apiResp) {});"},{"caption":"<p>Or, if you're using a transaction object.</p>","code":"var transaction = datastore.transaction();\n\ntransaction.run(function(err) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  transaction.delete(key);\n\n  transaction.commit(function(err) {\n    if (!err) {\n      // Transaction committed successfully.\n    }\n  });\n});"},{"caption":"<p>Delete multiple entities at once.</p>","code":"datastore.delete([\n  datastore.key(['Company', 123]),\n  datastore.key(['Product', 'Computer'])\n], function(err, apiResponse) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"datastore.delete().then(function(data) {\n  var apiResponse = data[0];\n});"}],"params":[{"name":"key","description":"<ul> <li>Datastore key object(s).</li> </ul> ","types":["Key","Key[]"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"get","name":"get","type":"instance","description":"<p>Retrieve the entities identified with the specified key(s) in the current transaction. Get operations require a valid key to retrieve the key-identified entity from Datastore.</p>","source":"packages/datastore/src/request.js#L445","resources":[],"examples":[{"caption":"<p>Get a single entity.</p>","code":"var key = datastore.key(['Company', 123]);\n\ndatastore.get(key, function(err, entity) {});"},{"caption":"<p>Or, if you're using a transaction object.</p>","code":"var transaction = datastore.transaction();\n\ntransaction.run(function(err) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  transaction.get(key, function(err, entity) {\n    if (err) {\n      // Error handling omitted.\n    }\n\n    transaction.commit(function(err) {\n      if (!err) {\n        // Transaction committed successfully.\n      }\n    });\n  });\n});"},{"caption":"<p>Get multiple entities at once with a callback.</p>","code":"var keys = [\n  datastore.key(['Company', 123]),\n  datastore.key(['Product', 'Computer'])\n];\n\ndatastore.get(keys, function(err, entities) {});"},{"caption":"<p>Here's how you would update the value of an entity with the help of the \n<code>save</code> method.</p>","code":"datastore.get(key, function(err, entity) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  entity.newValue = true;\n\n  datastore.save({\n    key: key,\n    data: entity\n  }, function(err) {});\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"datastore.get(keys).then(function(data) {\n  var entities = data[0];\n});"}],"params":[{"name":"keys","description":"<ul> <li>Datastore key object(s).</li> </ul> ","types":["Key","Key[]"],"optional":false,"nullable":false},{"name":"options","description":"<ul> <li>Optional configuration.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.consistency","description":"<ul> <li>Specify either <code>strong</code> or <code>eventual</code>. If not specified, default values are chosen by Datastore for the  operation. Learn more about strong and eventual consistency  <a href=\"https://cloud.google.com/datastore/docs/articles/balancing-strong-and-eventual-consistency-with-google-cloud-datastore\">here</a>.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.maxApiCalls","description":"<ul> <li>Maximum API calls to make.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.entity","description":"<ul> <li>The entity object(s) which match the provided keys.</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false}],"exceptions":[{"type":"Error","description":"<p>If at least one Key object is not provided.</p>"}],"returns":[]},{"id":"runQuery","name":"runQuery","type":"instance","description":"<p>Datastore allows you to query entities by kind, filter them by property filters, and sort them by a property name. Projection and pagination are also supported.</p><p>The query is run, and the results are returned as the second argument to your callback. A third argument may also exist, which is a query object that uses the end cursor from the previous query as the starting cursor for the next query. You can pass that object back to this method to see if more results exist.</p>","source":"packages/datastore/src/request.js#L561","resources":[],"examples":[{"caption":"<p>Where you see <code>transaction</code>, assume this is the context that's relevant to \nyour use, whether that be a Datastore or a Transaction object.</p>","code":"var query = datastore.createQuery('Lion');\n\ndatastore.runQuery(query, function(err, entities, info) {\n  // entities = An array of records.\n\n  // Access the Key object for an entity.\n  var firstEntityKey = entities[0][datastore.KEY];\n});"},{"caption":"<p>Or, if you're using a transaction object.</p>","code":"var transaction = datastore.transaction();\n\ntransaction.run(function(err) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  transaction.runQuery(query, function(err, entities) {\n    if (err) {\n      // Error handling omitted.\n    }\n\n    transaction.commit(function(err) {\n      if (!err) {\n        // Transaction committed successfully.\n      }\n    });\n  });\n});"},{"caption":"<p>A keys-only query returns just the keys of the result entities instead of \nthe entities themselves, at lower latency and cost.</p>","code":"var keysOnlyQuery = datastore.createQuery('Lion').select('__key__');\n\ndatastore.runQuery(keysOnlyQuery, function(err, entities) {\n  var keys = entities.map(function(entity) {\n    return entity[datastore.KEY];\n  });\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"datastore.runQuery(query).then(function(data) {\n  var entities = data[0];\n});"}],"params":[{"name":"query","description":"<ul> <li>Query object.</li> </ul> ","types":["<a data-custom-type=\"datastore/query\" data-method=\"\">datastore/query</a>"],"optional":false,"nullable":false},{"name":"options","description":"<ul> <li>Optional configuration.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.consistency","description":"<ul> <li>Specify either <code>strong</code> or <code>eventual</code>. If not specified, default values are chosen by Datastore for the  operation. Learn more about strong and eventual consistency  <a href=\"https://cloud.google.com/datastore/docs/articles/balancing-strong-and-eventual-consistency-with-google-cloud-datastore\">here</a>.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.maxApiCalls","description":"<ul> <li>Maximum API calls to make.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function. If omitted, a readable stream instance is returned.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.entities","description":"<ul> <li>A list of entities.</li> </ul> ","types":["object[]"],"optional":false,"nullable":false},{"name":"callback.info","description":"<ul> <li>An object useful for pagination.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"callback.info.endCursor","description":"<ul> <li>Use this in a follow-up query to begin from where these results ended.</li> </ul> ","types":["string"],"optional":false,"nullable":true},{"name":"callback.info.moreResults","description":"<ul> <li>Datastore responds with one of: <ul> <li><a data-custom-type=\"datastore\" data-method=\"MORE_RESULTS_AFTER_LIMIT\">datastore#MORE_RESULTS_AFTER_LIMIT</a>: There <em>may</em> be more results after the specified limit.</li> <li><a data-custom-type=\"datastore\" data-method=\"MORE_RESULTS_AFTER_CURSOR\">datastore#MORE_RESULTS_AFTER_CURSOR</a>: There <em>may</em> be more results after the specified end cursor.</li> <li><a data-custom-type=\"datastore\" data-method=\"NO_MORE_RESULTS\">datastore#NO_MORE_RESULTS</a>: There are no more results.</li> </ul> </li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"runQueryStream","name":"runQueryStream","type":"instance","description":"<p>Get a list of entities as a readable object stream.</p><p>See <a data-custom-type=\"datastore\" data-method=\"runQuery\">datastore#runQuery</a> for a list of all available options.</p>","source":"packages/datastore/src/request.js#L610","resources":[],"examples":[{"code":"datastore.runQueryStream(query)\n  .on('error', console.error)\n  .on('data', function(entity) {\n    // Access the Key object for this entity.\n    var key = entity[datastore.KEY];\n  })\n  .on('info', function(info) {})\n  .on('end', function() {\n    // All entities retrieved.\n  });"},{"caption":"<p>If you anticipate many results, you can end a stream early to prevent \nunnecessary processing and API requests.</p>","code":"datastore.runQueryStream(query)\n  .on('data', function(entity) {\n    this.end();\n  });"}],"params":[{"name":"query","description":"<ul> <li>Query object.</li> </ul> ","types":["<a data-custom-type=\"datastore/query\" data-method=\"\">datastore/query</a>"],"optional":false,"nullable":false},{"name":"options","description":"<ul> <li>Optional configuration.</li> </ul> ","types":["object"],"optional":true,"nullable":false}],"exceptions":[],"returns":[]},{"id":"save","name":"save","type":"instance","description":"<p>Insert or update the specified object(s). If a key is incomplete, its associated object is inserted and the original Key object is updated to contain the generated ID.</p><p>This method will determine the correct Datastore method to execute (<code>upsert</code>, <code>insert</code>, or <code>update</code>) by using the key(s) provided. For example, if you provide an incomplete key (one without an ID), the request will create a new entity and have its ID automatically assigned. If you provide a complete key, the entity will be updated with the data specified.</p><p>By default, all properties are indexed. To prevent a property from being included in <em>all</em> indexes, you must supply an entity&#39;s <code>data</code> property as an array. See below for an example.</p>","source":"packages/datastore/src/request.js#L892","resources":[],"examples":[{"caption":"<p>Save a single entity. \nNotice that we are providing an incomplete key. After saving, the original \nKey object used to save will be updated to contain the path with its \ngenerated ID.</p>","code":"var key = datastore.key('Company');\nvar entity = {\n  key: key,\n  data: {\n    rating: '10'\n  }\n};\n\ndatastore.save(entity, function(err) {\n  console.log(key.path); // [ 'Company', 5669468231434240 ]\n  console.log(key.namespace); // undefined\n});"},{"caption":"<p>Save a single entity using a provided name instead of auto-generated ID. \nHere we are providing a key with name instead of an ID. After saving, the \noriginal Key object used to save will be updated to contain the path with \nthe name instead of a generated ID.</p>","code":"var key = datastore.key(['Company', 'donutshack']);\nvar entity = {\n  key: key,\n  data: {\n    name: 'DonutShack',\n    rating: 8\n  }\n};\n\ndatastore.save(entity, function(err) {\n  console.log(key.path); // ['Company', 'donutshack']\n  console.log(key.namespace); // undefined\n});"},{"caption":"<p>Save a single entity with a provided namespace. Namespaces allow for \nmultitenancy. To read more about this, see \n[the Datastore docs on key concepts](https://goo.gl/M1LUAu). \nHere we are providing a key with namespace.</p>","code":"var key = datastore.key({\n  namespace: 'my-namespace',\n  path: ['Company', 'donutshack']\n});\n\nvar entity = {\n  key: key,\n  data: {\n    name: 'DonutShack',\n    rating: 8\n  }\n};\n\ndatastore.save(entity, function(err) {\n  console.log(key.path); // ['Company', 'donutshack']\n  console.log(key.namespace); // 'my-namespace'\n});"},{"caption":"<p>Save different types of data, including ints, doubles, dates, booleans, \nblobs, and lists. \nNotice that we are providing an incomplete key. After saving, the original \nKey object used to save will be updated to contain the path with its \ngenerated ID.</p>","code":"var key = datastore.key('Company');\nvar entity = {\n  key: key,\n  data: {\n    name: 'DonutShack',\n    rating: datastore.int(10),\n    worth: datastore.double(123456.78),\n    location: datastore.geoPoint({\n      latitude: 40.6894,\n      longitude: -74.0447\n    }),\n    numDonutsServed: 45,\n    founded: new Date('Tue May 12 2015 15:30:00 GMT-0400 (EDT)'),\n    isStartup: true,\n    donutEmoji: new Buffer('\\uD83C\\uDF69'),\n    keywords: [\n      'donut',\n      'coffee',\n      'yum'\n    ]\n  }\n};\n\ndatastore.save(entity, function(err, apiResponse) {});"},{"caption":"<p>To specify an <code>excludeFromIndexes</code> value for a Datastore entity, pass in \nan array for the key's data.</p>","code":"var entity = {\n  key: datastore.key('Company'),\n  data: [\n    {\n      name: 'rating',\n      value: 10,\n      excludeFromIndexes: true\n    }\n  ]\n};\n\ndatastore.save(entity, function(err, apiResponse) {});"},{"caption":"<p>Save multiple entities at once.</p>","code":"var companyKey = datastore.key(['Company', 123]);\nvar productKey = datastore.key(['Product', 'Computer']);\nvar entities = [\n  {\n    key: companyKey,\n    data: {\n      HQ: 'Dallas, TX'\n    }\n  },\n  {\n    key: productKey,\n    data: {\n      vendor: 'Dell'\n    }\n  }\n];\n\ndatastore.save(entities, function(err, apiResponse) {});"},{"caption":"<p>Explicitly attempt to 'insert' a specific entity.</p>","code":"var userKey = datastore.key(['User', 'chilts']);\nvar entity = {\n  key: userKey,\n  method: 'insert',\n  data: {\n    fullName: 'Andrew Chilton'\n  }\n};\n\ndatastore.save(entity, function(err, apiResponse) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"datastore.save(entity).then(function(data) {\n  var apiResponse = data[0];\n});"}],"params":[{"name":"entities","description":"<ul> <li>Datastore key object(s).</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false},{"name":"entities.key","description":"<ul> <li>Datastore key object.</li> </ul> ","types":["Key"],"optional":false,"nullable":false},{"name":"entities.method","description":"<ul> <li>Explicit method to use, either &#39;insert&#39;, &#39;update&#39;, or &#39;upsert&#39;.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"entities.data","description":"<ul> <li>Data to save with the provided key. If you provide an array of objects, you must use the explicit syntax:  <code>name</code> for the name of the property and <code>value</code> for its value. You may  also specify an <code>excludeFromIndexes</code> property, set to <code>true</code> or <code>false</code>.</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[{"type":"Error","description":"<p>If an unrecognized method is provided.</p>"}],"returns":[]}],"path":"index.json"}