{"id":"speech","type":"class","name":"speechV1","overview":"<p>\n  This class allows you interact with Cloud Speech API.\n</p>\n\n\n\n<p>\n  First, install <code>@google-cloud/speech</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save @google-cloud/speech</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>@google-cloud/speech</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Google Cloud Platform</h4>\n<div hljs language=\"javascript\">\nvar speech = require('@google-cloud/speech')();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar speech = require('@google-cloud/speech')({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>@google-cloud/speech</code> are outlined in our <a href=\"#/docs/speech/v0.10.0/guides/authentication\">Authentication guide</a>.\n</p>\n","description":"","source":"packages\\speech\\src\\index.js","parent":null,"children":["speech/helpers","speech/v1"],"methods":[{"id":"speechV1","name":"speechV1","type":"constructor","description":"<p>Create an speechClient with additional helpers for common tasks.</p><p>Service that implements Google Cloud Speech API.</p>","source":"packages\\speech\\src\\index.js#L49","resources":[],"examples":[],"params":[{"name":"options","description":"<ul> <li><a href=\"#/docs\">Configuration object</a>.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.port","description":"<ul> <li>The port on which to connect to the remote host.</li> </ul> ","types":["number"],"optional":true,"nullable":false},{"name":"options.servicePath","description":"<ul> <li>The domain name of the API remote host.</li> </ul> ","types":["string"],"optional":true,"nullable":false}],"exceptions":[],"returns":[]},{"id":"streamingRecognize","name":"streamingRecognize","type":"instance","description":"<p>Performs bidirectional streaming speech recognition: receive results while sending audio. This method is only available via the gRPC API (not REST).</p>","source":"packages\\speech\\src\\helpers.js#L73","resources":[],"examples":[{"code":"\nvar stream = speech.streamingRecognize({\n  config: {\n    encoding: 'LINEAR16',\n    languageCode: 'en-us',\n    sampleRateHertz: 44100,\n  },\n}).on('data', function(response) {\n  // doThingsWith(response);\n});\nvar request = {};\n// Write request objects.\nstream.write(request);"}],"params":[{"name":"config","description":"<p> The configuration for the stream. This is appropriately wrapped and  sent as the first argument. It should be an object conforming to the  <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'StreamingRecognitionConfig'\n        })\">StreamingRecognitionConfig</a>  structure.</p>","types":["Object"],"optional":false,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this  call, e.g, timeout, retries, paginations, etc. See  <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a>  for the details.</p>","types":["Object"],"optional":true,"nullable":false}],"exceptions":[],"returns":[]}],"path":"index.json"}