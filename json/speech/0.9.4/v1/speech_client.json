{"id":"speech/v1/speech_client","type":"class","overview":"<p>\n  This class allows you interact with Cloud Speech API.\n</p>\n\n\n\n<p>\n  First, install <code>@google-cloud/speech</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save @google-cloud/speech</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>@google-cloud/speech</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Google Cloud Platform</h4>\n<div hljs language=\"javascript\">\nvar speech = require('@google-cloud/speech')();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar speech = require('@google-cloud/speech')({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>@google-cloud/speech</code> are outlined in our <a href=\"#/docs/speech/v0.9.4/guides/authentication\">Authentication guide</a>.\n</p>\n","source":"packages\\speech\\src\\v1\\speech_client.js","parent":"speech","children":[],"methods":[{"id":"SpeechClient","name":"SpeechClient","type":"constructor","description":"<p>Service that implements Google Cloud Speech API.</p><p>This will be created through a builder function which can be obtained by the module. See the following example of how to initialize the module and how to access to the builder.</p>","source":"packages\\speech\\src\\v1\\speech_client.js#L67","resources":[],"examples":[{"code":"var speechV1 = require('@google-cloud/speech').v1({\n  // optional auth parameters.\n});\nvar client = speechV1.speechClient();"}],"params":[],"exceptions":[],"returns":[]},{"id":"getProjectId","name":"getProjectId","type":"instance","description":"<p>Get the project ID used by this class.</p>","source":"packages\\speech\\src\\v1\\speech_client.js#L134","resources":[],"examples":[],"params":[{"name":"callback","description":"<ul> <li>the callback to be called with the current project Id.</li> </ul> ","types":["function(Error, string)"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"recognize","name":"recognize","type":"instance","description":"<p>Performs synchronous speech recognition: receive results after all audio has been sent and processed.</p>","source":"packages\\speech\\src\\v1\\speech_client.js#L192","resources":[],"examples":[{"code":"\nvar client = speechV1.speechClient();\nvar encoding = speechV1.RecognitionConfig.AudioEncoding.FLAC;\nvar sampleRateHertz = 44100;\nvar languageCode = 'en-US';\nvar config = {\n    encoding : encoding,\n    sampleRateHertz : sampleRateHertz,\n    languageCode : languageCode\n};\nvar uri = 'gs://bucket_name/file_name.flac';\nvar audio = {\n    uri : uri\n};\nvar request = {\n    config: config,\n    audio: audio\n};\nclient.recognize(request).then(function(responses) {\n    var response = responses[0];\n    // doThingsWith(response)\n}).catch(function(err) {\n    console.error(err);\n});"}],"params":[{"name":"request","description":"<p> The request object that will be sent.</p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.config","description":"<p> <em>Required</em> Provides information to the recognizer that specifies how to  process the request.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'RecognitionConfig'\n        })\">RecognitionConfig</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.audio","description":"<p> <em>Required</em> The audio data to be recognized.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'RecognitionAudio'\n        })\">RecognitionAudio</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this call, e.g, timeout,  retries, paginations, etc. See <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a> for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'RecognizeResponse'\n        })\">RecognizeResponse</a>.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'RecognizeResponse'\n        })\">RecognizeResponse</a>. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"longRunningRecognize","name":"longRunningRecognize","type":"instance","description":"<p>Performs asynchronous speech recognition: receive results via the google.longrunning.Operations interface. Returns either an <code>Operation.error</code> or an <code>Operation.response</code> which contains a <code>LongRunningRecognizeResponse</code> message.</p>","source":"packages\\speech\\src\\v1\\speech_client.js#L297","resources":[],"examples":[{"code":"\nvar client = speechV1.speechClient();\nvar encoding = speechV1.RecognitionConfig.AudioEncoding.FLAC;\nvar sampleRateHertz = 44100;\nvar languageCode = 'en-US';\nvar config = {\n    encoding : encoding,\n    sampleRateHertz : sampleRateHertz,\n    languageCode : languageCode\n};\nvar uri = 'gs://bucket_name/file_name.flac';\nvar audio = {\n    uri : uri\n};\nvar request = {\n    config: config,\n    audio: audio\n};\n\n// Handle the operation using the promise pattern.\nclient.longRunningRecognize(request).then(function(responses) {\n    var operation = responses[0];\n    var initialApiResponse = responses[1];\n\n    // Operation#promise starts polling for the completion of the LRO.\n    return operation.promise();\n}).then(function(responses) {\n    // The final result of the operation.\n    var result = responses[0];\n\n    // The metadata value of the completed operation.\n    var metadata = responses[1];\n\n    // The response of the api call returning the complete operation.\n    var finalApiResponse = responses[2];\n}).catch(function(err) {\n    console.error(err);\n});\n\n// Handle the operation using the event emitter pattern.\nclient.longRunningRecognize(request).then(function(responses) {\n    var operation = responses[0];\n    var initialApiResponse = responses[1];\n\n    // Adding a listener for the \"complete\" event starts polling for the\n    // completion of the operation.\n    operation.on('complete', function(result, metadata, finalApiResponse) {\n      // doSomethingWith(result);\n    });\n\n    // Adding a listener for the \"progress\" event causes the callback to be\n    // called on any change in metadata when the operation is polled.\n    operation.on('progress', function(metadata, apiResponse) {\n      // doSomethingWith(metadata)\n    })\n\n    // Adding a listener for the \"error\" event handles any errors found during polling.\n    operation.on('error', function(err) {\n      // throw(err);\n    })\n}).catch(function(err) {\n    console.error(err);\n});"}],"params":[{"name":"request","description":"<p> The request object that will be sent.</p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.config","description":"<p> <em>Required</em> Provides information to the recognizer that specifies how to  process the request.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'RecognitionConfig'\n        })\">RecognitionConfig</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.audio","description":"<p> <em>Required</em> The audio data to be recognized.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'RecognitionAudio'\n        })\">RecognitionAudio</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this call, e.g, timeout,  retries, paginations, etc. See <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a> for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is a <a href=\"https://googleapis.github.io/gax-nodejs/Operation\">gax.Operation</a> object.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is a <a href=\"https://googleapis.github.io/gax-nodejs/Operation\">gax.Operation</a> object. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"streamingRecognize","name":"streamingRecognize","type":"instance","description":"<p>Performs bidirectional streaming speech recognition: receive results while sending audio. This method is only available via the gRPC API (not REST).</p>","source":"packages\\speech\\src\\v1\\speech_client.js#L331","resources":[],"examples":[{"code":"\nvar client = speechV1.speechClient();\nvar stream = client.streamingRecognize().on('data', function(response) {\n    // doThingsWith(response);\n});\nvar request = {};\n// Write request objects.\nstream.write(request);"}],"params":[{"name":"options","description":"<p> Optional parameters. You can override the default settings for this call, e.g, timeout,  retries, paginations, etc. See <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a> for the details.</p>","types":["Object"],"optional":true,"nullable":false}],"exceptions":[],"returns":[]},{"id":"speechClient","name":"speechClient","type":"instance","description":"<p>Build a new instance of {@link SpeechClient}.</p>","source":"packages\\speech\\src\\v1\\speech_client.js#L365","resources":[],"examples":[],"params":[{"name":"opts","description":"<ul> <li>The optional parameters.</li> </ul> ","types":["Object"],"optional":true,"nullable":false},{"name":"opts.servicePath","description":"<p> The domain name of the API remote host.</p>","types":["String"],"optional":true,"nullable":false},{"name":"opts.port","description":"<p> The port on which to connect to the remote host.</p>","types":["number"],"optional":true,"nullable":false},{"name":"opts.sslCreds","description":"<p> A ClientCredentials for use with an SSL-enabled channel.</p>","types":["grpc.ClientCredentials"],"optional":true,"nullable":false},{"name":"opts.clientConfig","description":"<p> The customized config to build the call settings. See  {@link gax.constructSettings} for the format.</p>","types":["Object"],"optional":true,"nullable":false}],"exceptions":[],"returns":[]}],"path":"v1/speech_client.json"}