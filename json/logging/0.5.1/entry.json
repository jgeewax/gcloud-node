{"id":"logging/entry","type":"class","name":"Entry","overview":"<p>\n  This class allows you interact with Google Cloud Logging.\n</p>\n\n<p>\n  First, install <code>@google-cloud/logging</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save @google-cloud/logging</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>@google-cloud/logging</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Compute Engine</h4>\n<div hljs language=\"javascript\">\nvar logging = require('@google-cloud/logging')();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar logging = require('@google-cloud/logging')({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>@google-cloud/logging</code> are outlined in our <a href=\"#/docs/logging/0.5.1/guides/authentication\">Authentication guide</a>.\n</p>\n\n","description":"","source":"packages/logging/src/entry.js","parent":"logging","children":[],"methods":[{"id":"Entry","name":"Entry","type":"constructor","description":"<p>Create an entry object to define new data to insert into a log.</p>","source":"packages/logging/src/entry.js#L85","resources":[{"title":"LogEntry JSON representation","link":"https://cloud.google.com/logging/docs/api/ref_v2beta1/rest/v2beta1/LogEntry"}],"examples":[{"code":"var syslog = logging.log('syslog');\n\nvar metadata = {\n  resource: {\n    type: 'gce_instance',\n    labels: {\n      zone: 'global',\n      instance_id: '3'\n    }\n  }\n};\n\nvar entry = syslog.entry(metadata, {\n  delegate: 'my_username'\n});\n\nsyslog.alert(entry, function(err, apiResponse) {\n  if (!error) {\n    // Log entry inserted successfully.\n  }\n});"},{"caption":"<p>You will also receive <code>Entry</code> objects when using \n<a data-custom-type=\"logging\" data-method=\"getEntries\">logging#getEntries</a> and <a data-custom-type=\"logging/log\" data-method=\"getEntries\">logging/log#getEntries</a>.</p>","code":"logging.getEntries(function(err, entries) {\n  if (!err) {\n    // entries[0].data = The data value from the log entry.\n  }\n});"}],"params":[{"name":"metadata","description":"<ul> <li>See a <a href=\"https://cloud.google.com/logging/docs/api/ref_v2beta1/rest/v2beta1/LogEntry\">LogEntry Resource</a>.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"data","description":"<ul> <li><p>The data to use as the value for this log entry.</p><p> If providing an object, these value types are supported:</p><ul> <li><code>String</code></li> <li><code>Number</code></li> <li><code>Boolean</code></li> <li><code>Buffer</code></li> <li><code>Object</code></li> <li><p><code>Array</code></p><p>Any other types are stringified with <code>String(value)</code>.</p></li> </ul> </li> </ul> ","types":["object","string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"logging/entry\" data-method=\"\">logging/entry</a>"],"description":""}]}],"path":"entry.json"}