{"id":"bigtable/instance","type":"class","name":"Instance","overview":"<p>\n  This class allows you interact with Google Cloud Bigtable.\n</p>\n\n<p>\n  First, install <code>@google-cloud/bigtable</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save @google-cloud/bigtable</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>@google-cloud/bigtable</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Compute Engine</h4>\n<div hljs language=\"javascript\">\nvar bigtable = require('@google-cloud/bigtable')();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar bigtable = require('@google-cloud/bigtable')({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>@google-cloud/bigtable</code> are outlined in our <a href=\"#/docs/bigtable/0.6.0/guides/authentication\">Authentication guide</a>.\n</p>\n\n","description":"","source":"packages/bigtable/src/instance.js","parent":"bigtable","children":[],"methods":[{"id":"Instance","name":"Instance","type":"constructor","description":"<p>Create an Instance object to interact with a Compute instance.</p>","source":"packages/bigtable/src/instance.js#L57","resources":[],"examples":[{"code":"var instance = bigtable.instance('my-instance');"}],"params":[{"name":"name","description":"<ul> <li>Name of the instance.</li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"create","name":"create","type":"instance","description":"<p>Create an instance.</p>","source":"packages/bigtable/src/instance.js#L93","resources":[],"examples":[{"code":"instance.create(function(err, instance, operation, apiResponse) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  operation\n    .on('error', console.error)\n    .on('complete', function() {\n      // The instance was created successfully.\n    });\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"instance.create().then(function(data) {\n  var instance = data[0];\n  var operation = data[1];\n  var apiResponse = data[2];\n});"}],"params":[{"name":"options","description":"<ul> <li>See <a data-custom-type=\"bigtable\" data-method=\"createInstance\">bigtable#createInstance</a>.</li> </ul> ","types":["object"],"optional":true,"nullable":false}],"exceptions":[],"returns":[]},{"id":"delete","name":"delete","type":"instance","description":"<p>Delete the instance.</p>","source":"packages/bigtable/src/instance.js#L113","resources":[],"examples":[{"code":"instance.delete(function(err, apiResponse) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"instance.delete().then(function(data) {\n  var apiResponse = data[0];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"exists","name":"exists","type":"instance","description":"<p>Check if an instance exists.</p>","source":"packages/bigtable/src/instance.js#L141","resources":[],"examples":[{"code":"instance.exists(function(err, exists) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"instance.exists().then(function(data) {\n  var exists = data[0];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.exists","description":"<ul> <li>Whether the instance exists or not.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"get","name":"get","type":"instance","description":"<p>Get an instance if it exists.</p>","source":"packages/bigtable/src/instance.js#L159","resources":[],"examples":[{"code":"instance.get(function(err, instance, apiResponse) {\n  // The `instance` data has been populated.\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"instance.get().then(function(data) {\n  var instance = data[0];\n  var apiResponse = data[1];\n});"}],"params":[],"exceptions":[],"returns":[]},{"id":"getMetadata","name":"getMetadata","type":"instance","description":"<p>Get the instance metadata.</p>","source":"packages/bigtable/src/instance.js#L181","resources":[],"examples":[{"code":"instance.getMetadata(function(err, metadata, apiResponse) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"instance.getMetadata().then(function(data) {\n  var metadata = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.metadata","description":"<ul> <li>The metadata.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"setMetadata","name":"setMetadata","type":"instance","description":"<p>Set the instance metadata.</p>","source":"packages/bigtable/src/instance.js#L217","resources":[],"examples":[{"code":"var metadata = {\n  displayName: 'updated-name'\n};\n\ninstance.setMetadata(metadata, function(err, apiResponse) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"instance.setMetadata(metadata).then(function(data) {\n  var apiResponse = data[0];\n});"}],"params":[{"name":"metadata","description":"<ul> <li>Metadata object.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"metadata.displayName","description":"<ul> <li>The descriptive name for this instance as it appears in UIs. It can be changed at any time, but  should be kept globally unique to avoid confusion.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"createCluster","name":"createCluster","type":"instance","description":"<p>Create a cluster.</p>","source":"packages/bigtable/src/instance.js#L295","resources":[],"examples":[{"code":"var callback = function(err, cluster, operation, apiResponse) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  operation\n    .on('error', console.log)\n    .on('complete', function() {\n      // The cluster was created successfully.\n    });\n};\n\nvar options = {\n  location: 'us-central1-b',\n  nodes: 3,\n  storage: 'ssd'\n};\n\ninstance.createCluster('my-cluster', options, callback);"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"instance.createCluster('my-cluster', options).then(function(data) {\n  var cluster = data[0];\n  var operation = data[1];\n  var apiResponse = data[2];\n});"}],"params":[{"name":"name","description":"<ul> <li>The name to be used when referring to the new cluster within its instance.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options","description":"<ul> <li>Cluster creation options.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.location","description":"<ul> <li>The location where this cluster&#39;s nodes and storage reside. For best performance clients should be located as  as close as possible to this cluster. Currently only zones are  supported.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options.nodes","description":"<ul> <li>The number of nodes allocated to this cluster. More nodes enable higher throughput and more consistent  performance.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"options.storage","description":"<ul> <li>The type of storage used by this cluster to serve its parent instance&#39;s tables. Options are &#39;hdd&#39; or &#39;ssd&#39;.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.cluster","description":"<ul> <li>The newly created cluster.</li> </ul> ","types":["<a data-custom-type=\"bigtable/cluster\" data-method=\"\">bigtable/cluster</a>"],"optional":false,"nullable":false},{"name":"callback.operation","description":"<ul> <li>An operation object that can be used to check the status of the request.</li> </ul> ","types":["Operation"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"createTable","name":"createTable","type":"instance","description":"<p>Create a table on your Bigtable instance.</p>","source":"packages/bigtable/src/instance.js#L425","resources":[{"title":"Designing Your Schema","link":"https://cloud.google.com/bigtable/docs/schema-design"},{"title":"Splitting Keys","link":"https://cloud.google.com/bigtable/docs/managing-tables#splits"}],"examples":[{"code":"var callback = function(err, table, apiResponse) {\n  // `table` is a Table object.\n};\n\ninstance.createTable('prezzy', callback);"},{"caption":"<p>Optionally specify column families to be created within the table.</p>","code":"var options = {\n  families: ['follows']\n};\n\ninstance.createTable('prezzy', options, callback);"},{"caption":"<p>You can also specify garbage collection rules for your column families. \nSee <a data-custom-type=\"bigtable/table\" data-method=\"createFamily\">bigtable/table#createFamily</a> for more information about \ncolumn families and garbage collection rules.</p>","code":"var options = {\n  families: [\n    {\n      name: 'follows',\n      rule:  {\n        age: {\n          seconds: 0,\n          nanos: 5000\n        },\n        versions: 3,\n        union: true\n      }\n    }\n  ]\n};\n\ninstance.createTable('prezzy', options, callback);"},{"caption":"<p>Pre-split the table based on the row key to spread the load across \nmultiple Cloud Bigtable nodes.</p>","code":"var options = {\n  splits: ['10', '20']\n};\n\ninstance.createTable('prezzy', options, callback);"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"instance.createTable('prezzy', options).then(function(data) {\n  var table = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"name","description":"<ul> <li>The name of the table.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"options","description":"<ul> <li>Table creation options.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.families","description":"<ul> <li>Column families to be created within the table.</li> </ul> ","types":["object","string[]"],"optional":false,"nullable":false},{"name":"options.splits","description":"<ul> <li>Initial <a href=\"https://cloud.google.com/bigtable/docs/managing-tables#splits\">split keys</a>.</li> </ul> ","types":["string[]"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.table","description":"<ul> <li>The newly created table.</li> </ul> ","types":["<a data-custom-type=\"bigtable/table\" data-method=\"\">bigtable/table</a>"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[{"type":"error","description":"<p>If a name is not provided.</p>"}],"returns":[]},{"id":"cluster","name":"cluster","type":"instance","description":"<p>Get a reference to a Bigtable Cluster.</p>","source":"packages/bigtable/src/instance.js#L501","resources":[],"examples":[],"params":[{"name":"name","description":"<ul> <li>The name of the cluster.</li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"bigtable/cluster\" data-method=\"\">bigtable/cluster</a>"],"description":""}]},{"id":"getClusters","name":"getClusters","type":"instance","description":"<p>Get Cluster objects for all of your clusters.</p>","source":"packages/bigtable/src/instance.js#L550","resources":[],"examples":[{"code":"instance.getClusters(function(err, clusters) {\n  if (!err) {\n    // `clusters` is an array of Cluster objects.\n  }\n});"},{"caption":"<p>To control how many API requests are made and page through the results \nmanually, set <code>autoPaginate</code> to false.</p>","code":"var callback = function(err, clusters, nextQuery, apiResponse) {\n  if (nextQuery) {\n    // More results exist.\n    instance.getClusters(nextQuery, calback);\n  }\n};\n\ninstance.getClusters({\n  autoPaginate: false\n}, callback);"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"instance.getClusters().then(function(data) {\n  var clusters = data[0];\n});"}],"params":[{"name":"query","description":"<ul> <li>Query object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"query.autoPaginate","description":"<ul> <li>Have pagination handled automatically. Default: true.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"query.maxApiCalls","description":"<ul> <li>Maximum number of API calls to make.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"query.maxResults","description":"<ul> <li>Maximum number of results to return.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"query.pageToken","description":"<ul> <li>Token returned from a previous call, to request the next page of results.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.error","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.clusters","description":"<ul> <li>List of all Clusters.</li> </ul> ","types":["<a data-custom-type=\"bigtable/cluster[]\" data-method=\"\">bigtable/cluster[]</a>"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"getClustersStream","name":"getClustersStream","type":"instance","description":"<p>Get <a data-custom-type=\"bigtable/cluster\" data-method=\"\">bigtable/cluster</a> objects for all of your clusters as a readable object stream.</p>","source":"packages/bigtable/src/instance.js#L618","resources":[],"examples":[{"code":"instance.getClustersStream()\n  .on('error', console.error)\n  .on('data', function(cluster) {\n    // `cluster` is a Cluster object.\n  })\n  .on('end', function() {\n    // All clusters retrieved.\n  });"},{"caption":"<p>If you anticipate many results, you can end a stream early to prevent \nunnecessary processing and API requests.</p>","code":"instance.getClustersStream()\n  .on('data', function(cluster) {\n    this.end();\n  });"}],"params":[{"name":"query","description":"<ul> <li>Configuration object. See <a data-custom-type=\"bigtable/instance\" data-method=\"getClusters\">bigtable/instance#getClusters</a> for a complete list of options.</li> </ul> ","types":["object"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["stream"],"description":""}]},{"id":"getTables","name":"getTables","type":"instance","description":"<p>Get Table objects for all the tables in your Compute instance.</p>","source":"packages/bigtable/src/instance.js#L667","resources":[],"examples":[{"code":"instance.getTables(function(err, tables) {\n  if (!err) {\n    // `tables` is an array of Table objects.\n  }\n});"},{"caption":"<p>To control how many API requests are made and page through the results \nmanually, set <code>autoPaginate</code> to false.</p>","code":"var callback = function(err, tables, nextQuery, apiResponse) {\n  if (nextQuery) {\n    // More results exist.\n    instance.getTables(nextQuery, calback);\n  }\n};\n\ninstance.getTables({\n  autoPaginate: false\n}, callback);"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"instance.getTables().then(function(data) {\n  var tables = data[0];\n});"}],"params":[{"name":"query","description":"<ul> <li>Query object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"query.autoPaginate","description":"<ul> <li>Have pagination handled automatically. Default: true.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"query.maxApiCalls","description":"<ul> <li>Maximum number of API calls to make.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"query.maxResults","description":"<ul> <li>Maximum number of items to return.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"query.pageToken","description":"<ul> <li>A previously-returned page token representing part of a larger set of results to view.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"query.view","description":"<ul> <li>View over the table&#39;s fields. Possible options are &#39;name&#39;, &#39;schema&#39; or &#39;full&#39;. Default: &#39;name&#39;.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.tables","description":"<ul> <li>List of all Tables.</li> </ul> ","types":["<a data-custom-type=\"bigtable/table[]\" data-method=\"\">bigtable/table[]</a>"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"getTablesStream","name":"getTablesStream","type":"instance","description":"<p>Get <a data-custom-type=\"bigtable/table\" data-method=\"\">bigtable/table</a> objects for all the tables in your Compute instance as a readable object stream.</p>","source":"packages/bigtable/src/instance.js#L737","resources":[],"examples":[{"code":"instance.getTablesStream()\n  .on('error', console.error)\n  .on('data', function(table) {\n    // table is a Table object.\n  })\n  .on('end', function() {\n    // All tables retrieved.\n  });"},{"caption":"<p>If you anticipate many results, you can end a stream early to prevent \nunnecessary processing and API requests.</p>","code":"instance.getTablesStream()\n  .on('data', function(table) {\n    this.end();\n  });"}],"params":[{"name":"query","description":"<ul> <li>Configuration object. See <a data-custom-type=\"bigtable/instance\" data-method=\"getTables\">bigtable/instance#getTables</a> for a complete list of options.</li> </ul> ","types":["object"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["stream"],"description":""}]},{"id":"table","name":"table","type":"instance","description":"<p>Get a reference to a Bigtable table.</p>","source":"packages/bigtable/src/instance.js#L748","resources":[],"examples":[{"code":"var table = instance.table('presidents');"}],"params":[{"name":"name","description":"<ul> <li>The name of the table.</li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"bigtable/table\" data-method=\"\">bigtable/table</a>"],"description":""}]}],"path":"instance.json"}