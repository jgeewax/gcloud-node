{"id":"bigtable/cluster","type":"class","name":"Cluster","overview":"<p>\n  This class allows you interact with Google Cloud Bigtable.\n</p>\n\n<p>\n  First, install <code>@google-cloud/bigtable</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save @google-cloud/bigtable</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>@google-cloud/bigtable</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Compute Engine</h4>\n<div hljs language=\"javascript\">\nvar bigtable = require('@google-cloud/bigtable')();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar bigtable = require('@google-cloud/bigtable')({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>@google-cloud/bigtable</code> are outlined in our <a href=\"#/docs/bigtable/0.8.0/guides/authentication\">Authentication guide</a>.\n</p>\n\n","description":"","source":"packages/bigtable/src/cluster.js","parent":"bigtable","children":[],"methods":[{"id":"Cluster","name":"Cluster","type":"constructor","description":"<p>Create a cluster object to interact with your cluster.</p>","source":"packages/bigtable/src/cluster.js#L41","resources":[],"examples":[{"code":"var instance = bigtable.instance('my-instance');\nvar cluster = instance.cluster('my-cluster');"}],"params":[{"name":"name","description":"<ul> <li>Name of the cluster.</li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"create","name":"create","type":"instance","description":"<p>Create a cluster.</p>","source":"packages/bigtable/src/cluster.js#L77","resources":[],"examples":[{"code":"cluster.create(function(err, cluster, operation, apiResponse) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  operation\n    .on('error', console.error)\n    .on('complete', function() {\n      // The cluster was created successfully.\n    });\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"cluster.create().then(function(data) {\n  var cluster = data[0];\n  var operation = data[1];\n  var apiResponse = data[2];\n});"}],"params":[{"name":"options","description":"<ul> <li>See <a data-custom-type=\"bigtable/instance\" data-method=\"createCluster\">bigtable/instance#createCluster</a></li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"delete","name":"delete","type":"instance","description":"<p>Delete the cluster.</p>","source":"packages/bigtable/src/cluster.js#L97","resources":[],"examples":[{"code":"cluster.delete(function(err, apiResponse) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"cluster.delete().then(function(data) {\n  var apiResponse = data[0];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"exists","name":"exists","type":"instance","description":"<p>Check if a cluster exists.</p>","source":"packages/bigtable/src/cluster.js#L125","resources":[],"examples":[{"code":"cluster.exists(function(err, exists) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"cluster.exists().then(function(data) {\n  var exists = data[0];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.exists","description":"<ul> <li>Whether the cluster exists or not.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"get","name":"get","type":"instance","description":"<p>Get a cluster if it exists.</p>","source":"packages/bigtable/src/cluster.js#L143","resources":[],"examples":[{"code":"cluster.get(function(err, cluster, apiResponse) {\n  // The `cluster` data has been populated.\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"cluster.get().then(function(data) {\n  var cluster = data[0];\n  var apiResponse = data[1];\n});"}],"params":[],"exceptions":[],"returns":[]},{"id":"getMetadata","name":"getMetadata","type":"instance","description":"<p>Get the cluster metadata.</p>","source":"packages/bigtable/src/cluster.js#L165","resources":[],"examples":[{"code":"cluster.getMetadata(function(err, metadata, apiResponse) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"cluster.getMetadata().then(function(data) {\n  var metadata = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.metadata","description":"<ul> <li>The metadata.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"setMetadata","name":"setMetadata","type":"instance","description":"<p>Set the cluster metadata.</p><p>See <a data-custom-type=\"bigtable/instance\" data-method=\"createCluster\">bigtable/instance#createCluster</a> for a detailed explanation of the arguments.</p>","source":"packages/bigtable/src/cluster.js#L285","resources":[],"examples":[{"code":"var callback = function(err, operation, apiResponse) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  operation\n    .on('error', console.error)\n    .on('complete', function() {\n      // The cluster was updated successfully.\n    });\n};\n\nvar metadata = {\n  location: 'us-central1-b',\n  nodes: 3,\n  storage: 'ssd'\n};\n\ncluster.setMetadata(metadata, callback);"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"cluster.setMetadata(metadata).then(function(data) {\n  var operation = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"metadata","description":"<ul> <li>Metadata object.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"metadata.location","description":"<ul> <li>The cluster location.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"metadata.nodes","description":"<ul> <li>Number of nodes allocated to the cluster.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"metadata.storage","description":"<ul> <li>The cluster storage type.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.operation","description":"<ul> <li>An operation object that can be used to check the status of the request.</li> </ul> ","types":["Operation"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]}],"path":"cluster.json"}