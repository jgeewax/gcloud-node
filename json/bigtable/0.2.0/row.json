{"id":"bigtable/row","type":"class","name":"Row","overview":"<p>\n  This class allows you interact with Google Cloud Bigtable.\n</p>\n\n<p>\n  First, install <code>@google-cloud/bigtable</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save @google-cloud/bigtable</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>@google-cloud/bigtable</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Compute Engine</h4>\n<div hljs language=\"javascript\">\nvar bigtable = require('@google-cloud/bigtable')();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar bigtable = require('@google-cloud/bigtable')({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>@google-cloud/bigtable</code> are outlined in our <a href=\"#/docs/bigtable/0.2.0/guides/authentication\">Authentication guide</a>.\n</p>\n\n","description":"","source":"packages/bigtable/src/row.js","parent":"bigtable","children":[],"methods":[{"id":"Row","name":"Row","type":"constructor","description":"<p>Create a Row object to interact with your table rows.</p>","source":"packages/bigtable/src/row.js#L67","resources":[],"examples":[{"code":"var instance = bigtable.instance('my-instance');\nvar table = instance.table('prezzy');\nvar row = table.row('gwashington');"}],"params":[],"exceptions":[],"returns":[]},{"id":"exists","name":"exists","type":"instance","description":"<p>Check if the table row exists.</p>","source":"packages/bigtable/src/row.js#L81","resources":[],"examples":[{"code":"row.exists(function(err, exists) {});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.exists","description":"<ul> <li>Whether the row exists or not.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"create","name":"create","type":"instance","description":"<p>Create a new row in your table.</p>","source":"packages/bigtable/src/row.js#L283","resources":[],"examples":[{"code":"var callback = function(err, apiResponse) {\n  if (!err) {\n    // Row successfully created\n  }\n};\n\nrow.create(callback);"},{"caption":"<p>Optionally, you can supply entry data.</p>","code":"row.create({\n  follows: {\n     alincoln: 1\n  }\n}, callback);"}],"params":[{"name":"entry","description":"<ul> <li>An entry. See <a data-custom-type=\"bigtable/table\" data-method=\"insert\">bigtable/table#insert</a>.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.row","description":"<ul> <li>The newly created row object.</li> </ul> ","types":["<a data-custom-type=\"bigtable/row\" data-method=\"\">bigtable/row</a>"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"createRules","name":"createRules","type":"instance","description":"<p>Update a row with rules specifying how the row&#39;s contents are to be transformed into writes. Rules are applied in order, meaning that earlier rules will affect the results of later ones.</p>","source":"packages/bigtable/src/row.js#L350","resources":[],"examples":[{"caption":"<p>Add an increment amount to an existing value, if the targeted cell is \nunset, it will be treated as containing a zero.</p>","code":"var callback = function(err, apiResponse) {\n  if (!err) {\n    // The rules have successfully been applied.\n  }\n};\n\nrow.createRules([\n  {\n    column: 'follows:gwashington',\n    increment: 1\n  }\n], callback);"},{"caption":"<p>You can also create a rule that will append data to an existing value. \nIf the targeted cell is unset, it will be treated as a containing an \nempty string.</p>","code":"row.createRules([\n  {\n    column: 'follows:alincoln',\n    append: ' Honest Abe!'\n  }\n], callback);"}],"params":[{"name":"rules","description":"<ul> <li>The rules to apply to this row.</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[{"type":"error","description":"<p>If no rules are provided.</p>"}],"returns":[]},{"id":"filter","name":"filter","type":"instance","description":"<p>Mutates a row atomically based on the output of a filter. Depending on whether or not any results are yielded, either the <code>onMatch</code> or <code>onNoMatch</code> callback will be executed.</p>","source":"packages/bigtable/src/row.js#L438","resources":[],"examples":[{"code":"var callback = function(err, matched) {\n  if (!err) {\n    // `matched` will let us know if a match was found or not.\n  }\n};\n\nvar filter = [\n  {\n    family: 'follows'\n  }, {\n    column: 'alincoln',\n  }, {\n    value: 1\n  }\n];\n\nvar entries = [\n  {\n    method: 'insert',\n    data: {\n      follows: {\n        jadams: 1\n      }\n    }\n  }\n];\n\nrow.filter(filter, entries, callback);"},{"caption":"<p>Optionally, you can pass in an array of entries to be ran in the event \nthat a match is not made.</p>","code":"row.filter(filter, null, entries, callback);"}],"params":[{"name":"filter","description":"<ul> <li>Filter ot be applied to the contents of the row.</li> </ul> ","types":["<a data-custom-type=\"bigtable/filter\" data-method=\"\">bigtable/filter</a>"],"optional":false,"nullable":false},{"name":"onMatch","description":"<ul> <li>A list of entries to be ran if a match is found.</li> </ul> ","types":["object[]"],"optional":false,"nullable":true},{"name":"onNoMatch","description":"<ul> <li>A list of entries to be ran if no matches are found.</li> </ul> ","types":["object[]"],"optional":true,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.matched","description":"<ul> <li>Whether a match was found or not.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"delete","name":"delete","type":"instance","description":"<p>Deletes all cells in the row.</p>","source":"packages/bigtable/src/row.js#L486","resources":[],"examples":[{"code":"row.delete(function(err, apiResponse) {});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"deleteCells","name":"deleteCells","type":"instance","description":"<p>Delete specified cells from the row. See <a data-custom-type=\"bigtable/table\" data-method=\"mutate\">bigtable/table#mutate</a>.</p>","source":"packages/bigtable/src/row.js#L525","resources":[],"examples":[{"caption":"<p>Delete individual cells.</p>","code":"var callback = function(err, apiResponse) {\n  if (!err) {\n    // Cells were successfully deleted.\n  }\n};\n\nrow.deleteCells([\n  'follows:gwashington'\n], callback);"},{"caption":"<p>Delete all cells within a family.</p>","code":"row.deleteCells([\n  'follows',\n], callback)"}],"params":[{"name":"columns","description":"<ul> <li>Column names for the cells to be deleted.</li> </ul> ","types":["string[]"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"get","name":"get","type":"instance","description":"<p>Get the row data. See <a data-custom-type=\"bigtable/table\" data-method=\"getRows\">bigtable/table#getRows</a>.</p>","source":"packages/bigtable/src/row.js#L569","resources":[],"examples":[{"caption":"<p>Use this method to grab an entire row</p>","code":"var callback = function(err, row, apiResponse) {\n  if (!err) {\n    // `row.cells` has been updated.\n  }\n};\n\nrow.get(callback);"},{"caption":"<p>Or pass in an array of column names to populate specific cells. \nUnder the hood this will create an interleave filter.</p>","code":"row.get([\n  'follows:gwashington',\n  'follows:alincoln'\n], callback);"}],"params":[{"name":"columns","description":"<ul> <li>List of specific columns to retrieve.</li> </ul> ","types":["string[]"],"optional":true,"nullable":false},{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"options.decode","description":"<ul> <li>If set to <code>false</code> it will not decode Buffer values returned from Bigtable. Default: true.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.row","description":"<ul> <li>The updated Row object.</li> </ul> ","types":["<a data-custom-type=\"bigtable/row\" data-method=\"\">bigtable/row</a>"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"getMetadata","name":"getMetadata","type":"instance","description":"<p>Get the row&#39;s metadata.</p>","source":"packages/bigtable/src/row.js#L652","resources":[],"examples":[{"code":"row.getMetadata(function(err, metadata, apiResponse) {});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"options.decode","description":"<ul> <li>If set to <code>false</code> it will not decode Buffer values returned from Bigtable. Default: true.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.metadata","description":"<ul> <li>The row&#39;s metadata.</li> </ul> ","types":["object"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"increment","name":"increment","type":"instance","description":"<p>Increment a specific column within the row. If the column does not exist, it is automatically initialized to 0 before being incremented.</p>","source":"packages/bigtable/src/row.js#L699","resources":[],"examples":[{"code":"var callback = function(err, value, apiResponse) {\n  if (!err) {\n    // `value` is the value of the updated column.\n  }\n};\n\nrow.increment('follows:gwashington', callback)"},{"caption":"<p>Specify a custom amount to increment the column by.</p>","code":"row.increment('follows:gwashington', 2, callback);"},{"caption":"<p>To decrement a column, simply supply a negative value.</p>","code":"row.increment('follows:gwashington', -1, callback);"}],"params":[{"name":"column","description":"<ul> <li>The column we are incrementing a value in.</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"value","description":"<ul> <li>The amount to increment by, defaults to 1.</li> </ul> ","types":["number"],"optional":true,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.value","description":"<ul> <li>The updated value of the column.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"save","name":"save","type":"instance","description":"<p>Update the row cells.</p>","source":"packages/bigtable/src/row.js#L758","resources":[],"examples":[{"caption":"<p>Update a single cell.</p>","code":"var callback = function(err, apiResponse) {\n  if (!err) {\n    // The row has been successfully updated.\n  }\n};\n\nrow.save('follows:jadams', 1, callback);"},{"caption":"<p>Or update several cells at once.</p>","code":"row.save({\n  follows: {\n    jadams: 1,\n    wmckinley: 1\n  }\n}, callback);"}],"params":[{"name":"key","description":"<ul> <li>Either a column name or an entry object to be inserted into the row. See <a data-custom-type=\"bigtable/table\" data-method=\"insert\">bigtable/table#insert</a>.</li> </ul> ","types":["string","object"],"optional":false,"nullable":false},{"name":"value","description":"<ul> <li>This can be omitted if using entry object.</li> </ul> ","types":[],"optional":true,"nullable":false},{"name":"options","description":"<ul> <li>Configuration options. See <a data-custom-type=\"bigtable/table\" data-method=\"mutate\">bigtable/table#mutate</a>.</li> </ul> ","types":["object"],"optional":true,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]}]}