{"id":"vision/v1/image_annotator_client","type":"class","overview":"<p>\n  This class allows you interact with Cloud Vision.\n</p>\n\n\n\n<p>\n  First, install <code>@google-cloud/vision</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save @google-cloud/vision</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>@google-cloud/vision</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Google Cloud Platform</h4>\n<div hljs language=\"javascript\">\nvar vision = require('@google-cloud/vision')();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar vision = require('@google-cloud/vision')({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>@google-cloud/vision</code> are outlined in our <a href=\"#/docs/vision/v0.11.4/guides/authentication\">Authentication guide</a>.\n</p>\n","source":"packages\\vision\\src\\v1\\image_annotator_client.js","parent":"vision","children":[],"methods":[{"id":"ImageAnnotatorClient","name":"ImageAnnotatorClient","type":"constructor","description":"<p>Service that performs Google Cloud Vision API detection tasks over client images, such as face, landmark, logo, label, and text detection. The ImageAnnotator service returns detected entities from the images.</p><p>This will be created through a builder function which can be obtained by the module. See the following example of how to initialize the module and how to access to the builder.</p>","source":"packages\\vision\\src\\v1\\image_annotator_client.js#L65","resources":[],"examples":[{"code":"var visionV1 = require('@google-cloud/vision').v1({\n  // optional auth parameters.\n});\nvar client = visionV1.imageAnnotatorClient();"}],"params":[],"exceptions":[],"returns":[]},{"id":"getProjectId","name":"getProjectId","type":"instance","description":"<p>Get the project ID used by this class.</p>","source":"packages\\vision\\src\\v1\\image_annotator_client.js#L118","resources":[],"examples":[],"params":[{"name":"callback","description":"<ul> <li>the callback to be called with the current project Id.</li> </ul> ","types":["function(Error, string)"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"batchAnnotateImages","name":"batchAnnotateImages","type":"instance","description":"<p>Run image detection and annotation for a batch of images.</p>","source":"packages\\vision\\src\\v1\\image_annotator_client.js#L155","resources":[],"examples":[{"code":"\nvar client = visionV1.imageAnnotatorClient();\nvar requests = [];\nclient.batchAnnotateImages({requests: requests}).then(function(responses) {\n    var response = responses[0];\n    // doThingsWith(response)\n}).catch(function(err) {\n    console.error(err);\n});"}],"params":[{"name":"request","description":"<p> The request object that will be sent.</p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.requests","description":"<p> Individual image annotation requests for this batch.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'AnnotateImageRequest'\n        })\">AnnotateImageRequest</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this call, e.g, timeout,  retries, paginations, etc. See <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a> for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"imageAnnotatorClient","name":"imageAnnotatorClient","type":"instance","description":"<p>Build a new instance of {@link ImageAnnotatorClient}.</p>","source":"packages\\vision\\src\\v1\\image_annotator_client.js#L193","resources":[],"examples":[],"params":[{"name":"opts","description":"<ul> <li>The optional parameters.</li> </ul> ","types":["Object"],"optional":true,"nullable":false},{"name":"opts.servicePath","description":"<p> The domain name of the API remote host.</p>","types":["String"],"optional":true,"nullable":false},{"name":"opts.port","description":"<p> The port on which to connect to the remote host.</p>","types":["number"],"optional":true,"nullable":false},{"name":"opts.sslCreds","description":"<p> A ClientCredentials for use with an SSL-enabled channel.</p>","types":["grpc.ClientCredentials"],"optional":true,"nullable":false},{"name":"opts.clientConfig","description":"<p> The customized config to build the call settings. See  {@link gax.constructSettings} for the format.</p>","types":["Object"],"optional":true,"nullable":false}],"exceptions":[],"returns":[]}],"path":"image_annotator_client.json"}