{"name":"Data Types","methods":[{"id":"Vertex","name":"Vertex","type":"instance","description":"<p>A vertex represents a 2D point in the image. NOTE: the vertex coordinates are in the same scale as the original image.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_geometry.js#L35","resources":[],"examples":[],"params":[{"name":"x","description":"<p> X coordinate.</p>","types":["number"],"optional":false,"nullable":false},{"name":"y","description":"<p> Y coordinate.</p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"BoundingPoly","name":"BoundingPoly","type":"instance","description":"<p>A bounding polygon for the detected image annotation.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_geometry.js#L50","resources":[],"examples":[],"params":[{"name":"vertices","description":"<p> The bounding polygon vertices.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Vertex'\n        })\">Vertex</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Vertex'\n        })\">Vertex</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Position","name":"Position","type":"instance","description":"<p>A 3D position in the image, used primarily for Face detection landmarks. A valid Position must have both x and y coordinates. The position coordinates are in the same scale as the original image.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_geometry.js#L71","resources":[],"examples":[],"params":[{"name":"x","description":"<p> X coordinate.</p>","types":["number"],"optional":false,"nullable":false},{"name":"y","description":"<p> Y coordinate.</p>","types":["number"],"optional":false,"nullable":false},{"name":"z","description":"<p> Z coordinate (or depth).</p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"type":"instance","description":"<p><code>Any</code> contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.</p><p>Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.</p><p>Example 1: Pack and unpack a message in C++.</p><pre><code>Foo foo = ...; Any any; any.PackFrom(foo); ... if (any.UnpackTo(&amp;foo)) { ... } </code></pre><p>Example 2: Pack and unpack a message in Java.</p><pre><code>Foo foo = ...; Any any = Any.pack(foo); ... if (any.is(Foo.class)) { foo = any.unpack(Foo.class); } </code></pre><p> Example 3: Pack and unpack a message in Python.</p><pre><code>foo = Foo(...) any = Any() any.Pack(foo) ... if any.Is(Foo.DESCRIPTOR): any.Unpack(foo) ... </code></pre><p>The pack methods provided by protobuf library will by default use &#39;type.googleapis.com/full.type.name&#39; as the type URL and the unpack methods only use the fully qualified type name after the last &#39;/&#39; in the type URL, for example &quot;foo.bar.com/x/y.z&quot; will yield type name &quot;y.z&quot;.</p><h1>JSON</h1> <p>The JSON representation of an <code>Any</code> value uses the regular representation of the deserialized, embedded message, with an additional field <code>@type</code> which contains the type URL. Example:</p><pre><code>package google.profile; message Person { string first_name = 1; string last_name = 2; } { &quot;@type&quot;: &quot;type.googleapis.com/google.profile.Person&quot;, &quot;firstName&quot;: &lt;string&gt;, &quot;lastName&quot;: &lt;string&gt; } </code></pre><p>If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field <code>value</code> which holds the custom JSON in addition to the <code>@type</code> field. Example (for message {@link google.protobuf.Duration}):</p><pre><code>{ &quot;@type&quot;: &quot;type.googleapis.com/google.protobuf.Duration&quot;, &quot;value&quot;: &quot;1.212s&quot; } </code></pre>","source":"packages\\vision\\src\\v1\\doc\\doc_google_protobuf_any.js#L122","resources":[],"examples":[],"params":[{"name":"typeUrl","description":"<p> A URL/resource name whose content describes the type of the  serialized protocol buffer message.</p><p> For URLs which use the scheme <code>http</code>, <code>https</code>, or no scheme, the  following restrictions and interpretations apply:</p><ul> <li>If no scheme is provided, <code>https</code> is assumed.</li> <li>The last segment of the URL&#39;s path must represent the fully qualified name of the type (as in <code>path/google.protobuf.Duration</code>). The name should be in a canonical form (e.g., leading &quot;.&quot; is not accepted).</li> <li>An HTTP GET on the URL must yield a {@link google.protobuf.Type} value in binary format, or produce an error.</li> <li><p>Applications are allowed to cache lookup results based on the URL, or have them precompiled into a binary to avoid any lookup. Therefore, binary compatibility needs to be preserved on changes to types. (Use versioned type names to manage breaking changes.)</p><p>Schemes other than <code>http</code>, <code>https</code> (or the empty scheme) might be used with implementation specific semantics.</p></li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"value","description":"<p> Must be a valid serialized protocol buffer of the above specified type.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"type":"instance","description":"<p>Wrapper message for <code>double</code>.</p><p>The JSON representation for <code>DoubleValue</code> is JSON number.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_google_protobuf_wrappers.js#L33","resources":[],"examples":[],"params":[{"name":"value","description":"<p> The double value.</p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"type":"instance","description":"<p>The <code>Status</code> type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by <a href=\"https://github.com/grpc\">gRPC</a>. The error model is designed to be:</p><ul> <li>Simple to use and understand for most users</li> <li>Flexible enough to meet unexpected needs</li> </ul> <h1>Overview</h1> <p>The <code>Status</code> message contains three pieces of data: error code, error message, and error details. The error code should be an enum value of {@link google.rpc.Code}, but it may accept additional error codes if needed. The error message should be a developer-facing English message that helps developers <em>understand</em> and <em>resolve</em> the error. If a localized user-facing error message is needed, put the localized message in the error details or localize it in the client. The optional error details may contain arbitrary information about the error. There is a predefined set of error detail types in the package <code>google.rpc</code> which can be used for common error conditions.</p><h1>Language mapping</h1> <p>The <code>Status</code> message is the logical representation of the error model, but it is not necessarily the actual wire format. When the <code>Status</code> message is exposed in different client libraries and different wire protocols, it can be mapped differently. For example, it will likely be mapped to some exceptions in Java, but more likely mapped to some error codes in C.</p><h1>Other uses</h1> <p>The error model and the <code>Status</code> message can be used in a variety of environments, either with or without APIs, to provide a consistent developer experience across different environments.</p><p>Example uses of this error model include:</p><ul> <li><p>Partial errors. If a service needs to return partial errors to the client,  it may embed the <code>Status</code> in the normal response to indicate the partial  errors.</p></li> <li><p>Workflow errors. A typical workflow has multiple steps. Each step may  have a <code>Status</code> message for error reporting purpose.</p></li> <li><p>Batch operations. If a client uses batch request and batch response, the  <code>Status</code> message should be used directly inside batch response, one for  each error sub-response.</p></li> <li><p>Asynchronous operations. If an API call embeds asynchronous operation  results in its response, the status of those operations should be  represented directly using the <code>Status</code> message.</p></li> <li><p>Logging. If some API errors are stored in logs, the message <code>Status</code> could  be used directly after any stripping needed for security/privacy reasons.</p></li> </ul> ","source":"packages\\vision\\src\\v1\\doc\\doc_google_rpc_status.js#L93","resources":[],"examples":[],"params":[{"name":"code","description":"<p> The status code, which should be an enum value of {@link google.rpc.Code}.</p>","types":["number"],"optional":false,"nullable":false},{"name":"message","description":"<p> A developer-facing error message, which should be in English. Any  user-facing error message should be localized and sent in the  {@link google.rpc.Status.details} field, or localized by the client.</p>","types":["string"],"optional":false,"nullable":false},{"name":"details","description":"<p> A list of messages that carry the error details. There will be a  common set of message types for APIs to use.</p><p> This object should have the same structure as google.protobuf.Any</p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"type":"instance","description":"<p>Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to/from color representations in various languages over compactness; for example, the fields of this representation can be trivially provided to the constructor of &quot;java.awt.Color&quot; in Java; it can also be trivially provided to UIColor&#39;s &quot;+colorWithRed:green:blue:alpha&quot; method in iOS; and, with just a little work, it can be easily formatted into a CSS &quot;rgba()&quot; string in JavaScript, as well. Here are some examples:</p><p>Example (Java):</p><pre><code> import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... </code></pre><p>Example (iOS / Obj-C):</p><pre><code> // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&amp;red green:&amp;green blue:&amp;blue alpha:&amp;alpha]) { return nil; } Color* result = [Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha &lt;= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... </code></pre><p> Example (JavaScript):</p><pre><code>// ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!(&#39;alpha&#39; in rgb_color)) { return rgbToCssColor_(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(&#39;,&#39;); return [&#39;rgba(&#39;, rgbParams, &#39;,&#39;, alphaFrac, &#39;)&#39;].join(&#39;&#39;); }; var rgbToCssColor_ = function(red, green, blue) { var rgbNumber = new Number((red &lt;&lt; 16) | (green &lt;&lt; 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = [&#39;#&#39;]; for (var i = 0; i &lt; missingZeros; i++) { resultBuilder.push(&#39;0&#39;); } resultBuilder.push(hexString); return resultBuilder.join(&#39;&#39;); }; // ... </code></pre>","source":"packages\\vision\\src\\v1\\doc\\doc_google_type_color.js#L165","resources":[],"examples":[],"params":[{"name":"red","description":"<p> The amount of red in the color as a value in the interval [0, 1].</p>","types":["number"],"optional":false,"nullable":false},{"name":"green","description":"<p> The amount of green in the color as a value in the interval [0, 1].</p>","types":["number"],"optional":false,"nullable":false},{"name":"blue","description":"<p> The amount of blue in the color as a value in the interval [0, 1].</p>","types":["number"],"optional":false,"nullable":false},{"name":"alpha","description":"<p> The fraction of this color that should be applied to the pixel. That is,  the final pixel color is defined by the equation:</p><pre><code>pixel color = alpha * (this color) + (1.0 - alpha) * (background color) </code></pre><p> This means that a value of 1.0 corresponds to a solid color, whereas  a value of 0.0 corresponds to a completely transparent color. This  uses a wrapper message rather than a simple float scalar so that it is  possible to distinguish between a default value and the value being unset.  If omitted, this color object is to be rendered as a solid color  (as if the alpha value had been explicitly given with a value of 1.0).</p><p> This object should have the same structure as google.protobuf.FloatValue</p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"type":"instance","description":"<p>An object representing a latitude/longitude pair. This is expressed as a pair of doubles representing degrees latitude and degrees longitude. Unless specified otherwise, this must conform to the <a href=\"http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf\">WGS84 standard</a>. Values must be within normalized ranges.</p><p>Example of normalization code in Python:</p><pre><code>def NormalizeLongitude(longitude): &quot;&quot;&quot;Wraps decimal degrees longitude to [-180.0, 180.0].&quot;&quot;&quot; q, r = divmod(longitude, 360.0) if r &gt; 180.0 or (r == 180.0 and q &lt;= -1.0): return r - 360.0 return r def NormalizeLatLng(latitude, longitude): &quot;&quot;&quot;Wraps decimal degrees latitude and longitude to [-90.0, 90.0] and [-180.0, 180.0], respectively.&quot;&quot;&quot; r = latitude % 360.0 if r &lt;= 90.0: return r, NormalizeLongitude(longitude) elif r &gt;= 270.0: return r - 360, NormalizeLongitude(longitude) else: return 180 - r, NormalizeLongitude(longitude + 180.0) assert 180.0 == NormalizeLongitude(180.0) assert -180.0 == NormalizeLongitude(-180.0) assert -179.0 == NormalizeLongitude(181.0) assert (0.0, 0.0) == NormalizeLatLng(360.0, 0.0) assert (0.0, 0.0) == NormalizeLatLng(-360.0, 0.0) assert (85.0, 180.0) == NormalizeLatLng(95.0, 0.0) assert (-85.0, -170.0) == NormalizeLatLng(-95.0, 10.0) assert (90.0, 10.0) == NormalizeLatLng(90.0, 10.0) assert (-90.0, -10.0) == NormalizeLatLng(-90.0, -10.0) assert (0.0, -170.0) == NormalizeLatLng(-180.0, 10.0) assert (0.0, -170.0) == NormalizeLatLng(180.0, 10.0) assert (-90.0, 10.0) == NormalizeLatLng(270.0, 10.0) assert (90.0, 10.0) == NormalizeLatLng(-270.0, 10.0) </code></pre>","source":"packages\\vision\\src\\v1\\doc\\doc_google_type_latlng.js#L72","resources":[],"examples":[],"params":[{"name":"latitude","description":"<p> The latitude in degrees. It must be in the range [-90.0, +90.0].</p>","types":["number"],"optional":false,"nullable":false},{"name":"longitude","description":"<p> The longitude in degrees. It must be in the range [-180.0, +180.0].</p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Feature","name":"Feature","type":"instance","description":"<p>Users describe the type of Google Cloud Vision API tasks to perform over images by using <em>Feature</em>s. Each Feature indicates a type of image detection task to perform. Features encode the Cloud Vision API vertical to operate on and the number of top-scoring results to return.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_image_annotator.js#L39","resources":[],"examples":[],"params":[{"name":"type","description":"<p> The feature type.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Type'\n        })\">Type</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Type'\n        })\">Type</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"maxResults","description":"<p> Maximum number of results of this type.</p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Type","name":"Type","type":"instance","description":"<p>Type of image feature.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_image_annotator.js#L47","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"ImageSource","name":"ImageSource","type":"instance","description":"<p>External image source (Google Cloud Storage image location).</p>","source":"packages\\vision\\src\\v1\\doc\\doc_image_annotator.js#L133","resources":[],"examples":[],"params":[{"name":"gcsImageUri","description":"<p> NOTE: For new code <code>image_uri</code> below is preferred.  Google Cloud Storage image URI, which must be in the following form:  <code>gs://bucket_name/object_name</code> (for details, see  <a href=\"https://cloud.google.com/storage/docs/reference-uris\">Google Cloud Storage Request  URIs</a>).  NOTE: Cloud Storage object versioning is not supported.</p>","types":["string"],"optional":false,"nullable":false},{"name":"imageUri","description":"<p> Image URI which supports:  1) Google Cloud Storage image URI, which must be in the following form:  <code>gs://bucket_name/object_name</code> (for details, see  <a href=\"https://cloud.google.com/storage/docs/reference-uris\">Google Cloud Storage Request  URIs</a>).  NOTE: Cloud Storage object versioning is not supported.  2) Publicly accessible image HTTP/HTTPS URL.  This is preferred over the legacy <code>gcs_image_uri</code> above. When both  <code>gcs_image_uri</code> and <code>image_uri</code> are specified, <code>image_uri</code> takes  precedence.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Image","name":"Image","type":"instance","description":"<p>Client image to perform Google Cloud Vision API tasks over.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_image_annotator.js#L155","resources":[],"examples":[],"params":[{"name":"content","description":"<p> Image content, represented as a stream of bytes.  Note: as with all <code>bytes</code> fields, protobuffers use a pure binary  representation, whereas JSON representations use base64.</p>","types":["string"],"optional":false,"nullable":false},{"name":"source","description":"<p> Google Cloud Storage image location. If both <code>content</code> and <code>source</code>  are provided for an image, <code>content</code> takes precedence and is  used to perform the image annotation request.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ImageSource'\n        })\">ImageSource</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'ImageSource'\n        })\">ImageSource</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"FaceAnnotation","name":"FaceAnnotation","type":"instance","description":"<p>A face annotation object contains the results of face detection.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_image_annotator.js#L246","resources":[],"examples":[],"params":[{"name":"boundingPoly","description":"<p> The bounding polygon around the face. The coordinates of the bounding box  are in the original image&#39;s scale, as returned in <code>ImageParams</code>.  The bounding box is computed to &quot;frame&quot; the face in accordance with human  expectations. It is based on the landmarker results.  Note that one or more x and/or y coordinates may not be generated in the  <code>BoundingPoly</code> (the polygon will be unbounded) if only a partial face  appears in the image to be annotated.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BoundingPoly'\n        })\">BoundingPoly</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BoundingPoly'\n        })\">BoundingPoly</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"fdBoundingPoly","description":"<p> The <code>fd_bounding_poly</code> bounding polygon is tighter than the  <code>boundingPoly</code>, and encloses only the skin part of the face. Typically, it  is used to eliminate the face from any image analysis that detects the  &quot;amount of skin&quot; visible in an image. It is not based on the  landmarker results, only on the initial face detection, hence  the <code>fd</code> (face detection) prefix.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BoundingPoly'\n        })\">BoundingPoly</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BoundingPoly'\n        })\">BoundingPoly</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"landmarks","description":"<p> Detected face landmarks.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Landmark'\n        })\">Landmark</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Landmark'\n        })\">Landmark</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"rollAngle","description":"<p> Roll angle, which indicates the amount of clockwise/anti-clockwise rotation  of the face relative to the image vertical about the axis perpendicular to  the face. Range [-180,180].</p>","types":["number"],"optional":false,"nullable":false},{"name":"panAngle","description":"<p> Yaw angle, which indicates the leftward/rightward angle that the face is  pointing relative to the vertical plane perpendicular to the image. Range  [-180,180].</p>","types":["number"],"optional":false,"nullable":false},{"name":"tiltAngle","description":"<p> Pitch angle, which indicates the upwards/downwards angle that the face is  pointing relative to the image&#39;s horizontal plane. Range [-180,180].</p>","types":["number"],"optional":false,"nullable":false},{"name":"detectionConfidence","description":"<p> Detection confidence. Range [0, 1].</p>","types":["number"],"optional":false,"nullable":false},{"name":"landmarkingConfidence","description":"<p> Face landmarking confidence. Range [0, 1].</p>","types":["number"],"optional":false,"nullable":false},{"name":"joyLikelihood","description":"<p> Joy likelihood.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Likelihood'\n        })\">Likelihood</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Likelihood'\n        })\">Likelihood</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"sorrowLikelihood","description":"<p> Sorrow likelihood.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Likelihood'\n        })\">Likelihood</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Likelihood'\n        })\">Likelihood</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"angerLikelihood","description":"<p> Anger likelihood.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Likelihood'\n        })\">Likelihood</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Likelihood'\n        })\">Likelihood</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"surpriseLikelihood","description":"<p> Surprise likelihood.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Likelihood'\n        })\">Likelihood</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Likelihood'\n        })\">Likelihood</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"underExposedLikelihood","description":"<p> Under-exposed likelihood.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Likelihood'\n        })\">Likelihood</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Likelihood'\n        })\">Likelihood</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"blurredLikelihood","description":"<p> Blurred likelihood.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Likelihood'\n        })\">Likelihood</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Likelihood'\n        })\">Likelihood</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"headwearLikelihood","description":"<p> Headwear likelihood.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Likelihood'\n        })\">Likelihood</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Likelihood'\n        })\">Likelihood</a></p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Landmark","name":"Landmark","type":"instance","description":"<p>A face-specific landmark (for example, a face feature). Landmark positions may fall outside the bounds of the image if the face is near one or more edges of the image. Therefore it is NOT guaranteed that <code>0 &lt;= x &lt; width</code> or <code>0 &lt;= y &lt; height</code>.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_image_annotator.js#L269","resources":[],"examples":[],"params":[{"name":"type","description":"<p> Face landmark type.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Type'\n        })\">Type</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Type'\n        })\">Type</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"position","description":"<p> Face landmark position.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Position'\n        })\">Position</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Position'\n        })\">Position</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"LocationInfo","name":"LocationInfo","type":"instance","description":"<p>Detected entity location information.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_image_annotator.js#L471","resources":[],"examples":[],"params":[{"name":"latLng","description":"<p> lat/long location coordinates.</p><p> This object should have the same structure as google.type.LatLng</p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Property","name":"Property","type":"instance","description":"<p>A <code>Property</code> consists of a user-supplied name/value pair.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_image_annotator.js#L487","resources":[],"examples":[],"params":[{"name":"name","description":"<p> Name of the property.</p>","types":["string"],"optional":false,"nullable":false},{"name":"value","description":"<p> Value of the property.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"EntityAnnotation","name":"EntityAnnotation","type":"instance","description":"<p>Set of detected entity features.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_image_annotator.js#L547","resources":[],"examples":[],"params":[{"name":"mid","description":"<p> Opaque entity ID. Some IDs may be available in  <a href=\"https://developers.google.com/knowledge-graph/\">Google Knowledge Graph Search API</a>.</p>","types":["string"],"optional":false,"nullable":false},{"name":"locale","description":"<p> The language code for the locale in which the entity textual  <code>description</code> is expressed.</p>","types":["string"],"optional":false,"nullable":false},{"name":"description","description":"<p> Entity textual description, expressed in its <code>locale</code> language.</p>","types":["string"],"optional":false,"nullable":false},{"name":"score","description":"<p> Overall score of the result. Range [0, 1].</p>","types":["number"],"optional":false,"nullable":false},{"name":"confidence","description":"<p> The accuracy of the entity detection in an image.  For example, for an image in which the &quot;Eiffel Tower&quot; entity is detected,  this field represents the confidence that there is a tower in the query  image. Range [0, 1].</p>","types":["number"],"optional":false,"nullable":false},{"name":"topicality","description":"<p> The relevancy of the ICA (Image Content Annotation) label to the  image. For example, the relevancy of &quot;tower&quot; is likely higher to an image  containing the detected &quot;Eiffel Tower&quot; than to an image containing a  detected distant towering building, even though the confidence that  there is a tower in each image may be the same. Range [0, 1].</p>","types":["number"],"optional":false,"nullable":false},{"name":"boundingPoly","description":"<p> Image region to which this entity belongs. Currently not produced  for <code>LABEL_DETECTION</code> features. For <code>TEXT_DETECTION</code> (OCR), <code>boundingPoly</code>s  are produced for the entire text detected in an image region, followed by  <code>boundingPoly</code>s for each word within the detected text.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BoundingPoly'\n        })\">BoundingPoly</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BoundingPoly'\n        })\">BoundingPoly</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"locations","description":"<p> The location information for the detected entity. Multiple  <code>LocationInfo</code> elements can be present because one location may  indicate the location of the scene in the image, and another location  may indicate the location of the place where the image was taken.  Location information is usually present for landmarks.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'LocationInfo'\n        })\">LocationInfo</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'LocationInfo'\n        })\">LocationInfo</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"properties","description":"<p> Some entities may have optional user-supplied <code>Property</code> (name/value)  fields, such a score or string that qualifies the entity.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Property'\n        })\">Property</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Property'\n        })\">Property</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"SafeSearchAnnotation","name":"SafeSearchAnnotation","type":"instance","description":"<p>Set of features pertaining to the image, computed by computer vision methods over safe-search verticals (for example, adult, spoof, medical, violence).</p>","source":"packages\\vision\\src\\v1\\doc\\doc_image_annotator.js#L581","resources":[],"examples":[],"params":[{"name":"adult","description":"<p> Represents the adult content likelihood for the image.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Likelihood'\n        })\">Likelihood</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Likelihood'\n        })\">Likelihood</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"spoof","description":"<p> Spoof likelihood. The likelihood that an modification  was made to the image&#39;s canonical version to make it appear  funny or offensive.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Likelihood'\n        })\">Likelihood</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Likelihood'\n        })\">Likelihood</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"medical","description":"<p> Likelihood that this is a medical image.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Likelihood'\n        })\">Likelihood</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Likelihood'\n        })\">Likelihood</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"violence","description":"<p> Violence likelihood.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Likelihood'\n        })\">Likelihood</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Likelihood'\n        })\">Likelihood</a></p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"LatLongRect","name":"LatLongRect","type":"instance","description":"<p>Rectangle determined by min and max <code>LatLng</code> pairs.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_image_annotator.js#L601","resources":[],"examples":[],"params":[{"name":"minLatLng","description":"<p> Min lat/long pair.</p><p> This object should have the same structure as google.type.LatLng</p>","types":["Object"],"optional":false,"nullable":false},{"name":"maxLatLng","description":"<p> Max lat/long pair.</p><p> This object should have the same structure as google.type.LatLng</p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ColorInfo","name":"ColorInfo","type":"instance","description":"<p>Color information consists of RGB channels, score, and the fraction of the image that the color occupies in the image.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_image_annotator.js#L624","resources":[],"examples":[],"params":[{"name":"color","description":"<p> RGB components of the color.</p><p> This object should have the same structure as google.type.Color</p>","types":["Object"],"optional":false,"nullable":false},{"name":"score","description":"<p> Image-specific score for this color. Value in range [0, 1].</p>","types":["number"],"optional":false,"nullable":false},{"name":"pixelFraction","description":"<p> The fraction of pixels the color occupies in the image.  Value in range [0, 1].</p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"DominantColorsAnnotation","name":"DominantColorsAnnotation","type":"instance","description":"<p>Set of dominant colors and their corresponding scores.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_image_annotator.js#L639","resources":[],"examples":[],"params":[{"name":"colors","description":"<p> RGB color values with their score and pixel fraction.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ColorInfo'\n        })\">ColorInfo</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'ColorInfo'\n        })\">ColorInfo</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ImageProperties","name":"ImageProperties","type":"instance","description":"<p>Stores image properties, such as dominant colors.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_image_annotator.js#L654","resources":[],"examples":[],"params":[{"name":"dominantColors","description":"<p> If present, dominant colors completed successfully.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'DominantColorsAnnotation'\n        })\">DominantColorsAnnotation</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'DominantColorsAnnotation'\n        })\">DominantColorsAnnotation</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"CropHint","name":"CropHint","type":"instance","description":"<p>Single crop hint that is used to generate a new crop when serving an image.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_image_annotator.js#L677","resources":[],"examples":[],"params":[{"name":"boundingPoly","description":"<p> The bounding polygon for the crop region. The coordinates of the bounding  box are in the original image&#39;s scale, as returned in <code>ImageParams</code>.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BoundingPoly'\n        })\">BoundingPoly</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BoundingPoly'\n        })\">BoundingPoly</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"confidence","description":"<p> Confidence of this being a salient region. Range [0, 1].</p>","types":["number"],"optional":false,"nullable":false},{"name":"importanceFraction","description":"<p> Fraction of importance of this salient region with respect to the original  image.</p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"CropHintsAnnotation","name":"CropHintsAnnotation","type":"instance","description":"<p>Set of crop hints that are used to generate new crops when serving images.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_image_annotator.js#L690","resources":[],"examples":[],"params":[{"name":"cropHints","description":"<p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'CropHint'\n        })\">CropHint</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'CropHint'\n        })\">CropHint</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"CropHintsParams","name":"CropHintsParams","type":"instance","description":"<p>Parameters for crop hints annotation request.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_image_annotator.js#L708","resources":[],"examples":[],"params":[{"name":"aspectRatios","description":"<p> Aspect ratios in floats, representing the ratio of the width to the height  of the image. For example, if the desired aspect ratio is 4/3, the  corresponding float value should be 1.33333. If not specified, the  best possible crop is returned. The number of provided aspect ratios is  limited to a maximum of 16; any aspect ratios provided after the 16th are  ignored.</p>","types":["number[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ImageContext","name":"ImageContext","type":"instance","description":"<p>Image context and/or feature-specific parameters.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_image_annotator.js#L738","resources":[],"examples":[],"params":[{"name":"latLongRect","description":"<p> lat/long rectangle that specifies the location of the image.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'LatLongRect'\n        })\">LatLongRect</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'LatLongRect'\n        })\">LatLongRect</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"languageHints","description":"<p> List of languages to use for TEXT_DETECTION. In most cases, an empty value  yields the best results since it enables automatic language detection. For  languages based on the Latin alphabet, setting <code>language_hints</code> is not  needed. In rare cases, when the language of the text in the image is known,  setting a hint will help get better results (although it will be a  significant hindrance if the hint is wrong). Text detection returns an  error if one or more of the specified languages is not one of the  <a href=\"https://cloud.google.com/vision/docs/languages\">supported languages</a>.</p>","types":["string[]"],"optional":false,"nullable":false},{"name":"cropHintsParams","description":"<p> Parameters for crop hints annotation request.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'CropHintsParams'\n        })\">CropHintsParams</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'CropHintsParams'\n        })\">CropHintsParams</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"AnnotateImageRequest","name":"AnnotateImageRequest","type":"instance","description":"","source":"packages\\vision\\src\\v1\\doc\\doc_image_annotator.js#L764","resources":[],"examples":[],"params":[{"name":"image","description":"<p> The image to be processed.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Image'\n        })\">Image</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Image'\n        })\">Image</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"features","description":"<p> Requested features.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Feature'\n        })\">Feature</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Feature'\n        })\">Feature</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"imageContext","description":"<p> Additional context that may accompany the image.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ImageContext'\n        })\">ImageContext</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'ImageContext'\n        })\">ImageContext</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"AnnotateImageResponse","name":"AnnotateImageResponse","type":"instance","description":"","source":"packages\\vision\\src\\v1\\doc\\doc_image_annotator.js#L835","resources":[],"examples":[],"params":[{"name":"faceAnnotations","description":"<p> If present, face detection has completed successfully.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'FaceAnnotation'\n        })\">FaceAnnotation</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'FaceAnnotation'\n        })\">FaceAnnotation</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"landmarkAnnotations","description":"<p> If present, landmark detection has completed successfully.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'EntityAnnotation'\n        })\">EntityAnnotation</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'EntityAnnotation'\n        })\">EntityAnnotation</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"logoAnnotations","description":"<p> If present, logo detection has completed successfully.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'EntityAnnotation'\n        })\">EntityAnnotation</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'EntityAnnotation'\n        })\">EntityAnnotation</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"labelAnnotations","description":"<p> If present, label detection has completed successfully.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'EntityAnnotation'\n        })\">EntityAnnotation</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'EntityAnnotation'\n        })\">EntityAnnotation</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"textAnnotations","description":"<p> If present, text (OCR) detection or document (OCR) text detection has  completed successfully.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'EntityAnnotation'\n        })\">EntityAnnotation</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'EntityAnnotation'\n        })\">EntityAnnotation</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"fullTextAnnotation","description":"<p> If present, text (OCR) detection or document (OCR) text detection has  completed successfully.  This annotation provides the structural hierarchy for the OCR detected  text.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'TextAnnotation'\n        })\">TextAnnotation</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'TextAnnotation'\n        })\">TextAnnotation</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"safeSearchAnnotation","description":"<p> If present, safe-search annotation has completed successfully.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'SafeSearchAnnotation'\n        })\">SafeSearchAnnotation</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'SafeSearchAnnotation'\n        })\">SafeSearchAnnotation</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"imagePropertiesAnnotation","description":"<p> If present, image properties were extracted successfully.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ImageProperties'\n        })\">ImageProperties</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'ImageProperties'\n        })\">ImageProperties</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"cropHintsAnnotation","description":"<p> If present, crop hints have completed successfully.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'CropHintsAnnotation'\n        })\">CropHintsAnnotation</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'CropHintsAnnotation'\n        })\">CropHintsAnnotation</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"webDetection","description":"<p> If present, web detection has completed successfully.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'WebDetection'\n        })\">WebDetection</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'WebDetection'\n        })\">WebDetection</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"error","description":"<p> If set, represents the error message for the operation.  Note that filled-in image annotations are guaranteed to be  correct, even when <code>error</code> is set.</p><p> This object should have the same structure as google.rpc.Status</p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"BatchAnnotateImagesRequest","name":"BatchAnnotateImagesRequest","type":"instance","description":"","source":"packages\\vision\\src\\v1\\doc\\doc_image_annotator.js#L850","resources":[],"examples":[],"params":[{"name":"requests","description":"<p> Individual image annotation requests for this batch.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'AnnotateImageRequest'\n        })\">AnnotateImageRequest</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'AnnotateImageRequest'\n        })\">AnnotateImageRequest</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"BatchAnnotateImagesResponse","name":"BatchAnnotateImagesResponse","type":"instance","description":"","source":"packages\\vision\\src\\v1\\doc\\doc_image_annotator.js#L865","resources":[],"examples":[],"params":[{"name":"responses","description":"<p> Individual responses to image annotation requests within the batch.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'AnnotateImageResponse'\n        })\">AnnotateImageResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'AnnotateImageResponse'\n        })\">AnnotateImageResponse</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Likelihood","name":"Likelihood","type":"instance","description":"<p>A bucketized representation of likelihood, which is intended to give clients highly stable results across model upgrades.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_image_annotator.js#L875","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"TextAnnotation","name":"TextAnnotation","type":"instance","description":"<p>TextAnnotation contains a structured representation of OCR extracted text. The hierarchy of an OCR extracted text structure is like this:  TextAnnotation -&gt; Page -&gt; Block -&gt; Paragraph -&gt; Word -&gt; Symbol Each structural component, starting from Page, may further have their own properties. Properties describe detected languages, breaks etc.. Please refer to the {@link google.cloud.vision.v1.TextAnnotation.TextProperty} message definition below for more detail.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_text_annotation.js#L42","resources":[],"examples":[],"params":[{"name":"pages","description":"<p> List of pages detected by OCR.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Page'\n        })\">Page</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Page'\n        })\">Page</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"text","description":"<p> UTF-8 text detected on the pages.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"DetectedLanguage","name":"DetectedLanguage","type":"instance","description":"<p>Detected language for a structural component.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_text_annotation.js#L59","resources":[],"examples":[],"params":[{"name":"languageCode","description":"<p> The BCP-47 language code, such as &quot;en-US&quot; or &quot;sr-Latn&quot;. For more  information, see  <a href=\"http://www.unicode.org/reports/tr35/#Unicode_locale_identifier\">http://www.unicode.org/reports/tr35/#Unicode_locale_identifier</a>.</p>","types":["string"],"optional":false,"nullable":false},{"name":"confidence","description":"<p> Confidence of detected language. Range [0, 1].</p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"DetectedBreak","name":"DetectedBreak","type":"instance","description":"<p>Detected start or end of a structural component.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_text_annotation.js#L75","resources":[],"examples":[],"params":[{"name":"type","description":"<p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BreakType'\n        })\">BreakType</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BreakType'\n        })\">BreakType</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"isPrefix","description":"<p> True if break prepends the element.</p>","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"BreakType","name":"BreakType","type":"instance","description":"<p>Enum to denote the type of break found. New line, space etc.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_text_annotation.js#L83","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"TextProperty","name":"TextProperty","type":"instance","description":"<p>Additional information detected on the structural component.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_text_annotation.js#L135","resources":[],"examples":[],"params":[{"name":"detectedLanguages","description":"<p> A list of detected languages together with confidence.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'DetectedLanguage'\n        })\">DetectedLanguage</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'DetectedLanguage'\n        })\">DetectedLanguage</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"detectedBreak","description":"<p> Detected start or end of a text segment.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'DetectedBreak'\n        })\">DetectedBreak</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'DetectedBreak'\n        })\">DetectedBreak</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Page","name":"Page","type":"instance","description":"<p>Detected page from OCR.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_text_annotation.js#L162","resources":[],"examples":[],"params":[{"name":"property","description":"<p> Additional information detected on the page.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'TextProperty'\n        })\">TextProperty</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'TextProperty'\n        })\">TextProperty</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"width","description":"<p> Page width in pixels.</p>","types":["number"],"optional":false,"nullable":false},{"name":"height","description":"<p> Page height in pixels.</p>","types":["number"],"optional":false,"nullable":false},{"name":"blocks","description":"<p> List of blocks of text, images etc on this page.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Block'\n        })\">Block</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Block'\n        })\">Block</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Block","name":"Block","type":"instance","description":"<p>Logical element on the page.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_text_annotation.js#L206","resources":[],"examples":[],"params":[{"name":"property","description":"<p> Additional information detected for the block.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'TextProperty'\n        })\">TextProperty</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'TextProperty'\n        })\">TextProperty</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"boundingBox","description":"<p> The bounding box for the block.  The vertices are in the order of top-left, top-right, bottom-right,  bottom-left. When a rotation of the bounding box is detected the rotation  is represented as around the top-left corner as defined when the text is  read in the &#39;natural&#39; orientation.  For example:</p><pre><code>* when the text is horizontal it might look like: 0----1 | | 3----2 * when it&#39;s rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertice order will still be (0, 1, 2, 3). </code></pre><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BoundingPoly'\n        })\">BoundingPoly</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BoundingPoly'\n        })\">BoundingPoly</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"paragraphs","description":"<p> List of paragraphs in this block (if this blocks is of type text).</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Paragraph'\n        })\">Paragraph</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Paragraph'\n        })\">Paragraph</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"blockType","description":"<p> Detected block type (text, image etc) for this block.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BlockType'\n        })\">BlockType</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BlockType'\n        })\">BlockType</a></p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"BlockType","name":"BlockType","type":"instance","description":"<p>Type of a block (text, image etc) as identified by OCR.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_text_annotation.js#L214","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"Paragraph","name":"Paragraph","type":"instance","description":"<p>Structural unit of text representing a number of words in certain order.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_text_annotation.js#L283","resources":[],"examples":[],"params":[{"name":"property","description":"<p> Additional information detected for the paragraph.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'TextProperty'\n        })\">TextProperty</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'TextProperty'\n        })\">TextProperty</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"boundingBox","description":"<p> The bounding box for the paragraph.  The vertices are in the order of top-left, top-right, bottom-right,  bottom-left. When a rotation of the bounding box is detected the rotation  is represented as around the top-left corner as defined when the text is  read in the &#39;natural&#39; orientation.  For example:</p><pre><code>* when the text is horizontal it might look like: 0----1 | | 3----2 * when it&#39;s rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertice order will still be (0, 1, 2, 3). </code></pre><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BoundingPoly'\n        })\">BoundingPoly</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BoundingPoly'\n        })\">BoundingPoly</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"words","description":"<p> List of words in this paragraph.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Word'\n        })\">Word</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Word'\n        })\">Word</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Word","name":"Word","type":"instance","description":"<p>A word representation.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_text_annotation.js#L323","resources":[],"examples":[],"params":[{"name":"property","description":"<p> Additional information detected for the word.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'TextProperty'\n        })\">TextProperty</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'TextProperty'\n        })\">TextProperty</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"boundingBox","description":"<p> The bounding box for the word.  The vertices are in the order of top-left, top-right, bottom-right,  bottom-left. When a rotation of the bounding box is detected the rotation  is represented as around the top-left corner as defined when the text is  read in the &#39;natural&#39; orientation.  For example:</p><pre><code>* when the text is horizontal it might look like: 0----1 | | 3----2 * when it&#39;s rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertice order will still be (0, 1, 2, 3). </code></pre><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BoundingPoly'\n        })\">BoundingPoly</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BoundingPoly'\n        })\">BoundingPoly</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"symbols","description":"<p> List of symbols in the word.  The order of the symbols follows the natural reading order.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Symbol'\n        })\">Symbol</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Symbol'\n        })\">Symbol</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Symbol","name":"Symbol","type":"instance","description":"<p>A single symbol representation.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_text_annotation.js#L360","resources":[],"examples":[],"params":[{"name":"property","description":"<p> Additional information detected for the symbol.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'TextProperty'\n        })\">TextProperty</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'TextProperty'\n        })\">TextProperty</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"boundingBox","description":"<p> The bounding box for the symbol.  The vertices are in the order of top-left, top-right, bottom-right,  bottom-left. When a rotation of the bounding box is detected the rotation  is represented as around the top-left corner as defined when the text is  read in the &#39;natural&#39; orientation.  For example:</p><pre><code>* when the text is horizontal it might look like: 0----1 | | 3----2 * when it&#39;s rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertice order will still be (0, 1, 2, 3). </code></pre><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BoundingPoly'\n        })\">BoundingPoly</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BoundingPoly'\n        })\">BoundingPoly</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"text","description":"<p> The actual UTF-8 representation of the symbol.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"WebDetection","name":"WebDetection","type":"instance","description":"<p>Relevant information for the image from the Internet.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_web_detection.js#L52","resources":[],"examples":[],"params":[{"name":"webEntities","description":"<p> Deduced entities from similar images on the Internet.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'WebEntity'\n        })\">WebEntity</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'WebEntity'\n        })\">WebEntity</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"fullMatchingImages","description":"<p> Fully matching images from the Internet.  They&#39;re definite neardups and most often a copy of the query image with  merely a size change.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'WebImage'\n        })\">WebImage</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'WebImage'\n        })\">WebImage</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"partialMatchingImages","description":"<p> Partial matching images from the Internet.  Those images are similar enough to share some key-point features. For  example an original image will likely have partial matching for its crops.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'WebImage'\n        })\">WebImage</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'WebImage'\n        })\">WebImage</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"pagesWithMatchingImages","description":"<p> Web pages containing the matching images from the Internet.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'WebPage'\n        })\">WebPage</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'WebPage'\n        })\">WebPage</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"WebEntity","name":"WebEntity","type":"instance","description":"<p>Entity deduced from similar images on the Internet.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_web_detection.js#L71","resources":[],"examples":[],"params":[{"name":"entityId","description":"<p> Opaque entity ID.</p>","types":["string"],"optional":false,"nullable":false},{"name":"score","description":"<p> Overall relevancy score for the entity.  Not normalized and not comparable across different image queries.</p>","types":["number"],"optional":false,"nullable":false},{"name":"description","description":"<p> Canonical description of the entity, in English.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"WebImage","name":"WebImage","type":"instance","description":"<p>Metadata for online images.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_web_detection.js#L88","resources":[],"examples":[],"params":[{"name":"url","description":"<p> The result image URL.</p>","types":["string"],"optional":false,"nullable":false},{"name":"score","description":"<p> Overall relevancy score for the image.  Not normalized and not comparable across different image queries.</p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"WebPage","name":"WebPage","type":"instance","description":"<p>Metadata for web pages.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_web_detection.js#L105","resources":[],"examples":[],"params":[{"name":"url","description":"<p> The result web page URL.</p>","types":["string"],"optional":false,"nullable":false},{"name":"score","description":"<p> Overall relevancy score for the web page.  Not normalized and not comparable across different image queries.</p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]}],"path":"v1/data_types.json","description":"\n          <table class=\"table\">\n            <thead>\n              <tr>\n                <th>Class</th>\n                <th>Description</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr ng-repeat=\"method in service.methods\" ng-if=\"method.name\">\n                <td>\n                  <a ui-sref=\"docs.service({ method: method.id })\" class=\"skip-external-link\">\n                    {{method.name}}\n                  </a>\n                </td>\n                <td>\n                  <span ng-bind-html=\"method.description\">\n                    {{method.description}}\n                  </span>\n                  <span ng-if=\"!method.description && method.name.includes('Request')\">\n                    The request for {{method.name}}.\n                  </span>\n                  <span ng-if=\"!method.description && method.name.includes('Response')\">\n                    The response for {{method.name}}.\n                  </span>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        ","id":"vision/v1/data_types"}