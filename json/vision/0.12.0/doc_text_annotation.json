{"id":"vision/v1/doc/doc_text_annotation","type":"class","overview":"<p>\n  This class allows you interact with Cloud Vision.\n</p>\n\n\n\n<p>\n  First, install <code>@google-cloud/vision</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save @google-cloud/vision</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>@google-cloud/vision</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Google Cloud Platform</h4>\n<div hljs language=\"javascript\">\nvar vision = require('@google-cloud/vision')();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar vision = require('@google-cloud/vision')({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>@google-cloud/vision</code> are outlined in our <a href=\"#/docs/vision/v0.12.0/guides/authentication\">Authentication guide</a>.\n</p>\n","source":"packages\\vision\\src\\v1\\doc\\doc_text_annotation.js","parent":"vision","children":[],"methods":[{"id":"TextAnnotation","name":"TextAnnotation","type":"instance","description":"<p>TextAnnotation contains a structured representation of OCR extracted text. The hierarchy of an OCR extracted text structure is like this:  TextAnnotation -&gt; Page -&gt; Block -&gt; Paragraph -&gt; Word -&gt; Symbol Each structural component, starting from Page, may further have their own properties. Properties describe detected languages, breaks etc.. Please refer to the {@link google.cloud.vision.v1.TextAnnotation.TextProperty} message definition below for more detail.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_text_annotation.js#L42","resources":[],"examples":[],"params":[{"name":"pages","description":"<p> List of pages detected by OCR.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Page'\n        })\">Page</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Page'\n        })\">Page</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"text","description":"<p> UTF-8 text detected on the pages.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"DetectedLanguage","name":"DetectedLanguage","type":"instance","description":"<p>Detected language for a structural component.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_text_annotation.js#L59","resources":[],"examples":[],"params":[{"name":"languageCode","description":"<p> The BCP-47 language code, such as &quot;en-US&quot; or &quot;sr-Latn&quot;. For more  information, see  <a href=\"http://www.unicode.org/reports/tr35/#Unicode_locale_identifier\">http://www.unicode.org/reports/tr35/#Unicode_locale_identifier</a>.</p>","types":["string"],"optional":false,"nullable":false},{"name":"confidence","description":"<p> Confidence of detected language. Range [0, 1].</p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"DetectedBreak","name":"DetectedBreak","type":"instance","description":"<p>Detected start or end of a structural component.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_text_annotation.js#L75","resources":[],"examples":[],"params":[{"name":"type","description":"<p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BreakType'\n        })\">BreakType</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BreakType'\n        })\">BreakType</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"isPrefix","description":"<p> True if break prepends the element.</p>","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"BreakType","name":"BreakType","type":"instance","description":"<p>Enum to denote the type of break found. New line, space etc.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_text_annotation.js#L83","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"TextProperty","name":"TextProperty","type":"instance","description":"<p>Additional information detected on the structural component.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_text_annotation.js#L135","resources":[],"examples":[],"params":[{"name":"detectedLanguages","description":"<p> A list of detected languages together with confidence.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'DetectedLanguage'\n        })\">DetectedLanguage</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'DetectedLanguage'\n        })\">DetectedLanguage</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"detectedBreak","description":"<p> Detected start or end of a text segment.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'DetectedBreak'\n        })\">DetectedBreak</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'DetectedBreak'\n        })\">DetectedBreak</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Page","name":"Page","type":"instance","description":"<p>Detected page from OCR.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_text_annotation.js#L162","resources":[],"examples":[],"params":[{"name":"property","description":"<p> Additional information detected on the page.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'TextProperty'\n        })\">TextProperty</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'TextProperty'\n        })\">TextProperty</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"width","description":"<p> Page width in pixels.</p>","types":["number"],"optional":false,"nullable":false},{"name":"height","description":"<p> Page height in pixels.</p>","types":["number"],"optional":false,"nullable":false},{"name":"blocks","description":"<p> List of blocks of text, images etc on this page.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Block'\n        })\">Block</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Block'\n        })\">Block</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Block","name":"Block","type":"instance","description":"<p>Logical element on the page.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_text_annotation.js#L206","resources":[],"examples":[],"params":[{"name":"property","description":"<p> Additional information detected for the block.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'TextProperty'\n        })\">TextProperty</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'TextProperty'\n        })\">TextProperty</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"boundingBox","description":"<p> The bounding box for the block.  The vertices are in the order of top-left, top-right, bottom-right,  bottom-left. When a rotation of the bounding box is detected the rotation  is represented as around the top-left corner as defined when the text is  read in the &#39;natural&#39; orientation.  For example:</p><pre><code>* when the text is horizontal it might look like: 0----1 | | 3----2 * when it&#39;s rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertice order will still be (0, 1, 2, 3). </code></pre><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BoundingPoly'\n        })\">BoundingPoly</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BoundingPoly'\n        })\">BoundingPoly</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"paragraphs","description":"<p> List of paragraphs in this block (if this blocks is of type text).</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Paragraph'\n        })\">Paragraph</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Paragraph'\n        })\">Paragraph</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"blockType","description":"<p> Detected block type (text, image etc) for this block.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BlockType'\n        })\">BlockType</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BlockType'\n        })\">BlockType</a></p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"BlockType","name":"BlockType","type":"instance","description":"<p>Type of a block (text, image etc) as identified by OCR.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_text_annotation.js#L214","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"Paragraph","name":"Paragraph","type":"instance","description":"<p>Structural unit of text representing a number of words in certain order.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_text_annotation.js#L283","resources":[],"examples":[],"params":[{"name":"property","description":"<p> Additional information detected for the paragraph.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'TextProperty'\n        })\">TextProperty</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'TextProperty'\n        })\">TextProperty</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"boundingBox","description":"<p> The bounding box for the paragraph.  The vertices are in the order of top-left, top-right, bottom-right,  bottom-left. When a rotation of the bounding box is detected the rotation  is represented as around the top-left corner as defined when the text is  read in the &#39;natural&#39; orientation.  For example:</p><pre><code>* when the text is horizontal it might look like: 0----1 | | 3----2 * when it&#39;s rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertice order will still be (0, 1, 2, 3). </code></pre><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BoundingPoly'\n        })\">BoundingPoly</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BoundingPoly'\n        })\">BoundingPoly</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"words","description":"<p> List of words in this paragraph.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Word'\n        })\">Word</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Word'\n        })\">Word</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Word","name":"Word","type":"instance","description":"<p>A word representation.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_text_annotation.js#L323","resources":[],"examples":[],"params":[{"name":"property","description":"<p> Additional information detected for the word.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'TextProperty'\n        })\">TextProperty</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'TextProperty'\n        })\">TextProperty</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"boundingBox","description":"<p> The bounding box for the word.  The vertices are in the order of top-left, top-right, bottom-right,  bottom-left. When a rotation of the bounding box is detected the rotation  is represented as around the top-left corner as defined when the text is  read in the &#39;natural&#39; orientation.  For example:</p><pre><code>* when the text is horizontal it might look like: 0----1 | | 3----2 * when it&#39;s rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertice order will still be (0, 1, 2, 3). </code></pre><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BoundingPoly'\n        })\">BoundingPoly</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BoundingPoly'\n        })\">BoundingPoly</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"symbols","description":"<p> List of symbols in the word.  The order of the symbols follows the natural reading order.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Symbol'\n        })\">Symbol</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Symbol'\n        })\">Symbol</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Symbol","name":"Symbol","type":"instance","description":"<p>A single symbol representation.</p>","source":"packages\\vision\\src\\v1\\doc\\doc_text_annotation.js#L360","resources":[],"examples":[],"params":[{"name":"property","description":"<p> Additional information detected for the symbol.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'TextProperty'\n        })\">TextProperty</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'TextProperty'\n        })\">TextProperty</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"boundingBox","description":"<p> The bounding box for the symbol.  The vertices are in the order of top-left, top-right, bottom-right,  bottom-left. When a rotation of the bounding box is detected the rotation  is represented as around the top-left corner as defined when the text is  read in the &#39;natural&#39; orientation.  For example:</p><pre><code>* when the text is horizontal it might look like: 0----1 | | 3----2 * when it&#39;s rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertice order will still be (0, 1, 2, 3). </code></pre><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BoundingPoly'\n        })\">BoundingPoly</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BoundingPoly'\n        })\">BoundingPoly</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"text","description":"<p> The actual UTF-8 representation of the symbol.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]}],"path":"doc_text_annotation.json"}