{"id":"vision","type":"class","name":"visionV1","overview":"<p>\n  This class allows you interact with Cloud Vision.\n</p>\n\n\n\n<p>\n  First, install <code>@google-cloud/vision</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save @google-cloud/vision</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>@google-cloud/vision</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Google Cloud Platform</h4>\n<div hljs language=\"javascript\">\nvar vision = require('@google-cloud/vision')();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar vision = require('@google-cloud/vision')({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>@google-cloud/vision</code> are outlined in our <a href=\"#/docs/vision/v0.12.0/guides/authentication\">Authentication guide</a>.\n</p>\n","description":"","source":"packages\\vision\\src\\index.js","parent":null,"children":["vision/helpers","vision/v1"],"methods":[{"id":"visionV1","name":"visionV1","type":"constructor","description":"<p>Create an imageAnnotatorClient with additional helpers for common tasks.</p>","source":"packages\\vision\\src\\index.js#L56","resources":[],"examples":[],"params":[{"name":"opts","description":"<ul> <li>The optional parameters.</li> </ul> ","types":["Object"],"optional":true,"nullable":false},{"name":"opts.servicePath","description":"<p> The domain name of the API remote host.</p>","types":["String"],"optional":true,"nullable":false},{"name":"opts.port","description":"<p> The port on which to connect to the remote host.</p>","types":["number"],"optional":true,"nullable":false},{"name":"opts.sslCreds","description":"<p> A ClientCredentials for use with an SSL-enabled channel.</p>","types":["grpc.ClientCredentials"],"optional":true,"nullable":false},{"name":"opts.clientConfig","description":"<p> The customized config to build the call settings. See  {@link gax.constructSettings} for the format.</p>","types":["Object"],"optional":true,"nullable":false}],"exceptions":[],"returns":[]},{"id":"annotateImage","name":"annotateImage","type":"instance","description":"<p>Annotate a single image with the requested features.</p>","source":"packages\\vision\\src\\helpers.js#L140","resources":[],"examples":[{"code":"var request = {\n  image: {source: {imageUri: 'gs://path/to/image.jpg'}},\n  features: [],\n};\nvision.annotateImage(request).then(response => {\n  // doThingsWith(response);\n}).catch(err => {\n  console.error(err);\n});"}],"params":[{"name":"request","description":"<p> A representation of the request being sent to the Vision API.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"request.image","description":"<p> A dictionary-like object representing the image. This should have a  single key (<code>source</code>, <code>content</code>).</p><p> If the key is <code>source</code>, the value should be another object containing  <code>imageUri</code> or <code>filename</code> as a key and a string as a value.</p><p> If the key is <code>content</code>, the value should be a Buffer.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"request.features","description":"<p> An array of the specific annotation features being requested.</p>","types":["Array"],"optional":false,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this  call, e.g, timeout, retries, paginations, etc. See  <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a>  for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is an object representing  <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is an object representing <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"faceDetection","name":"faceDetection","type":"instance","description":"<p>Annotate a single image with face detection.</p>","source":"packages\\vision\\src\\helpers.js#L224","resources":[],"examples":[{"code":"var image = {\n  source: {imageUri: 'gs://path/to/image.jpg'}\n};\nvision.faceDetection(image).then(response => {\n  // doThingsWith(response);\n}).catch(err => {\n  console.error(err);\n});"}],"params":[{"name":"image","description":"<p> A dictionary-like object representing the image. This should have a  single key (<code>source</code>, <code>content</code>).</p><p> If the key is <code>source</code>, the value should be another object containing  <code>imageUri</code> or <code>filename</code> as a key and a string as a value.</p><p> If the key is <code>content</code>, the value should be a Buffer.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this  call, e.g, timeout, retries, paginations, etc. See  <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a>  for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is an object representing  <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is an object representing <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"landmarkDetection","name":"landmarkDetection","type":"instance","description":"<p>Annotate a single image with landmark detection.</p>","source":"packages\\vision\\src\\helpers.js#L264","resources":[],"examples":[{"code":"var image = {\n  source: {imageUri: 'gs://path/to/image.jpg'}\n};\nvision.landmarkDetection(image).then(response => {\n  // doThingsWith(response);\n}).catch(err => {\n  console.error(err);\n});"}],"params":[{"name":"image","description":"<p> A dictionary-like object representing the image. This should have a  single key (<code>source</code>, <code>content</code>).</p><p> If the key is <code>source</code>, the value should be another object containing  <code>imageUri</code> or <code>filename</code> as a key and a string as a value.</p><p> If the key is <code>content</code>, the value should be a Buffer.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this  call, e.g, timeout, retries, paginations, etc. See  <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a>  for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is an object representing  <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is an object representing <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"logoDetection","name":"logoDetection","type":"instance","description":"<p>Annotate a single image with logo detection.</p>","source":"packages\\vision\\src\\helpers.js#L304","resources":[],"examples":[{"code":"var image = {\n  source: {imageUri: 'gs://path/to/image.jpg'}\n};\nvision.logoDetection(image).then(response => {\n  // doThingsWith(response);\n}).catch(err => {\n  console.error(err);\n});"}],"params":[{"name":"image","description":"<p> A dictionary-like object representing the image. This should have a  single key (<code>source</code>, <code>content</code>).</p><p> If the key is <code>source</code>, the value should be another object containing  <code>imageUri</code> or <code>filename</code> as a key and a string as a value.</p><p> If the key is <code>content</code>, the value should be a Buffer.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this  call, e.g, timeout, retries, paginations, etc. See  <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a>  for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is an object representing  <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is an object representing <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"labelDetection","name":"labelDetection","type":"instance","description":"<p>Annotate a single image with label detection.</p>","source":"packages\\vision\\src\\helpers.js#L344","resources":[],"examples":[{"code":"var image = {\n  source: {imageUri: 'gs://path/to/image.jpg'}\n};\nvision.labelDetection(image).then(response => {\n  // doThingsWith(response);\n}).catch(err => {\n  console.error(err);\n});"}],"params":[{"name":"image","description":"<p> A dictionary-like object representing the image. This should have a  single key (<code>source</code>, <code>content</code>).</p><p> If the key is <code>source</code>, the value should be another object containing  <code>imageUri</code> or <code>filename</code> as a key and a string as a value.</p><p> If the key is <code>content</code>, the value should be a Buffer.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this  call, e.g, timeout, retries, paginations, etc. See  <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a>  for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is an object representing  <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is an object representing <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"textDetection","name":"textDetection","type":"instance","description":"<p>Annotate a single image with text detection.</p>","source":"packages\\vision\\src\\helpers.js#L384","resources":[],"examples":[{"code":"var image = {\n  source: {imageUri: 'gs://path/to/image.jpg'}\n};\nvision.textDetection(image).then(response => {\n  // doThingsWith(response);\n}).catch(err => {\n  console.error(err);\n});"}],"params":[{"name":"image","description":"<p> A dictionary-like object representing the image. This should have a  single key (<code>source</code>, <code>content</code>).</p><p> If the key is <code>source</code>, the value should be another object containing  <code>imageUri</code> or <code>filename</code> as a key and a string as a value.</p><p> If the key is <code>content</code>, the value should be a Buffer.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this  call, e.g, timeout, retries, paginations, etc. See  <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a>  for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is an object representing  <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is an object representing <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"documentTextDetection","name":"documentTextDetection","type":"instance","description":"<p>Annotate a single image with document text detection.</p>","source":"packages\\vision\\src\\helpers.js#L424","resources":[],"examples":[{"code":"var image = {\n  source: {imageUri: 'gs://path/to/image.jpg'}\n};\nvision.documentTextDetection(image).then(response => {\n  // doThingsWith(response);\n}).catch(err => {\n  console.error(err);\n});"}],"params":[{"name":"image","description":"<p> A dictionary-like object representing the image. This should have a  single key (<code>source</code>, <code>content</code>).</p><p> If the key is <code>source</code>, the value should be another object containing  <code>imageUri</code> or <code>filename</code> as a key and a string as a value.</p><p> If the key is <code>content</code>, the value should be a Buffer.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this  call, e.g, timeout, retries, paginations, etc. See  <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a>  for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is an object representing  <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is an object representing <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"safeSearchDetection","name":"safeSearchDetection","type":"instance","description":"<p>Annotate a single image with safe search detection.</p>","source":"packages\\vision\\src\\helpers.js#L464","resources":[],"examples":[{"code":"var image = {\n  source: {imageUri: 'gs://path/to/image.jpg'}\n};\nvision.safeSearchDetection(image).then(response => {\n  // doThingsWith(response);\n}).catch(err => {\n  console.error(err);\n});"}],"params":[{"name":"image","description":"<p> A dictionary-like object representing the image. This should have a  single key (<code>source</code>, <code>content</code>).</p><p> If the key is <code>source</code>, the value should be another object containing  <code>imageUri</code> or <code>filename</code> as a key and a string as a value.</p><p> If the key is <code>content</code>, the value should be a Buffer.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this  call, e.g, timeout, retries, paginations, etc. See  <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a>  for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is an object representing  <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is an object representing <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"imageProperties","name":"imageProperties","type":"instance","description":"<p>Annotate a single image with image properties.</p>","source":"packages\\vision\\src\\helpers.js#L504","resources":[],"examples":[{"code":"var image = {\n  source: {imageUri: 'gs://path/to/image.jpg'}\n};\nvision.imageProperties(image).then(response => {\n  // doThingsWith(response);\n}).catch(err => {\n  console.error(err);\n});"}],"params":[{"name":"image","description":"<p> A dictionary-like object representing the image. This should have a  single key (<code>source</code>, <code>content</code>).</p><p> If the key is <code>source</code>, the value should be another object containing  <code>imageUri</code> or <code>filename</code> as a key and a string as a value.</p><p> If the key is <code>content</code>, the value should be a Buffer.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this  call, e.g, timeout, retries, paginations, etc. See  <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a>  for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is an object representing  <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is an object representing <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"cropHints","name":"cropHints","type":"instance","description":"<p>Annotate a single image with crop hints.</p>","source":"packages\\vision\\src\\helpers.js#L544","resources":[],"examples":[{"code":"var image = {\n  source: {imageUri: 'gs://path/to/image.jpg'}\n};\nvision.cropHints(image).then(response => {\n  // doThingsWith(response);\n}).catch(err => {\n  console.error(err);\n});"}],"params":[{"name":"image","description":"<p> A dictionary-like object representing the image. This should have a  single key (<code>source</code>, <code>content</code>).</p><p> If the key is <code>source</code>, the value should be another object containing  <code>imageUri</code> or <code>filename</code> as a key and a string as a value.</p><p> If the key is <code>content</code>, the value should be a Buffer.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this  call, e.g, timeout, retries, paginations, etc. See  <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a>  for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is an object representing  <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is an object representing <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"webDetection","name":"webDetection","type":"instance","description":"<p>Annotate a single image with web detection.</p>","source":"packages\\vision\\src\\helpers.js#L584","resources":[],"examples":[{"code":"var image = {\n  source: {imageUri: 'gs://path/to/image.jpg'}\n};\nvision.webDetection(image).then(response => {\n  // doThingsWith(response);\n}).catch(err => {\n  console.error(err);\n});"}],"params":[{"name":"image","description":"<p> A dictionary-like object representing the image. This should have a  single key (<code>source</code>, <code>content</code>).</p><p> If the key is <code>source</code>, the value should be another object containing  <code>imageUri</code> or <code>filename</code> as a key and a string as a value.</p><p> If the key is <code>content</code>, the value should be a Buffer.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this  call, e.g, timeout, retries, paginations, etc. See  <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a>  for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is an object representing  <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is an object representing <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'BatchAnnotateImagesResponse'\n        })\">BatchAnnotateImagesResponse</a>. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]}],"path":"index.json"}