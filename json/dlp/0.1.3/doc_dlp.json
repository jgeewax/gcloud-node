{"id":"dlp/v2beta1/doc/doc_dlp","type":"class","overview":"<p>\n  This class allows you interact with DLP API.\n</p>\n\n\n\n<p>\n  First, install <code>@google-cloud/dlp</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save @google-cloud/dlp</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>@google-cloud/dlp</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Google Cloud Platform</h4>\n<div hljs language=\"javascript\">\nvar dlp = require('@google-cloud/dlp')();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar dlp = require('@google-cloud/dlp')({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>@google-cloud/dlp</code> are outlined in our <a href=\"#/docs/dlp/v0.1.3/guides/authentication\">Authentication guide</a>.\n</p>\n","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js","parent":"dlp","children":[],"methods":[{"id":"InspectConfig","name":"InspectConfig","type":"instance","description":"<p>Configuration description of the scanning process. When used with redactContent only info_types and min_likelihood are currently used.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L52","resources":[],"examples":[],"params":[{"name":"infoTypes","description":"<p> Restricts what info_types to look for. The values must correspond to  InfoType values returned by ListInfoTypes or found in documentation.  Empty info_types runs all enabled detectors.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'InfoType'\n        })\">InfoType</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'InfoType'\n        })\">InfoType</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"minLikelihood","description":"<p> Only returns findings equal or above this threshold.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Likelihood'\n        })\">Likelihood</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Likelihood'\n        })\">Likelihood</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"maxFindings","description":"<p> Limits the number of findings per content item.</p>","types":["number"],"optional":false,"nullable":false},{"name":"includeQuote","description":"<p> When true, a contextual quote from the data that triggered a finding is  included in the response; see Finding.quote.</p>","types":["boolean"],"optional":false,"nullable":false},{"name":"excludeTypes","description":"<p> When true, excludes type information of the findings.</p>","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ContentItem","name":"ContentItem","type":"instance","description":"<p>Container structure for the content to inspect.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L73","resources":[],"examples":[],"params":[{"name":"type","description":"<p> Type of the content, as defined in Content-Type HTTP header.  Supported types are: all &quot;text&quot; types, octet streams, PNG images,  JPEG images.</p>","types":["string"],"optional":false,"nullable":false},{"name":"data","description":"<p> Content data to inspect or redact.</p>","types":["string"],"optional":false,"nullable":false},{"name":"value","description":"<p> String data to inspect or redact.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"InspectResult","name":"InspectResult","type":"instance","description":"<p>All the findings for a single scanned item.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L96","resources":[],"examples":[],"params":[{"name":"findings","description":"<p> List of findings for an item.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Finding'\n        })\">Finding</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Finding'\n        })\">Finding</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"findingsTruncated","description":"<p> If true, then this item might have more findings than were returned,  and the findings returned are an arbitrary subset of all findings.  The findings list might be truncated because the input items were too  large, or because the server reached the maximum amount of resources  allowed for a single API call. For best results, divide the input into  smaller batches.</p>","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Finding","name":"Finding","type":"instance","description":"<p>Container structure describing a single finding within a string or image.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L129","resources":[],"examples":[],"params":[{"name":"quote","description":"<p> The specific string that may be potentially sensitive info.</p>","types":["string"],"optional":false,"nullable":false},{"name":"infoType","description":"<p> The specific type of info the string might be.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'InfoType'\n        })\">InfoType</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'InfoType'\n        })\">InfoType</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"likelihood","description":"<p> Estimate of how likely it is that the info_type is correct.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Likelihood'\n        })\">Likelihood</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Likelihood'\n        })\">Likelihood</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"location","description":"<p> Location of the info found.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Location'\n        })\">Location</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Location'\n        })\">Location</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"createTime","description":"<p> Timestamp when finding was detected.</p><p> This object should have the same structure as google.protobuf.Timestamp</p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Location","name":"Location","type":"instance","description":"<p>Specifies the location of a finding within its source item.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L165","resources":[],"examples":[],"params":[{"name":"byteRange","description":"<p> Zero-based byte offsets within a content item.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Range'\n        })\">Range</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Range'\n        })\">Range</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"codepointRange","description":"<p> Character offsets within a content item, included when content type  is a text. Default charset assumed to be UTF-8.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Range'\n        })\">Range</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Range'\n        })\">Range</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"imageBoxes","description":"<p> Location within an image&#39;s pixels.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ImageLocation'\n        })\">ImageLocation</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'ImageLocation'\n        })\">ImageLocation</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"recordKey","description":"<p> Key of the finding.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'RecordKey'\n        })\">RecordKey</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'RecordKey'\n        })\">RecordKey</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"fieldId","description":"<p> Field id of the field containing the finding.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'FieldId'\n        })\">FieldId</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'FieldId'\n        })\">FieldId</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Range","name":"Range","type":"instance","description":"<p>Generic half-open interval [start, end)</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L181","resources":[],"examples":[],"params":[{"name":"start","description":"<p> Index of the first character of the range (inclusive).</p>","types":["number"],"optional":false,"nullable":false},{"name":"end","description":"<p> Index of the last character of the range (exclusive).</p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ImageLocation","name":"ImageLocation","type":"instance","description":"<p>Bounding box encompassing detected text within an image.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L203","resources":[],"examples":[],"params":[{"name":"top","description":"<p> Top coordinate of the bounding box. (0,0) is upper left.</p>","types":["number"],"optional":false,"nullable":false},{"name":"left","description":"<p> Left coordinate of the bounding box. (0,0) is upper left.</p>","types":["number"],"optional":false,"nullable":false},{"name":"width","description":"<p> Width of the bounding box in pixels.</p>","types":["number"],"optional":false,"nullable":false},{"name":"height","description":"<p> Height of the bounding box in pixels.</p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"RedactContentRequest","name":"RedactContentRequest","type":"instance","description":"","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L235","resources":[],"examples":[],"params":[{"name":"inspectConfig","description":"<p> Configuration for the inspector.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'InspectConfig'\n        })\">InspectConfig</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'InspectConfig'\n        })\">InspectConfig</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"items","description":"<p> The list of items to inspect. Up to 100 are allowed per request.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ContentItem'\n        })\">ContentItem</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'ContentItem'\n        })\">ContentItem</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"replaceConfigs","description":"<p> The strings to replace findings text findings with. Must specify at least  one of these or one ImageRedactionConfig if redacting images.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ReplaceConfig'\n        })\">ReplaceConfig</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'ReplaceConfig'\n        })\">ReplaceConfig</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"imageRedactionConfigs","description":"<p> The configuration for specifying what content to redact from images.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ImageRedactionConfig'\n        })\">ImageRedactionConfig</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'ImageRedactionConfig'\n        })\">ImageRedactionConfig</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ReplaceConfig","name":"ReplaceConfig","type":"instance","description":"","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L253","resources":[],"examples":[],"params":[{"name":"infoType","description":"<p> Type of information to replace. Only one ReplaceConfig per info_type  should be provided. If ReplaceConfig does not have an info_type, the DLP  API matches it against all info_types that are found but not specified in  another ReplaceConfig.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'InfoType'\n        })\">InfoType</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'InfoType'\n        })\">InfoType</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"replaceWith","description":"<p> Content replacing sensitive information of given type. Max 256 chars.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ImageRedactionConfig","name":"ImageRedactionConfig","type":"instance","description":"<p>Configuration for determing how redaction of images should occur.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L281","resources":[],"examples":[],"params":[{"name":"infoType","description":"<p> Only one per info_type should be provided per request. If not  specified, and redact_all_text is false, the DLP API will redacts all  text that it matches against all info_types that are found, but not  specified in another ImageRedactionConfig.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'InfoType'\n        })\">InfoType</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'InfoType'\n        })\">InfoType</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"redactAllText","description":"<p> If true, all text found in the image, regardless if it matches an  info_type, is redacted.</p>","types":["boolean"],"optional":false,"nullable":false},{"name":"redactionColor","description":"<p> The color to use when redacting content from an image. If not specified,  the default is black.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Color'\n        })\">Color</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Color'\n        })\">Color</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Color","name":"Color","type":"instance","description":"<p>Represents a color in the RGB color space.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L301","resources":[],"examples":[],"params":[{"name":"red","description":"<p> The amount of red in the color as a value in the interval [0, 1].</p>","types":["number"],"optional":false,"nullable":false},{"name":"green","description":"<p> The amount of green in the color as a value in the interval [0, 1].</p>","types":["number"],"optional":false,"nullable":false},{"name":"blue","description":"<p> The amount of blue in the color as a value in the interval [0, 1].</p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"RedactContentResponse","name":"RedactContentResponse","type":"instance","description":"","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L316","resources":[],"examples":[],"params":[{"name":"items","description":"<p> The redacted content.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ContentItem'\n        })\">ContentItem</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'ContentItem'\n        })\">ContentItem</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"InspectContentRequest","name":"InspectContentRequest","type":"instance","description":"","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L338","resources":[],"examples":[],"params":[{"name":"inspectConfig","description":"<p> Configuration for the inspector.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'InspectConfig'\n        })\">InspectConfig</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'InspectConfig'\n        })\">InspectConfig</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"items","description":"<p> The list of items to inspect. Items in a single request are  considered &quot;related&quot; unless inspect_config.independent_inputs is true.  Up to 100 are allowed per request.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ContentItem'\n        })\">ContentItem</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'ContentItem'\n        })\">ContentItem</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"InspectContentResponse","name":"InspectContentResponse","type":"instance","description":"","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L354","resources":[],"examples":[],"params":[{"name":"results","description":"<p> Each content_item from the request has a result in this list, in the  same order as the request.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'InspectResult'\n        })\">InspectResult</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'InspectResult'\n        })\">InspectResult</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"CreateInspectOperationRequest","name":"CreateInspectOperationRequest","type":"instance","description":"","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L393","resources":[],"examples":[],"params":[{"name":"inspectConfig","description":"<p> Configuration for the inspector.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'InspectConfig'\n        })\">InspectConfig</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'InspectConfig'\n        })\">InspectConfig</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"storageConfig","description":"<p> Specification of the data set to process.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'StorageConfig'\n        })\">StorageConfig</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'StorageConfig'\n        })\">StorageConfig</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"outputConfig","description":"<p> Optional location to store findings. The bucket must already exist and  the Google APIs service account for DLP must have write permission to  write to the given bucket.  <p>Results are split over multiple csv files with each file name matching  the pattern &quot;[operation<em>id]</em>[count].csv&quot;, for example  <code>3094877188788974909_1.csv</code>. The <code>operation_id</code> matches the  identifier for the Operation, and the <code>count</code> is a counter used for  tracking the number of files written. <p>The CSV file(s) contain the  following columns regardless of storage type scanned: <li>id <li>info_type  <li>likelihood <li>byte size of finding <li>quote <li>time_stamp   <p>For Cloud Storage the next columns are: <li>file_path  <li>start_offset   <p>For Cloud Datastore the next columns are: <li>project_id  <li>namespace_id <li>path <li>column_name <li>offset</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'OutputStorageConfig'\n        })\">OutputStorageConfig</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'OutputStorageConfig'\n        })\">OutputStorageConfig</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"OutputStorageConfig","name":"OutputStorageConfig","type":"instance","description":"<p>Cloud repository for storing output.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L408","resources":[],"examples":[],"params":[{"name":"storagePath","description":"<p> The path to a Google Cloud Storage location to store output.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'CloudStoragePath'\n        })\">CloudStoragePath</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'CloudStoragePath'\n        })\">CloudStoragePath</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"InfoTypeStatistics","name":"InfoTypeStatistics","type":"instance","description":"<p>Statistics regarding a specific InfoType.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L426","resources":[],"examples":[],"params":[{"name":"infoType","description":"<p> The type of finding this stat is for.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'InfoType'\n        })\">InfoType</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'InfoType'\n        })\">InfoType</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"count","description":"<p> Number of findings for this info type.</p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"InspectOperationMetadata","name":"InspectOperationMetadata","type":"instance","description":"<p>Metadata returned within GetOperation for an inspect request.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L465","resources":[],"examples":[],"params":[{"name":"processedBytes","description":"<p> Total size in bytes that were processed.</p>","types":["number"],"optional":false,"nullable":false},{"name":"totalEstimatedBytes","description":"<p> Estimate of the number of bytes to process.</p>","types":["number"],"optional":false,"nullable":false},{"name":"infoTypeStats","description":"<p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'InfoTypeStatistics'\n        })\">InfoTypeStatistics</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'InfoTypeStatistics'\n        })\">InfoTypeStatistics</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"createTime","description":"<p> The time which this request was started.</p><p> This object should have the same structure as google.protobuf.Timestamp</p>","types":["Object"],"optional":false,"nullable":false},{"name":"requestInspectConfig","description":"<p> The inspect config used to create the Operation.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'InspectConfig'\n        })\">InspectConfig</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'InspectConfig'\n        })\">InspectConfig</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"requestStorageConfig","description":"<p> The storage config used to create the Operation.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'StorageConfig'\n        })\">StorageConfig</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'StorageConfig'\n        })\">StorageConfig</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"requestOutputConfig","description":"<p> Optional location to store findings.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'OutputStorageConfig'\n        })\">OutputStorageConfig</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'OutputStorageConfig'\n        })\">OutputStorageConfig</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"InspectOperationResult","name":"InspectOperationResult","type":"instance","description":"<p>The operational data.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L480","resources":[],"examples":[],"params":[{"name":"name","description":"<p> The server-assigned name, which is only unique within the same service that  originally returns it. If you use the default HTTP mapping, the  <code>name</code> should have the format of <code>inspect/results/{id}</code>.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ListInspectFindingsRequest","name":"ListInspectFindingsRequest","type":"instance","description":"","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L513","resources":[],"examples":[],"params":[{"name":"name","description":"<p> Identifier of the results set returned as metadata of  the longrunning operation created by a call to CreateInspectOperation.  Should be in the format of `inspect/results/{id}.</p>","types":["string"],"optional":false,"nullable":false},{"name":"pageSize","description":"<p> Maximum number of results to return.  If 0, the implementation selects a reasonable value.</p>","types":["number"],"optional":false,"nullable":false},{"name":"pageToken","description":"<p> The value returned by the last <code>ListInspectFindingsResponse</code>; indicates  that this is a continuation of a prior <code>ListInspectFindings</code> call, and that  the system should return the next page of data.</p>","types":["string"],"optional":false,"nullable":false},{"name":"filter","description":"<p> Restricts findings to items that match. Supports info_type and likelihood.  <p>Examples:   <li>info_type=EMAIL_ADDRESS  <li>info_type=PHONE_NUMBER,EMAIL_ADDRESS  <li>likelihood=VERY_LIKELY  <li>likelihood=VERY_LIKELY,LIKELY  <li>info_type=EMAIL_ADDRESS,likelihood=VERY_LIKELY,LIKELY</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ListInspectFindingsResponse","name":"ListInspectFindingsResponse","type":"instance","description":"","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L532","resources":[],"examples":[],"params":[{"name":"result","description":"<p> The results.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'InspectResult'\n        })\">InspectResult</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'InspectResult'\n        })\">InspectResult</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"nextPageToken","description":"<p> If not empty, indicates that there may be more results that match the  request; this value should be passed in a new <code>ListInspectFindingsRequest</code>.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"InfoTypeDescription","name":"InfoTypeDescription","type":"instance","description":"<p>Info type description.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L553","resources":[],"examples":[],"params":[{"name":"name","description":"<p> Internal name of the info type.</p>","types":["string"],"optional":false,"nullable":false},{"name":"displayName","description":"<p> Human readable form of the info type name.</p>","types":["string"],"optional":false,"nullable":false},{"name":"categories","description":"<p> List of categories this info type belongs to.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'CategoryDescription'\n        })\">CategoryDescription</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'CategoryDescription'\n        })\">CategoryDescription</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ListInfoTypesRequest","name":"ListInfoTypesRequest","type":"instance","description":"","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L572","resources":[],"examples":[],"params":[{"name":"category","description":"<p> Category name as returned by ListRootCategories.</p>","types":["string"],"optional":false,"nullable":false},{"name":"languageCode","description":"<p> Optional BCP-47 language code for localized info type friendly  names. If omitted, or if localized strings are not available,  en-US strings will be returned.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ListInfoTypesResponse","name":"ListInfoTypesResponse","type":"instance","description":"","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L587","resources":[],"examples":[],"params":[{"name":"infoTypes","description":"<p> Set of sensitive info types belonging to a category.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'InfoTypeDescription'\n        })\">InfoTypeDescription</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'InfoTypeDescription'\n        })\">InfoTypeDescription</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"CategoryDescription","name":"CategoryDescription","type":"instance","description":"<p>Info Type Category description.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L603","resources":[],"examples":[],"params":[{"name":"name","description":"<p> Internal name of the category.</p>","types":["string"],"optional":false,"nullable":false},{"name":"displayName","description":"<p> Human readable form of the category name.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ListRootCategoriesRequest","name":"ListRootCategoriesRequest","type":"instance","description":"","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L619","resources":[],"examples":[],"params":[{"name":"languageCode","description":"<p> Optional language code for localized friendly category names.  If omitted or if localized strings are not available,  en-US strings will be returned.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ListRootCategoriesResponse","name":"ListRootCategoriesResponse","type":"instance","description":"","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L634","resources":[],"examples":[],"params":[{"name":"categories","description":"<p> List of all into type categories supported by the API.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'CategoryDescription'\n        })\">CategoryDescription</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'CategoryDescription'\n        })\">CategoryDescription</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Likelihood","name":"Likelihood","type":"instance","description":"<p>Categorization of results based on how likely they are to represent a match, based on the number of elements they contain which imply a match.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L644","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]}],"path":"doc_dlp.json"}