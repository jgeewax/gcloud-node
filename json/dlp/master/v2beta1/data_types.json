{"name":"Data Types","methods":[{"id":"InspectConfig","name":"InspectConfig","type":"instance","description":"<p>Configuration description of the scanning process. When used with redactContent only info_types and min_likelihood are currently used.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L52","resources":[],"examples":[],"params":[{"name":"infoTypes","description":"<p> Restricts what info_types to look for. The values must correspond to  InfoType values returned by ListInfoTypes or found in documentation.  Empty info_types runs all enabled detectors.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'InfoType'\n        })\">InfoType</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"minLikelihood","description":"<p> Only returns findings equal or above this threshold.</p><p> The number should be among the values of <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Likelihood'\n        })\">Likelihood</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"maxFindings","description":"<p> Limits the number of findings per content item.</p>","types":["number"],"optional":false,"nullable":false},{"name":"includeQuote","description":"<p> When true, a contextual quote from the data that triggered a finding is  included in the response; see Finding.quote.</p>","types":["boolean"],"optional":false,"nullable":false},{"name":"excludeTypes","description":"<p> When true, excludes type information of the findings.</p>","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ContentItem","name":"ContentItem","type":"instance","description":"<p>Container structure for the content to inspect.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L73","resources":[],"examples":[],"params":[{"name":"type","description":"<p> Type of the content, as defined in Content-Type HTTP header.  Supported types are: all &quot;text&quot; types, octet streams, PNG images,  JPEG images.</p>","types":["string"],"optional":false,"nullable":false},{"name":"data","description":"<p> Content data to inspect or redact.</p>","types":["string"],"optional":false,"nullable":false},{"name":"value","description":"<p> String data to inspect or redact.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"InspectResult","name":"InspectResult","type":"instance","description":"<p>All the findings for a single scanned item.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L96","resources":[],"examples":[],"params":[{"name":"findings","description":"<p> List of findings for an item.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Finding'\n        })\">Finding</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"findingsTruncated","description":"<p> If true, then this item might have more findings than were returned,  and the findings returned are an arbitrary subset of all findings.  The findings list might be truncated because the input items were too  large, or because the server reached the maximum amount of resources  allowed for a single API call. For best results, divide the input into  smaller batches.</p>","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Finding","name":"Finding","type":"instance","description":"<p>Container structure describing a single finding within a string or image.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L129","resources":[],"examples":[],"params":[{"name":"quote","description":"<p> The specific string that may be potentially sensitive info.</p>","types":["string"],"optional":false,"nullable":false},{"name":"infoType","description":"<p> The specific type of info the string might be.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'InfoType'\n        })\">InfoType</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"likelihood","description":"<p> Estimate of how likely it is that the info_type is correct.</p><p> The number should be among the values of <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Likelihood'\n        })\">Likelihood</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"location","description":"<p> Location of the info found.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Location'\n        })\">Location</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"createTime","description":"<p> Timestamp when finding was detected.</p><p> This object should have the same structure as google.protobuf.Timestamp</p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Location","name":"Location","type":"instance","description":"<p>Specifies the location of a finding within its source item.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L165","resources":[],"examples":[],"params":[{"name":"byteRange","description":"<p> Zero-based byte offsets within a content item.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Range'\n        })\">Range</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"codepointRange","description":"<p> Character offsets within a content item, included when content type  is a text. Default charset assumed to be UTF-8.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Range'\n        })\">Range</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"imageBoxes","description":"<p> Location within an image&#39;s pixels.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ImageLocation'\n        })\">ImageLocation</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"recordKey","description":"<p> Key of the finding.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'RecordKey'\n        })\">RecordKey</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"fieldId","description":"<p> Field id of the field containing the finding.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'FieldId'\n        })\">FieldId</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Range","name":"Range","type":"instance","description":"<p>Generic half-open interval [start, end)</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L181","resources":[],"examples":[],"params":[{"name":"start","description":"<p> Index of the first character of the range (inclusive).</p>","types":["number"],"optional":false,"nullable":false},{"name":"end","description":"<p> Index of the last character of the range (exclusive).</p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ImageLocation","name":"ImageLocation","type":"instance","description":"<p>Bounding box encompassing detected text within an image.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L203","resources":[],"examples":[],"params":[{"name":"top","description":"<p> Top coordinate of the bounding box. (0,0) is upper left.</p>","types":["number"],"optional":false,"nullable":false},{"name":"left","description":"<p> Left coordinate of the bounding box. (0,0) is upper left.</p>","types":["number"],"optional":false,"nullable":false},{"name":"width","description":"<p> Width of the bounding box in pixels.</p>","types":["number"],"optional":false,"nullable":false},{"name":"height","description":"<p> Height of the bounding box in pixels.</p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"RedactContentRequest","name":"RedactContentRequest","type":"instance","description":"","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L235","resources":[],"examples":[],"params":[{"name":"inspectConfig","description":"<p> Configuration for the inspector.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'InspectConfig'\n        })\">InspectConfig</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"items","description":"<p> The list of items to inspect. Up to 100 are allowed per request.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ContentItem'\n        })\">ContentItem</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"replaceConfigs","description":"<p> The strings to replace findings text findings with. Must specify at least  one of these or one ImageRedactionConfig if redacting images.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ReplaceConfig'\n        })\">ReplaceConfig</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"imageRedactionConfigs","description":"<p> The configuration for specifying what content to redact from images.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ImageRedactionConfig'\n        })\">ImageRedactionConfig</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ReplaceConfig","name":"ReplaceConfig","type":"instance","description":"","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L253","resources":[],"examples":[],"params":[{"name":"infoType","description":"<p> Type of information to replace. Only one ReplaceConfig per info_type  should be provided. If ReplaceConfig does not have an info_type, the DLP  API matches it against all info_types that are found but not specified in  another ReplaceConfig.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'InfoType'\n        })\">InfoType</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"replaceWith","description":"<p> Content replacing sensitive information of given type. Max 256 chars.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ImageRedactionConfig","name":"ImageRedactionConfig","type":"instance","description":"<p>Configuration for determing how redaction of images should occur.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L281","resources":[],"examples":[],"params":[{"name":"infoType","description":"<p> Only one per info_type should be provided per request. If not  specified, and redact_all_text is false, the DLP API will redacts all  text that it matches against all info_types that are found, but not  specified in another ImageRedactionConfig.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'InfoType'\n        })\">InfoType</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"redactAllText","description":"<p> If true, all text found in the image, regardless if it matches an  info_type, is redacted.</p>","types":["boolean"],"optional":false,"nullable":false},{"name":"redactionColor","description":"<p> The color to use when redacting content from an image. If not specified,  the default is black.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Color'\n        })\">Color</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Color","name":"Color","type":"instance","description":"<p>Represents a color in the RGB color space.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L301","resources":[],"examples":[],"params":[{"name":"red","description":"<p> The amount of red in the color as a value in the interval [0, 1].</p>","types":["number"],"optional":false,"nullable":false},{"name":"green","description":"<p> The amount of green in the color as a value in the interval [0, 1].</p>","types":["number"],"optional":false,"nullable":false},{"name":"blue","description":"<p> The amount of blue in the color as a value in the interval [0, 1].</p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"RedactContentResponse","name":"RedactContentResponse","type":"instance","description":"","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L316","resources":[],"examples":[],"params":[{"name":"items","description":"<p> The redacted content.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ContentItem'\n        })\">ContentItem</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"InspectContentRequest","name":"InspectContentRequest","type":"instance","description":"","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L338","resources":[],"examples":[],"params":[{"name":"inspectConfig","description":"<p> Configuration for the inspector.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'InspectConfig'\n        })\">InspectConfig</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"items","description":"<p> The list of items to inspect. Items in a single request are  considered &quot;related&quot; unless inspect_config.independent_inputs is true.  Up to 100 are allowed per request.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'ContentItem'\n        })\">ContentItem</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"InspectContentResponse","name":"InspectContentResponse","type":"instance","description":"","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L354","resources":[],"examples":[],"params":[{"name":"results","description":"<p> Each content_item from the request has a result in this list, in the  same order as the request.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'InspectResult'\n        })\">InspectResult</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"CreateInspectOperationRequest","name":"CreateInspectOperationRequest","type":"instance","description":"","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L393","resources":[],"examples":[],"params":[{"name":"inspectConfig","description":"<p> Configuration for the inspector.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'InspectConfig'\n        })\">InspectConfig</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"storageConfig","description":"<p> Specification of the data set to process.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'StorageConfig'\n        })\">StorageConfig</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"outputConfig","description":"<p> Optional location to store findings. The bucket must already exist and  the Google APIs service account for DLP must have write permission to  write to the given bucket.  <p>Results are split over multiple csv files with each file name matching  the pattern &quot;[operation<em>id]</em>[count].csv&quot;, for example  <code>3094877188788974909_1.csv</code>. The <code>operation_id</code> matches the  identifier for the Operation, and the <code>count</code> is a counter used for  tracking the number of files written. <p>The CSV file(s) contain the  following columns regardless of storage type scanned: <li>id <li>info_type  <li>likelihood <li>byte size of finding <li>quote <li>time_stamp   <p>For Cloud Storage the next columns are: <li>file_path  <li>start_offset   <p>For Cloud Datastore the next columns are: <li>project_id  <li>namespace_id <li>path <li>column_name <li>offset</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'OutputStorageConfig'\n        })\">OutputStorageConfig</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"OutputStorageConfig","name":"OutputStorageConfig","type":"instance","description":"<p>Cloud repository for storing output.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L408","resources":[],"examples":[],"params":[{"name":"storagePath","description":"<p> The path to a Google Cloud Storage location to store output.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'CloudStoragePath'\n        })\">CloudStoragePath</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"InfoTypeStatistics","name":"InfoTypeStatistics","type":"instance","description":"<p>Statistics regarding a specific InfoType.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L426","resources":[],"examples":[],"params":[{"name":"infoType","description":"<p> The type of finding this stat is for.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'InfoType'\n        })\">InfoType</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"count","description":"<p> Number of findings for this info type.</p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"InspectOperationMetadata","name":"InspectOperationMetadata","type":"instance","description":"<p>Metadata returned within GetOperation for an inspect request.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L465","resources":[],"examples":[],"params":[{"name":"processedBytes","description":"<p> Total size in bytes that were processed.</p>","types":["number"],"optional":false,"nullable":false},{"name":"totalEstimatedBytes","description":"<p> Estimate of the number of bytes to process.</p>","types":["number"],"optional":false,"nullable":false},{"name":"infoTypeStats","description":"<p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'InfoTypeStatistics'\n        })\">InfoTypeStatistics</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"createTime","description":"<p> The time which this request was started.</p><p> This object should have the same structure as google.protobuf.Timestamp</p>","types":["Object"],"optional":false,"nullable":false},{"name":"requestInspectConfig","description":"<p> The inspect config used to create the Operation.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'InspectConfig'\n        })\">InspectConfig</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"requestStorageConfig","description":"<p> The storage config used to create the Operation.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'StorageConfig'\n        })\">StorageConfig</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"requestOutputConfig","description":"<p> Optional location to store findings.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'OutputStorageConfig'\n        })\">OutputStorageConfig</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"InspectOperationResult","name":"InspectOperationResult","type":"instance","description":"<p>The operational data.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L480","resources":[],"examples":[],"params":[{"name":"name","description":"<p> The server-assigned name, which is only unique within the same service that  originally returns it. If you use the default HTTP mapping, the  <code>name</code> should have the format of <code>inspect/results/{id}</code>.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ListInspectFindingsRequest","name":"ListInspectFindingsRequest","type":"instance","description":"","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L513","resources":[],"examples":[],"params":[{"name":"name","description":"<p> Identifier of the results set returned as metadata of  the longrunning operation created by a call to CreateInspectOperation.  Should be in the format of `inspect/results/{id}.</p>","types":["string"],"optional":false,"nullable":false},{"name":"pageSize","description":"<p> Maximum number of results to return.  If 0, the implementation selects a reasonable value.</p>","types":["number"],"optional":false,"nullable":false},{"name":"pageToken","description":"<p> The value returned by the last <code>ListInspectFindingsResponse</code>; indicates  that this is a continuation of a prior <code>ListInspectFindings</code> call, and that  the system should return the next page of data.</p>","types":["string"],"optional":false,"nullable":false},{"name":"filter","description":"<p> Restricts findings to items that match. Supports info_type and likelihood.  <p>Examples:   <li>info_type=EMAIL_ADDRESS  <li>info_type=PHONE_NUMBER,EMAIL_ADDRESS  <li>likelihood=VERY_LIKELY  <li>likelihood=VERY_LIKELY,LIKELY  <li>info_type=EMAIL_ADDRESS,likelihood=VERY_LIKELY,LIKELY</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ListInspectFindingsResponse","name":"ListInspectFindingsResponse","type":"instance","description":"","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L532","resources":[],"examples":[],"params":[{"name":"result","description":"<p> The results.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'InspectResult'\n        })\">InspectResult</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"nextPageToken","description":"<p> If not empty, indicates that there may be more results that match the  request; this value should be passed in a new <code>ListInspectFindingsRequest</code>.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"InfoTypeDescription","name":"InfoTypeDescription","type":"instance","description":"<p>Info type description.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L553","resources":[],"examples":[],"params":[{"name":"name","description":"<p> Internal name of the info type.</p>","types":["string"],"optional":false,"nullable":false},{"name":"displayName","description":"<p> Human readable form of the info type name.</p>","types":["string"],"optional":false,"nullable":false},{"name":"categories","description":"<p> List of categories this info type belongs to.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'CategoryDescription'\n        })\">CategoryDescription</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ListInfoTypesRequest","name":"ListInfoTypesRequest","type":"instance","description":"","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L572","resources":[],"examples":[],"params":[{"name":"category","description":"<p> Category name as returned by ListRootCategories.</p>","types":["string"],"optional":false,"nullable":false},{"name":"languageCode","description":"<p> Optional BCP-47 language code for localized info type friendly  names. If omitted, or if localized strings are not available,  en-US strings will be returned.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ListInfoTypesResponse","name":"ListInfoTypesResponse","type":"instance","description":"","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L587","resources":[],"examples":[],"params":[{"name":"infoTypes","description":"<p> Set of sensitive info types belonging to a category.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'InfoTypeDescription'\n        })\">InfoTypeDescription</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"CategoryDescription","name":"CategoryDescription","type":"instance","description":"<p>Info Type Category description.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L603","resources":[],"examples":[],"params":[{"name":"name","description":"<p> Internal name of the category.</p>","types":["string"],"optional":false,"nullable":false},{"name":"displayName","description":"<p> Human readable form of the category name.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ListRootCategoriesRequest","name":"ListRootCategoriesRequest","type":"instance","description":"","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L619","resources":[],"examples":[],"params":[{"name":"languageCode","description":"<p> Optional language code for localized friendly category names.  If omitted or if localized strings are not available,  en-US strings will be returned.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"ListRootCategoriesResponse","name":"ListRootCategoriesResponse","type":"instance","description":"","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L634","resources":[],"examples":[],"params":[{"name":"categories","description":"<p> List of all into type categories supported by the API.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'CategoryDescription'\n        })\">CategoryDescription</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Likelihood","name":"Likelihood","type":"instance","description":"<p>Categorization of results based on how likely they are to represent a match, based on the number of elements they contain which imply a match.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_dlp.js#L644","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"type":"instance","description":"<p><code>Any</code> contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.</p><p>Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.</p><p>Example 1: Pack and unpack a message in C++.</p><pre><code>Foo foo = ...; Any any; any.PackFrom(foo); ... if (any.UnpackTo(&amp;foo)) { ... } </code></pre><p>Example 2: Pack and unpack a message in Java.</p><pre><code>Foo foo = ...; Any any = Any.pack(foo); ... if (any.is(Foo.class)) { foo = any.unpack(Foo.class); } </code></pre><p> Example 3: Pack and unpack a message in Python.</p><pre><code>foo = Foo(...) any = Any() any.Pack(foo) ... if any.Is(Foo.DESCRIPTOR): any.Unpack(foo) ... </code></pre><p>The pack methods provided by protobuf library will by default use &#39;type.googleapis.com/full.type.name&#39; as the type URL and the unpack methods only use the fully qualified type name after the last &#39;/&#39; in the type URL, for example &quot;foo.bar.com/x/y.z&quot; will yield type name &quot;y.z&quot;.</p><h1>JSON</h1> <p>The JSON representation of an <code>Any</code> value uses the regular representation of the deserialized, embedded message, with an additional field <code>@type</code> which contains the type URL. Example:</p><pre><code>package google.profile; message Person { string first_name = 1; string last_name = 2; } { &quot;@type&quot;: &quot;type.googleapis.com/google.profile.Person&quot;, &quot;firstName&quot;: &lt;string&gt;, &quot;lastName&quot;: &lt;string&gt; } </code></pre><p>If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field <code>value</code> which holds the custom JSON in addition to the <code>@type</code> field. Example (for message {@link google.protobuf.Duration}):</p><pre><code>{ &quot;@type&quot;: &quot;type.googleapis.com/google.protobuf.Duration&quot;, &quot;value&quot;: &quot;1.212s&quot; } </code></pre>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_google_protobuf_any.js#L122","resources":[],"examples":[],"params":[{"name":"typeUrl","description":"<p> A URL/resource name whose content describes the type of the  serialized protocol buffer message.</p><p> For URLs which use the scheme <code>http</code>, <code>https</code>, or no scheme, the  following restrictions and interpretations apply:</p><ul> <li>If no scheme is provided, <code>https</code> is assumed.</li> <li>The last segment of the URL&#39;s path must represent the fully qualified name of the type (as in <code>path/google.protobuf.Duration</code>). The name should be in a canonical form (e.g., leading &quot;.&quot; is not accepted).</li> <li>An HTTP GET on the URL must yield a {@link google.protobuf.Type} value in binary format, or produce an error.</li> <li><p>Applications are allowed to cache lookup results based on the URL, or have them precompiled into a binary to avoid any lookup. Therefore, binary compatibility needs to be preserved on changes to types. (Use versioned type names to manage breaking changes.)</p><p>Schemes other than <code>http</code>, <code>https</code> (or the empty scheme) might be used with implementation specific semantics.</p></li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"value","description":"<p> Must be a valid serialized protocol buffer of the above specified type.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"type":"instance","description":"<p>A Timestamp represents a point in time independent of any time zone or calendar, represented as seconds and fractions of seconds at nanosecond resolution in UTC Epoch time. It is encoded using the Proleptic Gregorian Calendar which extends the Gregorian calendar backwards to year one. It is encoded assuming all minutes are 60 seconds long, i.e. leap seconds are &quot;smeared&quot; so that no leap second table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By restricting to that range, we ensure that we can convert to and from RFC 3339 date strings. See <a href=\"https://www.ietf.org/rfc/rfc3339.txt\">https://www.ietf.org/rfc/rfc3339.txt</a>.</p><p>Example 1: Compute Timestamp from POSIX <code>time()</code>.</p><pre><code>Timestamp timestamp; timestamp.set_seconds(time(NULL)); timestamp.set_nanos(0); </code></pre><p>Example 2: Compute Timestamp from POSIX <code>gettimeofday()</code>.</p><pre><code>struct timeval tv; gettimeofday(&amp;tv, NULL); Timestamp timestamp; timestamp.set_seconds(tv.tv_sec); timestamp.set_nanos(tv.tv_usec * 1000); </code></pre><p>Example 3: Compute Timestamp from Win32 <code>GetSystemTimeAsFileTime()</code>.</p><pre><code>FILETIME ft; GetSystemTimeAsFileTime(&amp;ft); UINT64 ticks = (((UINT64)ft.dwHighDateTime) &lt;&lt; 32) | ft.dwLowDateTime; // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z. Timestamp timestamp; timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL)); timestamp.set_nanos((INT32) ((ticks % 10000000) * 100)); </code></pre><p>Example 4: Compute Timestamp from Java <code>System.currentTimeMillis()</code>.</p><pre><code>long millis = System.currentTimeMillis(); Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000) .setNanos((int) ((millis % 1000) * 1000000)).build(); </code></pre><p>Example 5: Compute Timestamp from current time in Python.</p><pre><code>timestamp = Timestamp() timestamp.GetCurrentTime() </code></pre>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_google_protobuf_timestamp.js#L89","resources":[],"examples":[],"params":[{"name":"seconds","description":"<p> Represents seconds of UTC time since Unix epoch  1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to  9999-12-31T23:59:59Z inclusive.</p>","types":["number"],"optional":false,"nullable":false},{"name":"nanos","description":"<p> Non-negative fractions of a second at nanosecond resolution. Negative  second values with fractions must still have non-negative nanos values  that count forward in time. Must be from 0 to 999,999,999  inclusive.</p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"type":"instance","description":"<p>The <code>Status</code> type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by <a href=\"https://github.com/grpc\">gRPC</a>. The error model is designed to be:</p><ul> <li>Simple to use and understand for most users</li> <li>Flexible enough to meet unexpected needs</li> </ul> <h1>Overview</h1> <p>The <code>Status</code> message contains three pieces of data: error code, error message, and error details. The error code should be an enum value of {@link google.rpc.Code}, but it may accept additional error codes if needed. The error message should be a developer-facing English message that helps developers <em>understand</em> and <em>resolve</em> the error. If a localized user-facing error message is needed, put the localized message in the error details or localize it in the client. The optional error details may contain arbitrary information about the error. There is a predefined set of error detail types in the package <code>google.rpc</code> which can be used for common error conditions.</p><h1>Language mapping</h1> <p>The <code>Status</code> message is the logical representation of the error model, but it is not necessarily the actual wire format. When the <code>Status</code> message is exposed in different client libraries and different wire protocols, it can be mapped differently. For example, it will likely be mapped to some exceptions in Java, but more likely mapped to some error codes in C.</p><h1>Other uses</h1> <p>The error model and the <code>Status</code> message can be used in a variety of environments, either with or without APIs, to provide a consistent developer experience across different environments.</p><p>Example uses of this error model include:</p><ul> <li><p>Partial errors. If a service needs to return partial errors to the client,  it may embed the <code>Status</code> in the normal response to indicate the partial  errors.</p></li> <li><p>Workflow errors. A typical workflow has multiple steps. Each step may  have a <code>Status</code> message for error reporting purpose.</p></li> <li><p>Batch operations. If a client uses batch request and batch response, the  <code>Status</code> message should be used directly inside batch response, one for  each error sub-response.</p></li> <li><p>Asynchronous operations. If an API call embeds asynchronous operation  results in its response, the status of those operations should be  represented directly using the <code>Status</code> message.</p></li> <li><p>Logging. If some API errors are stored in logs, the message <code>Status</code> could  be used directly after any stripping needed for security/privacy reasons.</p></li> </ul> ","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_google_rpc_status.js#L93","resources":[],"examples":[],"params":[{"name":"code","description":"<p> The status code, which should be an enum value of {@link google.rpc.Code}.</p>","types":["number"],"optional":false,"nullable":false},{"name":"message","description":"<p> A developer-facing error message, which should be in English. Any  user-facing error message should be localized and sent in the  {@link google.rpc.Status.details} field, or localized by the client.</p>","types":["string"],"optional":false,"nullable":false},{"name":"details","description":"<p> A list of messages that carry the error details. There will be a  common set of message types for APIs to use.</p><p> This object should have the same structure as google.protobuf.Any</p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"InfoType","name":"InfoType","type":"instance","description":"<p>Type of information detected by the API.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_storage.js#L34","resources":[],"examples":[],"params":[{"name":"name","description":"<p> Name of the information type. For built-in info types, this is provided by  the API call ListInfoTypes. For user-defined info types, this is  provided by the user. All user-defined info types must have unique names,  and cannot conflict with built-in info type names.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"FieldId","name":"FieldId","type":"instance","description":"<p>General identifier of a data field in a storage service.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_storage.js#L47","resources":[],"examples":[],"params":[{"name":"columnName","description":"<p> Column name describing the field.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"PartitionId","name":"PartitionId","type":"instance","description":"<p>Datastore partition ID. A partition ID identifies a grouping of entities. The grouping is always by project and namespace, however the namespace ID may be empty.</p><p>A partition ID contains several dimensions: project ID and namespace ID.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_storage.js#L68","resources":[],"examples":[],"params":[{"name":"projectId","description":"<p> The ID of the project to which the entities belong.</p>","types":["string"],"optional":false,"nullable":false},{"name":"namespaceId","description":"<p> If not empty, the ID of the namespace to which the entities belong.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"KindExpression","name":"KindExpression","type":"instance","description":"<p>A representation of a Datastore kind.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_storage.js#L81","resources":[],"examples":[],"params":[{"name":"name","description":"<p> The name of the kind.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"PropertyReference","name":"PropertyReference","type":"instance","description":"<p>A reference to a property relative to the Datastore kind expressions.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_storage.js#L95","resources":[],"examples":[],"params":[{"name":"name","description":"<p> The name of the property.  If name includes &quot;.&quot;s, it may be interpreted as a property name path.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Projection","name":"Projection","type":"instance","description":"<p>A representation of a Datastore property in a projection.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_storage.js#L110","resources":[],"examples":[],"params":[{"name":"property","description":"<p> The property to project.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'PropertyReference'\n        })\">PropertyReference</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"DatastoreOptions","name":"DatastoreOptions","type":"instance","description":"<p>Options defining a data set within Google Cloud Datastore.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_storage.js#L137","resources":[],"examples":[],"params":[{"name":"partitionId","description":"<p> A partition ID identifies a grouping of entities. The grouping is always  by project and namespace, however the namespace ID may be empty.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'PartitionId'\n        })\">PartitionId</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"kind","description":"<p> The kind to process.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'KindExpression'\n        })\">KindExpression</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"projection","description":"<p> Properties to scan. If none are specified, all properties will be scanned  by default.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Projection'\n        })\">Projection</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"CloudStorageOptions","name":"CloudStorageOptions","type":"instance","description":"<p>Options defining a file or a set of files (path ending with *) within a Google Cloud Storage bucket.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_storage.js#L151","resources":[],"examples":[],"params":[{"name":"fileSet","description":"<p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'FileSet'\n        })\">FileSet</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"FileSet","name":"FileSet","type":"instance","description":"<p>Set of files to scan.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_storage.js#L164","resources":[],"examples":[],"params":[{"name":"url","description":"<p> The url, in the format <code>gs://&lt;bucket&gt;/&lt;path&gt;</code>. Trailing wildcard in the  path is allowed.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"CloudStoragePath","name":"CloudStoragePath","type":"instance","description":"<p>A location in Cloud Storage.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_storage.js#L178","resources":[],"examples":[],"params":[{"name":"path","description":"<p> The url, in the format of <code>gs://bucket/&lt;path&gt;</code>.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"StorageConfig","name":"StorageConfig","type":"instance","description":"<p>Shared message indicating Cloud storage type.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_storage.js#L198","resources":[],"examples":[],"params":[{"name":"datastoreOptions","description":"<p> Google Cloud Datastore options specification.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'DatastoreOptions'\n        })\">DatastoreOptions</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"cloudStorageOptions","description":"<p> Google Cloud Storage options specification.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'CloudStorageOptions'\n        })\">CloudStorageOptions</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"CloudStorageKey","name":"CloudStorageKey","type":"instance","description":"<p>Record key for a finding in a Cloud Storage file.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_storage.js#L214","resources":[],"examples":[],"params":[{"name":"filePath","description":"<p> Path to the file.</p>","types":["string"],"optional":false,"nullable":false},{"name":"startOffset","description":"<p> Byte offset of the referenced data in the file.</p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"DatastoreKey","name":"DatastoreKey","type":"instance","description":"<p>Record key for a finding in Cloud Datastore.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_storage.js#L229","resources":[],"examples":[],"params":[{"name":"entityKey","description":"<p> Datastore entity key.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Key'\n        })\">Key</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Key","name":"Key","type":"instance","description":"<p>A unique identifier for a Datastore entity. If a key&#39;s partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_storage.js#L262","resources":[],"examples":[],"params":[{"name":"partitionId","description":"<p> Entities are partitioned into subsets, currently identified by a project  ID and namespace ID.  Queries are scoped to a single partition.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'PartitionId'\n        })\">PartitionId</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"path","description":"<p> The entity path.  An entity path consists of one or more elements composed of a kind and a  string or numerical identifier, which identify entities. The first  element identifies a <em>root entity</em>, the second element identifies  a <em>child</em> of the root entity, the third element identifies a child of the  second entity, and so forth. The entities identified by all prefixes of  the path are called the element&#39;s <em>ancestors</em>.</p><p> A path can never be empty, and a path can have at most 100 elements.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'PathElement'\n        })\">PathElement</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"PathElement","name":"PathElement","type":"instance","description":"<p>A (kind, ID/name) pair used to construct a key path.</p><p>If either name or ID is set, the element is complete. If neither is set, the element is incomplete.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_storage.js#L291","resources":[],"examples":[],"params":[{"name":"kind","description":"<p> The kind of the entity.  A kind matching regex <code>__.*__</code> is reserved/read-only.  A kind must not contain more than 1500 bytes when UTF-8 encoded.  Cannot be <code>&quot;&quot;</code>.</p>","types":["string"],"optional":false,"nullable":false},{"name":"id","description":"<p> The auto-allocated ID of the entity.  Never equal to zero. Values less than zero are discouraged and may not  be supported in the future.</p>","types":["number"],"optional":false,"nullable":false},{"name":"name","description":"<p> The name of the entity.  A name matching regex <code>__.*__</code> is reserved/read-only.  A name must not be more than 1500 bytes when UTF-8 encoded.  Cannot be <code>&quot;&quot;</code>.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"RecordKey","name":"RecordKey","type":"instance","description":"<p>Message for a unique key indicating a record that contains a finding.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_storage.js#L308","resources":[],"examples":[],"params":[{"name":"cloudStorageKey","description":"<p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'CloudStorageKey'\n        })\">CloudStorageKey</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"datastoreKey","description":"<p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'DatastoreKey'\n        })\">DatastoreKey</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]}],"path":"v2beta1/data_types.json","description":"\n          <table class=\"table\">\n            <thead>\n              <tr>\n                <th>Class</th>\n                <th>Description</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr ng-repeat=\"method in service.methods\" ng-if=\"method.name\">\n                <td>\n                  <a ui-sref=\"docs.service({ method: method.id })\" class=\"skip-external-link\">\n                    {{method.name}}\n                  </a>\n                </td>\n                <td>\n                  <span ng-bind-html=\"method.description\">\n                    {{method.description}}\n                  </span>\n                  <span ng-if=\"!method.description && method.name.includes('Request')\">\n                    The request for {{method.name}}.\n                  </span>\n                  <span ng-if=\"!method.description && method.name.includes('Response')\">\n                    The response for {{method.name}}.\n                  </span>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        ","id":"dlp/v2beta1/data_types"}