{"id":"dlp/v2beta1/doc/doc_storage","type":"class","overview":"<p>\n  This class allows you interact with DLP API.\n</p>\n\n\n\n<p>\n  First, install <code>@google-cloud/dlp</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save @google-cloud/dlp</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>@google-cloud/dlp</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Google Cloud Platform</h4>\n<div hljs language=\"javascript\">\nvar dlp = require('@google-cloud/dlp')();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar dlp = require('@google-cloud/dlp')({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>@google-cloud/dlp</code> are outlined in our <a href=\"#/docs/dlp/v0.1.1/guides/authentication\">Authentication guide</a>.\n</p>\n","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_storage.js","parent":"dlp","children":[],"methods":[{"id":"InfoType","name":"InfoType","type":"instance","description":"<p>Type of information detected by the API.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_storage.js#L34","resources":[],"examples":[],"params":[{"name":"name","description":"<p> Name of the information type. For built-in info types, this is provided by  the API call ListInfoTypes. For user-defined info types, this is  provided by the user. All user-defined info types must have unique names,  and cannot conflict with built-in info type names.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"FieldId","name":"FieldId","type":"instance","description":"<p>General identifier of a data field in a storage service.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_storage.js#L47","resources":[],"examples":[],"params":[{"name":"columnName","description":"<p> Column name describing the field.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"PartitionId","name":"PartitionId","type":"instance","description":"<p>Datastore partition ID. A partition ID identifies a grouping of entities. The grouping is always by project and namespace, however the namespace ID may be empty.</p><p>A partition ID contains several dimensions: project ID and namespace ID.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_storage.js#L68","resources":[],"examples":[],"params":[{"name":"projectId","description":"<p> The ID of the project to which the entities belong.</p>","types":["string"],"optional":false,"nullable":false},{"name":"namespaceId","description":"<p> If not empty, the ID of the namespace to which the entities belong.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"KindExpression","name":"KindExpression","type":"instance","description":"<p>A representation of a Datastore kind.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_storage.js#L81","resources":[],"examples":[],"params":[{"name":"name","description":"<p> The name of the kind.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"PropertyReference","name":"PropertyReference","type":"instance","description":"<p>A reference to a property relative to the Datastore kind expressions.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_storage.js#L95","resources":[],"examples":[],"params":[{"name":"name","description":"<p> The name of the property.  If name includes &quot;.&quot;s, it may be interpreted as a property name path.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Projection","name":"Projection","type":"instance","description":"<p>A representation of a Datastore property in a projection.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_storage.js#L110","resources":[],"examples":[],"params":[{"name":"property","description":"<p> The property to project.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'PropertyReference'\n        })\">PropertyReference</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"DatastoreOptions","name":"DatastoreOptions","type":"instance","description":"<p>Options defining a data set within Google Cloud Datastore.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_storage.js#L137","resources":[],"examples":[],"params":[{"name":"partitionId","description":"<p> A partition ID identifies a grouping of entities. The grouping is always  by project and namespace, however the namespace ID may be empty.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'PartitionId'\n        })\">PartitionId</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"kind","description":"<p> The kind to process.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'KindExpression'\n        })\">KindExpression</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"projection","description":"<p> Properties to scan. If none are specified, all properties will be scanned  by default.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Projection'\n        })\">Projection</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"CloudStorageOptions","name":"CloudStorageOptions","type":"instance","description":"<p>Options defining a file or a set of files (path ending with *) within a Google Cloud Storage bucket.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_storage.js#L151","resources":[],"examples":[],"params":[{"name":"fileSet","description":"<p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'FileSet'\n        })\">FileSet</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"FileSet","name":"FileSet","type":"instance","description":"<p>Set of files to scan.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_storage.js#L164","resources":[],"examples":[],"params":[{"name":"url","description":"<p> The url, in the format <code>gs://&lt;bucket&gt;/&lt;path&gt;</code>. Trailing wildcard in the  path is allowed.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"CloudStoragePath","name":"CloudStoragePath","type":"instance","description":"<p>A location in Cloud Storage.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_storage.js#L178","resources":[],"examples":[],"params":[{"name":"path","description":"<p> The url, in the format of <code>gs://bucket/&lt;path&gt;</code>.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"StorageConfig","name":"StorageConfig","type":"instance","description":"<p>Shared message indicating Cloud storage type.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_storage.js#L198","resources":[],"examples":[],"params":[{"name":"datastoreOptions","description":"<p> Google Cloud Datastore options specification.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'DatastoreOptions'\n        })\">DatastoreOptions</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"cloudStorageOptions","description":"<p> Google Cloud Storage options specification.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'CloudStorageOptions'\n        })\">CloudStorageOptions</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"CloudStorageKey","name":"CloudStorageKey","type":"instance","description":"<p>Record key for a finding in a Cloud Storage file.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_storage.js#L214","resources":[],"examples":[],"params":[{"name":"filePath","description":"<p> Path to the file.</p>","types":["string"],"optional":false,"nullable":false},{"name":"startOffset","description":"<p> Byte offset of the referenced data in the file.</p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"DatastoreKey","name":"DatastoreKey","type":"instance","description":"<p>Record key for a finding in Cloud Datastore.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_storage.js#L229","resources":[],"examples":[],"params":[{"name":"entityKey","description":"<p> Datastore entity key.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Key'\n        })\">Key</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Key","name":"Key","type":"instance","description":"<p>A unique identifier for a Datastore entity. If a key&#39;s partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_storage.js#L262","resources":[],"examples":[],"params":[{"name":"partitionId","description":"<p> Entities are partitioned into subsets, currently identified by a project  ID and namespace ID.  Queries are scoped to a single partition.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'PartitionId'\n        })\">PartitionId</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"path","description":"<p> The entity path.  An entity path consists of one or more elements composed of a kind and a  string or numerical identifier, which identify entities. The first  element identifies a <em>root entity</em>, the second element identifies  a <em>child</em> of the root entity, the third element identifies a child of the  second entity, and so forth. The entities identified by all prefixes of  the path are called the element&#39;s <em>ancestors</em>.</p><p> A path can never be empty, and a path can have at most 100 elements.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'PathElement'\n        })\">PathElement</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"PathElement","name":"PathElement","type":"instance","description":"<p>A (kind, ID/name) pair used to construct a key path.</p><p>If either name or ID is set, the element is complete. If neither is set, the element is incomplete.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_storage.js#L291","resources":[],"examples":[],"params":[{"name":"kind","description":"<p> The kind of the entity.  A kind matching regex <code>__.*__</code> is reserved/read-only.  A kind must not contain more than 1500 bytes when UTF-8 encoded.  Cannot be <code>&quot;&quot;</code>.</p>","types":["string"],"optional":false,"nullable":false},{"name":"id","description":"<p> The auto-allocated ID of the entity.  Never equal to zero. Values less than zero are discouraged and may not  be supported in the future.</p>","types":["number"],"optional":false,"nullable":false},{"name":"name","description":"<p> The name of the entity.  A name matching regex <code>__.*__</code> is reserved/read-only.  A name must not be more than 1500 bytes when UTF-8 encoded.  Cannot be <code>&quot;&quot;</code>.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"RecordKey","name":"RecordKey","type":"instance","description":"<p>Message for a unique key indicating a record that contains a finding.</p>","source":"packages\\dlp\\src\\v2beta1\\doc\\doc_storage.js#L308","resources":[],"examples":[],"params":[{"name":"cloudStorageKey","description":"<p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'CloudStorageKey'\n        })\">CloudStorageKey</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"datastoreKey","description":"<p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'DatastoreKey'\n        })\">DatastoreKey</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]}],"path":"doc_storage.json"}