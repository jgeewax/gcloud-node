{"id":"dns/change","type":"class","name":"Change","overview":"<p>\n  This class allows you interact with Cloud DNS.\n</p>\n\n\n\n<p>\n  First, install <code>@google-cloud/dns</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save @google-cloud/dns</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>@google-cloud/dns</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Google Cloud Platform</h4>\n<div hljs language=\"javascript\">\nvar dns = require('@google-cloud/dns')();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar dns = require('@google-cloud/dns')({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>@google-cloud/dns</code> are outlined in our <a href=\"#/docs/dns/v0.6.2/guides/authentication\">Authentication guide</a>.\n</p>\n","description":"","source":"packages\\dns\\src\\change.js","parent":"dns","children":[],"methods":[{"id":"Change","name":"Change","type":"constructor","description":"","source":"packages\\dns\\src\\change.js#L37","resources":[],"examples":[{"code":"var zone = dns.zone('zone-id');\nvar change = zone.change('change-id');"}],"params":[{"name":"zone","description":"<ul> <li>The parent zone object.</li> </ul> ","types":["<a data-custom-type=\"dns/zone\" data-method=\"\">dns/zone</a>"],"optional":false,"nullable":false},{"name":"id","description":"<ul> <li>ID of the change.</li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"exists","name":"exists","type":"instance","description":"<p>Check if the change exists.</p>","source":"packages\\dns\\src\\change.js#L57","resources":[],"examples":[{"code":"change.exists(function(err, exists) {});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"change.exists().then(function(data) {\n  var exists = data[0];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.exists","description":"<ul> <li>Whether the change exists or not.</li> </ul> ","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"get","name":"get","type":"instance","description":"<p>Get a change if it exists.</p><p>You may optionally use this to &quot;get or create&quot; an object by providing an object with <code>autoCreate</code> set to <code>true</code>. Any extra configuration that is normally required for the <code>create</code> method must be contained within this object as well.</p>","source":"packages\\dns\\src\\change.js#L84","resources":[],"examples":[{"code":"change.get(function(err, change, apiResponse) {\n  // `change.metadata` has been populated.\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"change.get().then(function(data) {\n  var change = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"options","description":"<ul> <li>Configuration object.</li> </ul> ","types":["options"],"optional":true,"nullable":false},{"name":"options.autoCreate","description":"<ul> <li>Automatically create the object if it does not exist. Default: <code>false</code></li> </ul> ","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"getMetadata","name":"getMetadata","type":"instance","description":"<p>Get the metadata for the change in the zone.</p>","source":"packages\\dns\\src\\change.js#L119","resources":[{"title":"Changes: get API Documentation","link":"https://cloud.google.com/dns/api/v1/changes/get"}],"examples":[{"code":"change.getMetadata(function(err, metadata, apiResponse) {\n  if (!err) {\n    // metadata = {\n    //   kind: 'dns#change',\n    //   additions: [{...}],\n    //   deletions: [{...}],\n    //   startTime: '2015-07-21T14:40:06.056Z',\n    //   id: '1',\n    //   status: 'done'\n    // }\n  }\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"change.getMetadata().then(function(data) {\n  var metadata = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false},{"name":"callback.err","description":"<ul> <li>An API error.</li> </ul> ","types":["error"],"optional":false,"nullable":true},{"name":"callback.metadata","description":"<ul> <li>Metadata of the change from the API.</li> </ul> ","types":["object"],"optional":false,"nullable":true},{"name":"callback.apiResponse","description":"<ul> <li>Raw API response.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"create","name":"create","type":"instance","description":"<p>Create a change.</p>","source":"packages\\dns\\src\\change.js#L159","resources":[],"examples":[{"code":"var config = {\n  add: {\n    // ...\n  }\n};\n\nchange.create(config, function(err, change, apiResponse) {\n  if (!err) {\n    // The change was created successfully.\n  }\n});"},{"caption":"<p>If the callback is omitted, we'll return a Promise.</p>","code":"change.create(config).then(function(data) {\n  var change = data[0];\n  var apiResponse = data[1];\n});"}],"params":[{"name":"config","description":"<ul> <li>See <a data-custom-type=\"dns/zone\" data-method=\"createChange\">dns/zone#createChange</a>.</li> </ul> ","types":["object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]}],"path":"change.json"}