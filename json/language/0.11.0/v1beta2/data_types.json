{"name":"Data Types","methods":[{"id":"Document","name":"Document","type":"instance","description":"<p>################################################################ #</p><p>Represents the input to API methods.</p>","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L55","resources":[],"examples":[],"params":[{"name":"type","description":"<p> Required. If the type is not set or is <code>TYPE_UNSPECIFIED</code>,  returns an <code>INVALID_ARGUMENT</code> error.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Type'\n        })\">Type</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Type'\n        })\">Type</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"content","description":"<p> The content of the input in string format.</p>","types":["string"],"optional":false,"nullable":false},{"name":"gcsContentUri","description":"<p> The Google Cloud Storage URI where the file content is located.  This URI must be of the form: gs://bucket_name/object_name. For more  details, see <a href=\"https://cloud.google.com/storage/docs/reference-uris\">https://cloud.google.com/storage/docs/reference-uris</a>.  NOTE: Cloud Storage object versioning is not supported.</p>","types":["string"],"optional":false,"nullable":false},{"name":"language","description":"<p> The language of the document (if not specified, the language is  automatically detected). Both ISO and BCP-47 language codes are  accepted.   <a href=\"https://cloud.google.com/natural-language/docs/languages\">Language Support</a>  lists currently supported languages for each API method.  If the language (either specified by the caller or automatically detected)  is not supported by the called API method, an <code>INVALID_ARGUMENT</code> error  is returned.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Type","name":"Type","type":"instance","description":"<p>The document types enum.</p>","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L63","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"Sentence","name":"Sentence","type":"instance","description":"<p>Represents a sentence in the input document.</p>","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L100","resources":[],"examples":[],"params":[{"name":"text","description":"<p> The sentence text.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'TextSpan'\n        })\">TextSpan</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'TextSpan'\n        })\">TextSpan</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"sentiment","description":"<p> For calls to {@link AnalyzeSentiment} or if  {@link AnnotateTextRequest.Features.extract_document_sentiment} is set to  true, this field will contain the sentiment for the sentence.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Sentiment'\n        })\">Sentiment</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Sentiment'\n        })\">Sentiment</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Entity","name":"Entity","type":"instance","description":"<p>Represents a phrase in the text that is a known entity, such as a person, an organization, or location. The API associates information, such as salience and mentions, with entities.</p>","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L148","resources":[],"examples":[],"params":[{"name":"name","description":"<p> The representative name for the entity.</p>","types":["string"],"optional":false,"nullable":false},{"name":"type","description":"<p> The entity type.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Type'\n        })\">Type</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Type'\n        })\">Type</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"metadata","description":"<p> Metadata associated with the entity.</p><p> Currently, Wikipedia URLs and Knowledge Graph MIDs are provided, if  available. The associated keys are &quot;wikipedia_url&quot; and &quot;mid&quot;, respectively.</p>","types":["Object.<string, string>"],"optional":false,"nullable":false},{"name":"salience","description":"<p> The salience score associated with the entity in the [0, 1.0] range.</p><p> The salience score for an entity provides information about the  importance or centrality of that entity to the entire document text.  Scores closer to 0 are less salient, while scores closer to 1.0 are highly  salient.</p>","types":["number"],"optional":false,"nullable":false},{"name":"mentions","description":"<p> The mentions of this entity in the input document. The API currently  supports proper noun mentions.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'EntityMention'\n        })\">EntityMention</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'EntityMention'\n        })\">EntityMention</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"sentiment","description":"<p> For calls to {@link AnalyzeEntitySentiment} or if  {@link AnnotateTextRequest.Features.extract_entity_sentiment} is set to  true, this field will contain the aggregate sentiment expressed for this  entity in the provided document.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Sentiment'\n        })\">Sentiment</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Sentiment'\n        })\">Sentiment</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Token","name":"Token","type":"instance","description":"<p>Represents the smallest syntactic building block of the text.</p>","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L224","resources":[],"examples":[],"params":[{"name":"text","description":"<p> The token text.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'TextSpan'\n        })\">TextSpan</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'TextSpan'\n        })\">TextSpan</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"partOfSpeech","description":"<p> Parts of speech tag for this token.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'PartOfSpeech'\n        })\">PartOfSpeech</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'PartOfSpeech'\n        })\">PartOfSpeech</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"dependencyEdge","description":"<p> Dependency tree parse for this token.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'DependencyEdge'\n        })\">DependencyEdge</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'DependencyEdge'\n        })\">DependencyEdge</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"lemma","description":"<p> <a href=\"https://en.wikipedia.org/wiki/Lemma_%28morphology%29\">Lemma</a> of the token.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Sentiment","name":"Sentiment","type":"instance","description":"<p>Represents the feeling associated with the entire text or entities in the text.</p>","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L244","resources":[],"examples":[],"params":[{"name":"magnitude","description":"<p> A non-negative number in the [0, +inf) range, which represents  the absolute magnitude of sentiment regardless of score (positive or  negative).</p>","types":["number"],"optional":false,"nullable":false},{"name":"score","description":"<p> Sentiment score between -1.0 (negative sentiment) and 1.0  (positive sentiment).</p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"PartOfSpeech","name":"PartOfSpeech","type":"instance","description":"<p>Represents part of speech information for a token.</p>","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L314","resources":[],"examples":[],"params":[{"name":"tag","description":"<p> The part of speech tag.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Tag'\n        })\">Tag</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Tag'\n        })\">Tag</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"aspect","description":"<p> The grammatical aspect.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Aspect'\n        })\">Aspect</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Aspect'\n        })\">Aspect</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"case","description":"<p> The grammatical case.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Case'\n        })\">Case</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Case'\n        })\">Case</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"form","description":"<p> The grammatical form.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Form'\n        })\">Form</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Form'\n        })\">Form</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"gender","description":"<p> The grammatical gender.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Gender'\n        })\">Gender</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Gender'\n        })\">Gender</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"mood","description":"<p> The grammatical mood.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Mood'\n        })\">Mood</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Mood'\n        })\">Mood</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"number","description":"<p> The grammatical number.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Number'\n        })\">Number</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Number'\n        })\">Number</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"person","description":"<p> The grammatical person.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Person'\n        })\">Person</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Person'\n        })\">Person</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"proper","description":"<p> The grammatical properness.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Proper'\n        })\">Proper</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Proper'\n        })\">Proper</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"reciprocity","description":"<p> The grammatical reciprocity.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Reciprocity'\n        })\">Reciprocity</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Reciprocity'\n        })\">Reciprocity</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"tense","description":"<p> The grammatical tense.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Tense'\n        })\">Tense</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Tense'\n        })\">Tense</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"voice","description":"<p> The grammatical voice.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Voice'\n        })\">Voice</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Voice'\n        })\">Voice</a></p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Tag","name":"Tag","type":"instance","description":"<p>The part of speech tags enum.</p>","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L322","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"Aspect","name":"Aspect","type":"instance","description":"<p>The characteristic of a verb that expresses time flow during an event.</p>","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L400","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"Case","name":"Case","type":"instance","description":"<p>The grammatical function performed by a noun or pronoun in a phrase, clause, or sentence. In some languages, other parts of speech, such as adjective and determiner, take case inflection in agreement with the noun.</p>","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L430","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"Form","name":"Form","type":"instance","description":"<p>Depending on the language, Form can be categorizing different forms of verbs, adjectives, adverbs, etc. For example, categorizing inflected endings of verbs and adjectives or distinguishing between short and long forms of adjectives and participles</p>","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L516","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"Gender","name":"Gender","type":"instance","description":"<p>Gender classes of nouns reflected in the behaviour of associated words.</p>","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L584","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"Mood","name":"Mood","type":"instance","description":"<p>The grammatical feature of verbs, used for showing modality and attitude.</p>","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L612","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"Number","name":"Number","type":"instance","description":"<p>Count distinctions.</p>","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L655","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"Person","name":"Person","type":"instance","description":"<p>The distinction between the speaker, second person, third person, etc.</p>","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L683","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"Proper","name":"Proper","type":"instance","description":"<p>This category shows if the token is part of a proper name.</p>","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L716","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"Reciprocity","name":"Reciprocity","type":"instance","description":"<p>Reciprocal features of a pronoun.</p>","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L739","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"Tense","name":"Tense","type":"instance","description":"<p>Time reference.</p>","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L763","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"Voice","name":"Voice","type":"instance","description":"<p>The relationship between the action that a verb expresses and the participants identified by its arguments.</p>","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L807","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"DependencyEdge","name":"DependencyEdge","type":"instance","description":"<p>Represents dependency parse tree information for a token.</p>","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L849","resources":[],"examples":[],"params":[{"name":"headTokenIndex","description":"<p> Represents the head of this token in the dependency tree.  This is the index of the token which has an arc going to this token.  The index is the position of the token in the array of tokens returned  by the API method. If this token is a root token, then the  <code>head_token_index</code> is its own index.</p>","types":["number"],"optional":false,"nullable":false},{"name":"label","description":"<p> The parse label for the token.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Label'\n        })\">Label</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Label'\n        })\">Label</a></p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Label","name":"Label","type":"instance","description":"<p>The parse label enum for the token.</p>","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L857","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"EntityMention","name":"EntityMention","type":"instance","description":"<p>Represents a mention for an entity in the text. Currently, proper noun mentions are supported.</p>","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L1271","resources":[],"examples":[],"params":[{"name":"text","description":"<p> The mention text.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'TextSpan'\n        })\">TextSpan</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'TextSpan'\n        })\">TextSpan</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"type","description":"<p> The type of the entity mention.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Type'\n        })\">Type</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Type'\n        })\">Type</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"sentiment","description":"<p> For calls to {@link AnalyzeEntitySentiment} or if  {@link AnnotateTextRequest.Features.extract_entity_sentiment} is set to  true, this field will contain the sentiment expressed for this mention of  the entity in the provided document.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Sentiment'\n        })\">Sentiment</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Sentiment'\n        })\">Sentiment</a></p>","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"TextSpan","name":"TextSpan","type":"instance","description":"<p>Represents an output piece of text.</p>","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L1311","resources":[],"examples":[],"params":[{"name":"content","description":"<p> The content of the output text.</p>","types":["string"],"optional":false,"nullable":false},{"name":"beginOffset","description":"<p> The API calculates the beginning offset of the content in the original  document according to the {@link EncodingType} specified in the API request.</p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"AnalyzeSentimentRequest","name":"AnalyzeSentimentRequest","type":"instance","description":"","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L1332","resources":[],"examples":[],"params":[{"name":"document","description":"<p> Input document.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Document'\n        })\">Document</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Document'\n        })\">Document</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"encodingType","description":"<p> The encoding type used by the API to calculate sentence offsets for the  sentence sentiment.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'EncodingType'\n        })\">EncodingType</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'EncodingType'\n        })\">EncodingType</a></p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"AnalyzeSentimentResponse","name":"AnalyzeSentimentResponse","type":"instance","description":"","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L1357","resources":[],"examples":[],"params":[{"name":"documentSentiment","description":"<p> The overall sentiment of the input document.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Sentiment'\n        })\">Sentiment</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Sentiment'\n        })\">Sentiment</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"language","description":"<p> The language of the text, which will be the same as the language specified  in the request or, if not specified, the automatically-detected language.  See {@link Document.language} field for more details.</p>","types":["string"],"optional":false,"nullable":false},{"name":"sentences","description":"<p> The sentiment for all the sentences in the document.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Sentence'\n        })\">Sentence</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Sentence'\n        })\">Sentence</a></p>","types":["Object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"AnalyzeEntitySentimentRequest","name":"AnalyzeEntitySentimentRequest","type":"instance","description":"","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L1377","resources":[],"examples":[],"params":[{"name":"document","description":"<p> Input document.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Document'\n        })\">Document</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Document'\n        })\">Document</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"encodingType","description":"<p> The encoding type used by the API to calculate offsets.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'EncodingType'\n        })\">EncodingType</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'EncodingType'\n        })\">EncodingType</a></p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"AnalyzeEntitySentimentResponse","name":"AnalyzeEntitySentimentResponse","type":"instance","description":"","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L1397","resources":[],"examples":[],"params":[{"name":"entities","description":"<p> The recognized entities in the input document with associated sentiments.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Entity'\n        })\">Entity</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Entity'\n        })\">Entity</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"language","description":"<p> The language of the text, which will be the same as the language specified  in the request or, if not specified, the automatically-detected language.  See {@link Document.language} field for more details.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"AnalyzeEntitiesRequest","name":"AnalyzeEntitiesRequest","type":"instance","description":"","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L1417","resources":[],"examples":[],"params":[{"name":"document","description":"<p> Input document.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Document'\n        })\">Document</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Document'\n        })\">Document</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"encodingType","description":"<p> The encoding type used by the API to calculate offsets.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'EncodingType'\n        })\">EncodingType</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'EncodingType'\n        })\">EncodingType</a></p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"AnalyzeEntitiesResponse","name":"AnalyzeEntitiesResponse","type":"instance","description":"","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L1437","resources":[],"examples":[],"params":[{"name":"entities","description":"<p> The recognized entities in the input document.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Entity'\n        })\">Entity</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Entity'\n        })\">Entity</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"language","description":"<p> The language of the text, which will be the same as the language specified  in the request or, if not specified, the automatically-detected language.  See {@link Document.language} field for more details.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"AnalyzeSyntaxRequest","name":"AnalyzeSyntaxRequest","type":"instance","description":"","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L1457","resources":[],"examples":[],"params":[{"name":"document","description":"<p> Input document.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Document'\n        })\">Document</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Document'\n        })\">Document</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"encodingType","description":"<p> The encoding type used by the API to calculate offsets.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'EncodingType'\n        })\">EncodingType</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'EncodingType'\n        })\">EncodingType</a></p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"AnalyzeSyntaxResponse","name":"AnalyzeSyntaxResponse","type":"instance","description":"","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L1482","resources":[],"examples":[],"params":[{"name":"sentences","description":"<p> Sentences in the input document.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Sentence'\n        })\">Sentence</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Sentence'\n        })\">Sentence</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"tokens","description":"<p> Tokens, along with their syntactic information, in the input document.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Token'\n        })\">Token</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Token'\n        })\">Token</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"language","description":"<p> The language of the text, which will be the same as the language specified  in the request or, if not specified, the automatically-detected language.  See {@link Document.language} field for more details.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"AnnotateTextRequest","name":"AnnotateTextRequest","type":"instance","description":"","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L1508","resources":[],"examples":[],"params":[{"name":"document","description":"<p> Input document.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Document'\n        })\">Document</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Document'\n        })\">Document</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"features","description":"<p> The enabled features.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Features'\n        })\">Features</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Features'\n        })\">Features</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"encodingType","description":"<p> The encoding type used by the API to calculate offsets.</p><p> The number should be among the values of <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'EncodingType'\n        })\">EncodingType</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'EncodingType'\n        })\">EncodingType</a></p>","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"Features","name":"Features","type":"instance","description":"<p>All available features for sentiment, syntax, and semantic analysis. Setting each one to true will enable that specific analysis for the input.</p>","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L1530","resources":[],"examples":[],"params":[{"name":"extractSyntax","description":"<p> Extract syntax information.</p>","types":["boolean"],"optional":false,"nullable":false},{"name":"extractEntities","description":"<p> Extract entities.</p>","types":["boolean"],"optional":false,"nullable":false},{"name":"extractDocumentSentiment","description":"<p> Extract document-level sentiment.</p>","types":["boolean"],"optional":false,"nullable":false},{"name":"extractEntitySentiment","description":"<p> Extract entities and their associated sentiment.</p>","types":["boolean"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"AnnotateTextResponse","name":"AnnotateTextResponse","type":"instance","description":"","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L1572","resources":[],"examples":[],"params":[{"name":"sentences","description":"<p> Sentences in the input document. Populated if the user enables  {@link AnnotateTextRequest.Features.extract_syntax}.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Sentence'\n        })\">Sentence</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Sentence'\n        })\">Sentence</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"tokens","description":"<p> Tokens, along with their syntactic information, in the input document.  Populated if the user enables  {@link AnnotateTextRequest.Features.extract_syntax}.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Token'\n        })\">Token</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Token'\n        })\">Token</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"entities","description":"<p> Entities, along with their semantic information, in the input document.  Populated if the user enables  {@link AnnotateTextRequest.Features.extract_entities}.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Entity'\n        })\">Entity</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Entity'\n        })\">Entity</a></p>","types":["Object[]"],"optional":false,"nullable":false},{"name":"documentSentiment","description":"<p> The overall sentiment for the document. Populated if the user enables  {@link AnnotateTextRequest.Features.extract_document_sentiment}.</p><p> This object should have the same structure as <a ng-if=\"service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.parent}}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Sentiment'\n        })\">Sentiment</a>\n\n        <a ng-if=\"!service.parent\" ui-sref=\"docs.service({\n          serviceId: '{{service.title.split('V')[0] + '/v' + service.title.split('V')[1]}}/data_types',\n          method: 'Sentiment'\n        })\">Sentiment</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"language","description":"<p> The language of the text, which will be the same as the language specified  in the request or, if not specified, the automatically-detected language.  See {@link Document.language} field for more details.</p>","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"EncodingType","name":"EncodingType","type":"instance","description":"<p>Represents the text encoding that the caller uses to process the output. Providing an <code>EncodingType</code> is recommended because the API provides the beginning offsets for various outputs, such as tokens and mentions, and languages that natively use different text encodings may access offsets differently.</p>","source":"packages\\language\\src\\v1beta2\\doc\\doc_language_service.js#L1585","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]}],"path":"v1beta2/data_types.json","description":"\n          <table class=\"table\">\n            <thead>\n              <tr>\n                <th>Class</th>\n                <th>Description</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr ng-repeat=\"method in service.methods\" ng-if=\"method.name\">\n                <td>\n                  <a ui-sref=\"docs.service({ method: method.id })\" class=\"skip-external-link\">\n                    {{method.name}}\n                  </a>\n                </td>\n                <td>\n                  <span ng-bind-html=\"method.description\">\n                    {{method.description}}\n                  </span>\n                  <span ng-if=\"!method.description && method.name.includes('Request')\">\n                    The request for {{method.name}}.\n                  </span>\n                  <span ng-if=\"!method.description && method.name.includes('Response')\">\n                    The response for {{method.name}}.\n                  </span>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        ","id":"language/v1beta2/data_types"}