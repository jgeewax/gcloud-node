{"id":"language/v1/language_service_client","type":"class","overview":"<p>\n  This class allows you interact with Cloud Natural Language.\n</p>\n\n\n\n<p>\n  First, install <code>@google-cloud/language</code> with npm:\n</p>\n\n<div hljs language=\"bash\">$ npm install --save @google-cloud/language</div>\n\n<p>\n  If you are running your app on Google Compute Engine, you won't need to worry about supplying connection configuration options to <code>@google-cloud/language</code>â€” we figure that out for you.\n</p>\n\n<p>\n  However, if you're running your app elsewhere, you will need to provide project details to authenticate API requests.\n</p>\n\n<h4>Google Cloud Platform</h4>\n<div hljs language=\"javascript\">\nvar language = require('@google-cloud/language')();\n</div>\n\n<h4>Elsewhere</h4>\n<div hljs language=\"javascript\">\nvar language = require('@google-cloud/language')({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n</div>\n\n<p>\n  The full set of options which can be passed to <code>@google-cloud/language</code> are outlined in our <a href=\"#/docs/language/v0.10.6/guides/authentication\">Authentication guide</a>.\n</p>\n","source":"packages\\language\\src\\v1\\language_service_client.js","parent":"language","children":[],"methods":[{"id":"LanguageServiceClient","name":"LanguageServiceClient","type":"constructor","description":"<p>Provides text analysis operations such as sentiment analysis and entity recognition.</p><p>This will be created through a builder function which can be obtained by the module. See the following example of how to initialize the module and how to access to the builder.</p>","source":"packages\\language\\src\\v1\\language_service_client.js#L64","resources":[],"examples":[{"code":"var languageV1 = require('@google-cloud/language').v1({\n  // optional auth parameters.\n});\nvar client = languageV1.languageServiceClient();"}],"params":[],"exceptions":[],"returns":[]},{"id":"getProjectId","name":"getProjectId","type":"instance","description":"<p>Get the project ID used by this class.</p>","source":"packages\\language\\src\\v1\\language_service_client.js#L119","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"analyzeSentiment","name":"analyzeSentiment","type":"instance","description":"<p>Analyzes the sentiment of the provided text.</p>","source":"packages\\language\\src\\v1\\language_service_client.js#L161","resources":[],"examples":[{"code":"\nvar client = languageV1.languageServiceClient();\nvar document = {};\nclient.analyzeSentiment({document: document}).then(function(responses) {\n    var response = responses[0];\n    // doThingsWith(response)\n}).catch(function(err) {\n    console.error(err);\n});"}],"params":[{"name":"request","description":"<p> The request object that will be sent.</p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.document","description":"<p> Input document. Currently, <code>analyzeSentiment</code> only supports English text  ({@link Document.language}=&quot;EN&quot;).</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Document'\n        })\">Document</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.encodingType","description":"<p> The encoding type used by the API to calculate sentence offsets.</p><p> The number should be among the values of <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'EncodingType'\n        })\">EncodingType</a></p>","types":["number"],"optional":true,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this call, e.g, timeout,  retries, paginations, etc. See <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a> for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'AnalyzeSentimentResponse'\n        })\">AnalyzeSentimentResponse</a>.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'AnalyzeSentimentResponse'\n        })\">AnalyzeSentimentResponse</a>. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"analyzeEntities","name":"analyzeEntities","type":"instance","description":"<p>Finds named entities (currently finds proper names) in the text, entity types, salience, mentions for each entity, and other properties.</p>","source":"packages\\language\\src\\v1\\language_service_client.js#L214","resources":[],"examples":[{"code":"\nvar client = languageV1.languageServiceClient();\nvar document = {};\nvar encodingType = languageV1.EncodingType.NONE;\nvar request = {\n    document: document,\n    encodingType: encodingType\n};\nclient.analyzeEntities(request).then(function(responses) {\n    var response = responses[0];\n    // doThingsWith(response)\n}).catch(function(err) {\n    console.error(err);\n});"}],"params":[{"name":"request","description":"<p> The request object that will be sent.</p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.document","description":"<p> Input document.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Document'\n        })\">Document</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.encodingType","description":"<p> The encoding type used by the API to calculate offsets.</p><p> The number should be among the values of <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'EncodingType'\n        })\">EncodingType</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this call, e.g, timeout,  retries, paginations, etc. See <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a> for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'AnalyzeEntitiesResponse'\n        })\">AnalyzeEntitiesResponse</a>.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'AnalyzeEntitiesResponse'\n        })\">AnalyzeEntitiesResponse</a>. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"analyzeSyntax","name":"analyzeSyntax","type":"instance","description":"<p>Analyzes the syntax of the text and provides sentence boundaries and tokenization along with part of speech tags, dependency trees, and other properties.</p>","source":"packages\\language\\src\\v1\\language_service_client.js#L268","resources":[],"examples":[{"code":"\nvar client = languageV1.languageServiceClient();\nvar document = {};\nvar encodingType = languageV1.EncodingType.NONE;\nvar request = {\n    document: document,\n    encodingType: encodingType\n};\nclient.analyzeSyntax(request).then(function(responses) {\n    var response = responses[0];\n    // doThingsWith(response)\n}).catch(function(err) {\n    console.error(err);\n});"}],"params":[{"name":"request","description":"<p> The request object that will be sent.</p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.document","description":"<p> Input document.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Document'\n        })\">Document</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.encodingType","description":"<p> The encoding type used by the API to calculate offsets.</p><p> The number should be among the values of <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'EncodingType'\n        })\">EncodingType</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this call, e.g, timeout,  retries, paginations, etc. See <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a> for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'AnalyzeSyntaxResponse'\n        })\">AnalyzeSyntaxResponse</a>.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'AnalyzeSyntaxResponse'\n        })\">AnalyzeSyntaxResponse</a>. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"annotateText","name":"annotateText","type":"instance","description":"<p>A convenience method that provides all the features that analyzeSentiment, analyzeEntities, and analyzeSyntax provide in one call.</p>","source":"packages\\language\\src\\v1\\language_service_client.js#L327","resources":[],"examples":[{"code":"\nvar client = languageV1.languageServiceClient();\nvar document = {};\nvar features = {};\nvar encodingType = languageV1.EncodingType.NONE;\nvar request = {\n    document: document,\n    features: features,\n    encodingType: encodingType\n};\nclient.annotateText(request).then(function(responses) {\n    var response = responses[0];\n    // doThingsWith(response)\n}).catch(function(err) {\n    console.error(err);\n});"}],"params":[{"name":"request","description":"<p> The request object that will be sent.</p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.document","description":"<p> Input document.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Document'\n        })\">Document</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.features","description":"<p> The enabled features.</p><p> This object should have the same structure as <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'Features'\n        })\">Features</a></p>","types":["Object"],"optional":false,"nullable":false},{"name":"request.encodingType","description":"<p> The encoding type used by the API to calculate offsets.</p><p> The number should be among the values of <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'EncodingType'\n        })\">EncodingType</a></p>","types":["number"],"optional":false,"nullable":false},{"name":"options","description":"<p> Optional parameters. You can override the default settings for this call, e.g, timeout,  retries, paginations, etc. See <a href=\"https://googleapis.github.io/gax-nodejs/global.html#CallOptions\">gax.CallOptions</a> for the details.</p>","types":["Object"],"optional":true,"nullable":false},{"name":"callback","description":"<p> The function which will be called with the result of the API call.</p><p> The second parameter to the callback is an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'AnnotateTextResponse'\n        })\">AnnotateTextResponse</a>.</p>","types":["function(Error|null, Object|null)"],"optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Promise"],"description":"<ul> <li>The promise which resolves to an array. The first element of the array is an object representing <a ui-sref=\"docs.service({\n          serviceId: '{{ service.parent }}/{{service.path.split('/').shift()}}/data_types',\n          method: 'AnnotateTextResponse'\n        })\">AnnotateTextResponse</a>. The promise has a method named &quot;cancel&quot; which cancels the ongoing API call.</li> </ul> "}]},{"id":"languageServiceClient","name":"languageServiceClient","type":"instance","description":"<p>Build a new instance of {@link LanguageServiceClient}.</p>","source":"packages\\language\\src\\v1\\language_service_client.js#L365","resources":[],"examples":[],"params":[{"name":"opts","description":"<ul> <li>The optional parameters.</li> </ul> ","types":["Object"],"optional":true,"nullable":false},{"name":"opts.servicePath","description":"<p> The domain name of the API remote host.</p>","types":["String"],"optional":true,"nullable":false},{"name":"opts.port","description":"<p> The port on which to connect to the remote host.</p>","types":["number"],"optional":true,"nullable":false},{"name":"opts.sslCreds","description":"<p> A ClientCredentials for use with an SSL-enabled channel.</p>","types":["grpc.ClientCredentials"],"optional":true,"nullable":false},{"name":"opts.clientConfig","description":"<p> The customized config to build the call settings. See  {@link gax.constructSettings} for the format.</p>","types":["Object"],"optional":true,"nullable":false}],"exceptions":[],"returns":[]}],"path":"v1/language_service_client.json"}